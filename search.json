[{"title":"正式入驻Github(雾)","url":"/2022/02/08/01-migrate-to-github/","content":"<h1 id=\"正式入住Github\"><a href=\"#正式入住Github\" class=\"headerlink\" title=\"正式入住Github\"></a>正式入住Github</h1><p>阮一峰说过(<a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\">大概是他说的吧</a>)</p>\n<blockquote>\n<p>喜欢写Blog的人，会经历三个阶段。</p>\n<blockquote>\n<p>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。<br>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。<br>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p>\n</blockquote>\n</blockquote>\n<p>在经历了使用<a href=\"https://cnblogs.com/corona09\">博客园</a>, 自行搭建网站后, 我感受到了以上两种方式都很不方便.<br>我都需要打开浏览器, 在浏览器中写内容. 或者在本地写好后, 将内容复制到浏览器中. 而复制的过程中往往会导致格式的错落等问题. 以及, 这些写作方式的最麻烦的还是对图片的处理. 每当要在文章中上传一张图片时, 就需要将图片上传到图床. 要么使用额外的软件, 要么就得手动上传.</p>\n<p>这很劝退! <del>很不优雅!</del></p>\n<p>终于, 还是选择了使用Github来搭建博客.</p>\n<p>此后就在这里记录学习到的东西了(大概)!</p>\n<hr>\n<p>现在可以开始搬运了, 等所有有用的博客搬运完毕, 那个粗制滥造的网站就可以停止运行了!</p>\n<hr>\n<h1 id=\"偷懒秘诀\"><a href=\"#偷懒秘诀\" class=\"headerlink\" title=\"偷懒秘诀\"></a>偷懒秘诀</h1><p>2022-02-10</p>\n<p>搬运工作已经完成, 为了方便推送文章, 写了一个<code>makefile</code>, 在vim中写完文章之后只需要打开内置终端执行<code>make</code>就能推送到github.<br>在推送时会检查目录下是否存在<code>msg.txt</code>文件, 如果该文件存在则会读取其内容, 添加到commit message中; 如果不存在则生成时间信息作为commit message.<br>为了避免提交信息重复, 因此每次提交结束后都会清空msg.txt文件.<br>执行<code>make clean</code>就能删除空白文件夹并清空msg.txt.</p>\n<p>2022-02-13</p>\n<p>添加了gitee pages, 同时, 为了同步文章(同步文章而非public文件夹下的静态网页文件), 我为博客文章也创建了一个git仓库, 这下就有三个远程仓库了. 因此对Makefile进行了大改, 将推送的规则拆成了三条, 分别推送到三个仓库.</p>\n<p>重构后的Makefile有点长, 这里就不列出来了.</p>\n<p>2022-02-13 22:41</p>\n<p>好像gitee pages有点问题…先不搞gitee pages.</p>\n<p>gitee太愚蠢了, 不搞了</p>\n<hr>\n<h1 id=\"写作规范\"><a href=\"#写作规范\" class=\"headerlink\" title=\"写作规范\"></a>写作规范</h1><p>因为页面的生成是依赖于内容的, 因此需要着重注意下文件的一些规范.</p>\n<h2 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h2><p>文件命名以数字开头, 数字无前缀零, 后跟小写英文单词, 尽量避免中文. 单词之间以段横线连接.</p>\n<p>因为最终博客文章网址会与文件名有关, 因此应该尽量避免文件名的更改.</p>\n<h2 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h2><p>因为感觉<code>分类</code>与<code>Tag</code>有一定的重复, 因此我将<code>分类</code>从主页中去除了, 只保留了<code>Tag</code>.</p>\n<p>Tag在命名时, 如果是英文开头, 则首字母大写. 要避免出现<code>Linux</code>与<code>linux</code>同时出现这种情况.</p>\n","tags":["杂"]},{"title":"一些乱七八糟的东西","url":"/2022/02/09/02-sundries/","content":"<h1 id=\"1-修改文件默认打开方式\"><a href=\"#1-修改文件默认打开方式\" class=\"headerlink\" title=\"1 修改文件默认打开方式\"></a>1 修改文件默认打开方式</h1><p>自从用了ranger，就再也不想用其他文件管理器了</p>\n<p>但是每当我从pi<em>iv上下载</em>图的时候，点击“Show in folder”总是没有反应。。。</p>\n<p>今天终于解决了这个问题</p>\n<p>首先，当点击show in folder时chrome会调用xdg-open，使用其配置的文件夹默认打开方式。</p>\n<p>因此，需要将ranger设为默认的文件夹打开方式。</p>\n<p>找到ranger.desktop 文件，一般在/usr/share/applications 下，将其复制到<del>/.local/share/applications 下；<br>修改ranger.desktop: <code>Terminal=false Exev=alacritty -e ranger</code>，此处<code>alacritty</code>可替换为自己想用的终端模拟器；<br>修改`</del>/.local/share/applications<code> 目录下的</code>defaults.list<code>或</code>mimeapps.list<code>，添加/修改: </code>inode/directoy=ranger.desktop`;</p>\n<p>万事大吉了～</p>\n<p>关于ranger, 如果未经配置，当从ranger中退出时并不会进入当前路径。比如，在/home/admin/ 路径下启动ranger，之后在ranger中进入了路径/home/admin/Downloads ，则退出ranger时会重新回到/home/admin 。如果选择使用内置的“在当前文件进入终端“，则实际上并没有退出ranger，只是又套娃🪆开启了一个终端。</p>\n<p>在fish中可以添加以下function来使ranger在退出时进入当前文件夹：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\"><span class=\"hljs-meta\">#!/usr/bin/env fish</span><br><span class=\"hljs-keyword\">function</span> ranger<br>    <span class=\"hljs-built_in\">command</span> ranger --choosedir=<span class=\"hljs-variable\">$HOME</span>/.rangerdir; <span class=\"hljs-built_in\">set</span> LASTDIR (<span class=\"hljs-built_in\">cat</span> <span class=\"hljs-variable\">$HOME</span>/.rangerdir); <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$LASTDIR</span>&quot;</span> <span class=\"hljs-variable\">$argv</span><br>end<br></code></pre></td></tr></table></figure>\n\n<p> 在bash中可以在~/.bashrc 中添加以下内容：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\"><span class=\"hljs-built_in\">alias</span> ra=<span class=\"hljs-string\">&#x27;ranger --choosedir=$HOME/.rangerdir;LASTDIR=`cat $HOME/.rangerdir`; cd &quot;$LASTDIR&quot;&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>这样会在家目录下创建一个<code>.rangerdir</code>文件，通过这个文件可以实现ranger退出时进入当前文件夹。</p>\n<p>另外，使用xdg-mime query filetype XXX 可查看对应文件的mime-type，在deaults.list中添加类似上述的语句可以配置程序默认打开方式。</p>\n<h1 id=\"2-配置触控板\"><a href=\"#2-配置触控板\" class=\"headerlink\" title=\"2 配置触控板\"></a>2 配置触控板</h1><p>默认的没有给触控板配置轻触左键、双指轻触右键</p>\n<p>需要自己配置下</p>\n<p>安装xf86-inupt-libinput与xf86-input-synaptics</p>\n<p>配置一下，将一下文件复制到/etc/X11/xorg.conf.d/70-synaptics.conf</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><code class=\"hljs X86ASM\"><span class=\"hljs-meta\">Section</span> <span class=\"hljs-string\">&quot;InputClass&quot;</span><br>        Identifier <span class=\"hljs-string\">&quot;Apple Inc. Apple Internal Keyboard / Trackpad&quot;</span><br>        Driver <span class=\"hljs-string\">&quot;synaptics&quot;</span><br>        MatchIsTouchpad <span class=\"hljs-string\">&quot;on&quot;</span><br>        <span class=\"hljs-meta\">Option</span> <span class=\"hljs-string\">&quot;TapButton1&quot;</span> <span class=\"hljs-string\">&quot;1&quot;</span><br>        <span class=\"hljs-meta\">Option</span> <span class=\"hljs-string\">&quot;TapButton2&quot;</span> <span class=\"hljs-string\">&quot;3&quot;</span><br>EndSection<br></code></pre></td></tr></table></figure>\n\n<p>其中，TapButton1是单指轻触，后面的“1”代表左键</p>\n<p>TapButton2是双指轻触，后面的“3”代表右键。</p>\n<h1 id=\"3-Latex-中文显示\"><a href=\"#3-Latex-中文显示\" class=\"headerlink\" title=\"3 Latex 中文显示\"></a>3 Latex 中文显示</h1><p>按照archwiki上装完texlive-bin、texlive-most等等包后，一通操作，，，发现并不好使。。。</p>\n<p>下载TexStudio，选项→构建→默认编译器 选择XeTex，好耶，能编译了！</p>\n<p>但是还是不能显示中文！没有任何报错，就是不能显示中文，很烦！</p>\n<p>最后搞来搞去，是少了个<code>poppler-data</code>的包。。。</p>\n<p>装好就ok了</p>\n<hr>\n<h1 id=\"4-自动挂载磁盘\"><a href=\"#4-自动挂载磁盘\" class=\"headerlink\" title=\"4 自动挂载磁盘\"></a>4 自动挂载磁盘</h1><p>10-29 台式机换了manjaro,不戳不戳，针不戳。</p>\n<p>不过因为有两张磁盘，所以需要配置一下对机械硬盘的自动挂载。</p>\n<p>修改<code>/etc/fstab</code>文件</p>\n<p>在文件的最后添加如下内容：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs fstab\">/dev/sda1 /data ext4 defaults 0 0<br></code></pre></td></tr></table></figure>\n\n<p>其中<code>/dev/sda1</code>是要挂载的设备，<code>/data</code>是挂载点</p>\n<p>添加完后，执行<code>mount -a</code>   进行检查，如果设备被挂载上，则说明配置正确。</p>\n<p>在挂载完机械硬盘后, 为其设置一个标签 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo e2label /dev/sda1 HHD<br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"5-交换Caps-Lock与左Ctrl\"><a href=\"#5-交换Caps-Lock与左Ctrl\" class=\"headerlink\" title=\"5 交换Caps Lock与左Ctrl\"></a>5 交换Caps Lock与左Ctrl</h1><p>创建文件<code>/etc/X11/xorg.conf.d/00-keyboard.conf</code></p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><code class=\"hljs X86ASM\"><span class=\"hljs-meta\">Section</span> <span class=\"hljs-string\">&quot;InputClass&quot;</span><br>        Identifier <span class=\"hljs-string\">&quot;system-keyboard&quot;</span><br>        MatchIsKeyboard <span class=\"hljs-string\">&quot;on&quot;</span><br>        <span class=\"hljs-meta\">Option</span> <span class=\"hljs-string\">&quot;XkbOptions&quot;</span> <span class=\"hljs-string\">&quot;ctrl:swapcaps&quot;</span><br>EndSection<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"6-交换普通FN键与功能键\"><a href=\"#6-交换普通FN键与功能键\" class=\"headerlink\" title=\"6 交换普通FN键与功能键\"></a>6 交换普通FN键与功能键</h1><p>我现在（2021）用的这台电脑是MacBook Air，默认按F1, F2, F3等触发的是调整键盘亮度、声音等功能，要用原本的F1, F2, ..，就必须要按Fn+F1,…，但是我想要直接就是原本的F1,F2,…</p>\n<p>通过这个提示可以完成设置：</p>\n<ol>\n<li><p>将以下内容添加到文件/etc/modprobe.d/hid_apple.conf 中（没有则创建）；</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">options hid_apple fnmode=2<br></code></pre></td></tr></table></figure></li>\n<li><p>将<code>/etc/modprobe.d/hid_apple.conf</code>添加到<code>/etc/mkinitcpio.conf</code>的<code>FILES</code>一项中，将<code>modconf</code>添加到<code>HOOKS</code>一项中；</p>\n</li>\n<li><p>手动重新生成<code>initramfs</code></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">mkinitcpio -p linux<br></code></pre></td></tr></table></figure>\n<p> 重启电脑，设置完成。</p>\n</li>\n</ol>\n<h1 id=\"7-开机后自动启动NumLock\"><a href=\"#7-开机后自动启动NumLock\" class=\"headerlink\" title=\"7 开机后自动启动NumLock\"></a>7 开机后自动启动NumLock</h1><p>因为我使用的是Lightdm, 因此可以<a href=\"https://wiki.archlinux.org/title/LightDM_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E5%B0%8F%E9%94%AE%E7%9B%98\">在启动LightDM的时候启动NumLock</a>.</p>\n<p>在<code>/etc/lightdm/lightdm.conf</code>文件中添加以下内容:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Seat:*]</span><br><span class=\"hljs-attr\">greeter-setup-script</span>=/usr/bin/numlockx <span class=\"hljs-literal\">on</span><br></code></pre></td></tr></table></figure>\n<p>其中如果没有numlockx这个程序, 则可以安装<a href=\"https://archlinux.org/packages/community/x86_64/numlockx/\">numlockx包</a>.</p>\n<h1 id=\"8-开机与睡眠苏醒后恢复亮度\"><a href=\"#8-开机与睡眠苏醒后恢复亮度\" class=\"headerlink\" title=\"8 开机与睡眠苏醒后恢复亮度\"></a>8 开机与睡眠苏醒后恢复亮度</h1><h2 id=\"8-1-开机恢复亮度\"><a href=\"#8-1-开机恢复亮度\" class=\"headerlink\" title=\"8.1 开机恢复亮度\"></a>8.1 开机恢复亮度</h2><p>开机亮度的恢复, 即恢复上次关机时的亮度.</p>\n<p>首先编写以下自定义服务: brihgtness-revocer.service</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Unit]</span><br><span class=\"hljs-attr\">Description</span>=Recover Brightness after lightdm launched.<br><span class=\"hljs-attr\">After</span>=display-manager.service<br><br><span class=\"hljs-section\">[Service]</span><br><span class=\"hljs-attr\">ExecStart</span>=sh /home/corona/Software/myScript/bright/brightness_recover_from_abs.sh<br><br><span class=\"hljs-section\">[Install]</span><br><span class=\"hljs-attr\">WantedBy</span>=multi-user.target<br><span class=\"hljs-attr\">Alias</span>=brightness-recover.service<br></code></pre></td></tr></table></figure>\n\n<p>将该脚本放到/etc/systemd/system 下, 然后启动服务:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs Bash\">systemctl <span class=\"hljs-built_in\">enable</span> brightness-recover.service<br>systemctl start brightness-recover.service<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"8-2-唤醒后恢复亮度\"><a href=\"#8-2-唤醒后恢复亮度\" class=\"headerlink\" title=\"8.2 唤醒后恢复亮度\"></a>8.2 唤醒后恢复亮度</h2><p>每次睡眠前及从睡眠中苏醒后, 都会执行/usr/lib/systemd/system-sleep  中的脚本, 而安装 tlp 之后会有一个 tlp 相关的脚本, 在每次苏醒之后唤醒tlp服务, 而将恢复亮度脚本放到该路径下之后, 其执行会在tlp之前执行, 恢复的亮度之后又被tlp给调到最亮了</p>\n<p>因此, 需要修改<code>/usr/lib/systemd/system-sleep/tlp</code>, 将恢复亮度的部分添加到<code>tlp resume</code>之后.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br><br><span class=\"hljs-comment\"># tlp - systemd suspend/resume hook</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Copyright (c) 2021 Thomas Koch &lt;linrunner at gmx.net&gt; and others.</span><br><span class=\"hljs-comment\"># This software is licensed under the GPL v2 or later.</span><br><br><span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable\">$1</span> <span class=\"hljs-keyword\">in</span><br>    pre)  tlp <span class=\"hljs-built_in\">suspend</span> ;;<br>    post) <br>        tlp resume<br><br>        bright=`<span class=\"hljs-built_in\">cat</span> /home/corona/.abs_brightness`<br><br>        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$&#123;bright&#125;</span> &gt; /sys/class/backlight/intel_backlight/brightness<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">test</span> $? -eq 0; <span class=\"hljs-keyword\">then</span> <br>            <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;[`date`] Brightness(value=<span class=\"hljs-variable\">$&#123;bright&#125;</span>) Successfully Recoverd.&quot;</span><br>        <span class=\"hljs-keyword\">else</span><br>            <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;[`date`] Brightness(value=<span class=\"hljs-variable\">$&#123;bright&#125;</span>) Failed to Recover.&quot;</span><br>        <span class=\"hljs-keyword\">fi</span><br>        ;;<br><span class=\"hljs-keyword\">esac</span><br></code></pre></td></tr></table></figure>\n\n<p>但是其实这样做, 唤醒后还有一个亮度变为最亮的过程, 只不过会自动调回去.</p>\n<p>将tlp卸载后发现不是tlp的问题….有点迷惑</p>\n<p>另外每次tlp更新都会重写这个脚本…或许应该找一下更好的解决方案</p>\n<h1 id=\"9-i3下开机后打开终端明显很慢的问题\"><a href=\"#9-i3下开机后打开终端明显很慢的问题\" class=\"headerlink\" title=\"9 i3下开机后打开终端明显很慢的问题\"></a>9 i3下开机后打开终端明显很慢的问题</h1><p>i3启动后, 如果立即打开终端, 则明显能感受到很长的延迟, 这实在是不能容忍.</p>\n<p>经过我多次试验, 终于发现问题在于开机启动项上: 如果开机启动项中有fcitx5, 那么就会导致终端启动很慢.</p>\n<p>(但是为什么呢???… 因为fcitx5而启动慢…这就很难搞,总不能不启动输入法吧…</p>\n<p>已尝试:</p>\n<p>调换i3配置自动启动项的顺序(失败)</p>\n<p>解决方法:</p>\n<p>一个思路: 自行编写一个启动fcitx5的服务, 实测不行</p>\n<h1 id=\"10-Polybar-无法显示Fcitx输入法的问题\"><a href=\"#10-Polybar-无法显示Fcitx输入法的问题\" class=\"headerlink\" title=\"10 Polybar 无法显示Fcitx输入法的问题\"></a>10 Polybar 无法显示Fcitx输入法的问题</h1><p>目前找到了一个次优的解决方案: 自行写一个脚本判断当前的输入法是英文还是中文模式.</p>\n<p>脚本都在配置文件的仓库里了, 不贴了, 主要用到的是fcitx5-remote 这个程序.</p>\n<p>polybar的设置中, 将interval设为 1 能感觉到有一点点不明显的延迟, 设为 0 会导致polybar的系统占用突增, 设为 0.5 刚刚好, 延迟基本看不出来, 也不会有很高的系统占用.</p>\n<p>下一步康康能不能把指示大小写情况也一起显示了.</p>\n<p>2022-02-08补充:<br>大小写可以通过<code>xset -q|grep &quot;Caps Lock&quot;</code>命令来获取.<br>以及实际上可以在polybar设置中开启其自带的托盘, 用了几天, 感觉还行.</p>\n<h1 id=\"11-fcitx5-候选框部分字符乱码\"><a href=\"#11-fcitx5-候选框部分字符乱码\" class=\"headerlink\" title=\"11 fcitx5 候选框部分字符乱码\"></a>11 fcitx5 候选框部分字符乱码</h1><p>原本以为是emoji不能显示, 后来经过反复比对, 发现emoji都能正常显示, 不能显示的是生僻字!</p>\n<p>一开始路走窄了</p>\n<p>可以在<a href=\"https://keqingrong.cn/blog/2019-10-01-how-to-display-all-chinese-characters-on-the-computer/\">这个网页</a>上康康是否支持生僻字</p>\n<p>安装了一个<a href=\"http://www.ancientbooks.cn/helpcore?font\">中华书局宋体</a>, 暴力更新了下~/.config/fontconfig :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&gt;<br>&lt;fontconfig&gt;<br>    &lt;alias&gt;<br>        &lt;family&gt;sans-serif&lt;/family&gt;<br>        &lt;prefer&gt;<br>            &lt;family&gt;Sauce Code Pro Nerd Font&lt;/family&gt;<br>            &lt;family&gt;Droid Sans Fallback&lt;/family&gt;<br>            &lt;family&gt;Noto Sans&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体00平面&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体02平面&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体15平面&lt;/family&gt;<br>        &lt;/prefer&gt;<br>    &lt;/alias&gt;<br><br>    &lt;alias&gt;<br>        &lt;family&gt;serif&lt;/family&gt;<br>        &lt;prefer&gt;<br>            &lt;family&gt;Droid Sans Fallback&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体00平面&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体02平面&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体15平面&lt;/family&gt;<br>        &lt;/prefer&gt;<br>    &lt;/alias&gt;<br><br>    &lt;alias&gt;<br>        &lt;family&gt;monospace&lt;/family&gt;<br>        &lt;prefer&gt;<br>            &lt;family&gt;Sauce Code Pro Nerd Font&lt;/family&gt;<br>            &lt;family&gt;Droid Sans Fallback&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体00平面&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体02平面&lt;/family&gt;<br>            &lt;family&gt;中华书局宋体15平面&lt;/family&gt;<br>        &lt;/prefer&gt;<br>    &lt;/alias&gt;<br>&lt;/fontconfig&gt;<br></code></pre></td></tr></table></figure>\n\n<p><del>这个fontconfig等以后有闲情逸致了再研究</del></p>\n<p>还有一些问题没有解决：</p>\n<p>开机后fcitx5启动巨慢, 不止是开机后, fcitx5 每次启动都很慢, 而且会使终端无法使用.</p>\n<h1 id=\"12-开机自动连接蓝牙\"><a href=\"#12-开机自动连接蓝牙\" class=\"headerlink\" title=\"12 开机自动连接蓝牙\"></a>12 开机自动连接蓝牙</h1><p>首先，bluetooth内核模块要有，安装blueman.<br>然后，编辑<code>/etc/bluetootn/main.conf</code>文件，找到以下两个选项取消注释并设为以下值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">FastConnectable = true<br>AutoEnable=true<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"13-GPGME-Error-No-Data\"><a href=\"#13-GPGME-Error-No-Data\" class=\"headerlink\" title=\"13 GPGME Error No Data\"></a>13 GPGME Error No Data</h1><p>当在网络有问题(比如未登录)的情况下更新系统往往会出现这个错误.</p>\n<p>解决方案:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo <span class=\"hljs-built_in\">rm</span> /var/lib/pacman/sync/*<br>sudo pacman -Syyu<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"14-格式化U盘\"><a href=\"#14-格式化U盘\" class=\"headerlink\" title=\"14 格式化U盘\"></a>14 格式化U盘</h1><p>在Windows下, 格式化U盘十分简单, 但是在Linux下如果不安装一些特定的软件的话, 还是比较麻烦的.</p>\n<p>首先需要删除U盘原有分区:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo fdisk /dev/sdb <span class=\"hljs-comment\"># 注意这里不是sdb1等带数字的</span><br>d <span class=\"hljs-comment\"># 删除所有分区</span><br>w <span class=\"hljs-comment\"># 写入</span><br></code></pre></td></tr></table></figure>\n<p>格式化分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo mkfs.vfat -L labelname /dev/sdb1<br><span class=\"hljs-comment\"># -L是可选命令</span><br><span class=\"hljs-comment\"># 此处是/dev/sdb1而非/dev/sdb</span><br></code></pre></td></tr></table></figure>\n<p>如果要格式化为<code>NTFS</code>格式, 那么需要一个<code>ntfs-3g</code>包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo pacman -S ntfs-3g<br>sudo mkfs.ntfs -Q -L labelname /dev/sdb1<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"15-制作archiso\"><a href=\"#15-制作archiso\" class=\"headerlink\" title=\"15 制作archiso\"></a>15 制作archiso</h1><p>为了能够在系统寄掉后可以进入arch live root环境以修复系统, 有必要定时制作archiso启动盘.</p>\n<p>首先需要下载ArchLinux ISO镜像文件:</p>\n<ul>\n<li><a href=\"https://mirrors.xjtu.edu.cn/archlinux/iso/2022.03.01/\">XJTU镜像</a></li>\n<li><a href=\"http://mirrors.163.com/archlinux/iso/2022.03.01/\">163镜像</a></li>\n<li><a href=\"http://mirrors.aliyun.com/archlinux/iso/2022.03.01/\">阿里云镜像</a></li>\n</ul>\n<p>下载完后, 将其写入到U盘:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">dd</span> bs=4M <span class=\"hljs-keyword\">if</span>=path/to/archlinux-version-x86_64.iso of=/dev/sdx conv=fsync oflag=direct status=progress<br></code></pre></td></tr></table></figure>\n<p>注意需要<code>/dev/sdx</code>没有挂载, 另外此处<code>sdx</code>没有数字, 即并非<code>sdx1</code>之类.</p>\n<h1 id=\"16-Go-Proxy\"><a href=\"#16-Go-Proxy\" class=\"headerlink\" title=\"16 Go Proxy\"></a>16 Go Proxy</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 注意这里是3个1, 而不是2个</span><br>go <span class=\"hljs-built_in\">env</span> -w GO111MODULE=on<br>go <span class=\"hljs-built_in\">env</span> -w GOPROXY=https://goproxy.cn,direct<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"17-卸载部分-windows-应用\"><a href=\"#17-卸载部分-windows-应用\" class=\"headerlink\" title=\"17 卸载部分 windows 应用\"></a>17 卸载部分 windows 应用</h1><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 获取帮助:</span><br><span class=\"hljs-built_in\">get-appxpackage</span> *Microsoft.GetHelp* | <span class=\"hljs-built_in\">remove-appxpackage</span><br><span class=\"hljs-comment\"># 闹钟与时钟</span><br><span class=\"hljs-built_in\">get-appxpackage</span> *Microsoft.WindowsAlarms* | <span class=\"hljs-built_in\">remove-appxpackage</span><br><span class=\"hljs-comment\"># 人脉:</span><br><span class=\"hljs-built_in\">get-appxpackage</span> *Microsoft.People* | <span class=\"hljs-built_in\">remove-appxpackage</span><br><span class=\"hljs-comment\"># 照片:</span><br><span class=\"hljs-built_in\">get-appxpackage</span> *Microsoft.Windows.Photos* | <span class=\"hljs-built_in\">remove-appxpackage</span><br><span class=\"hljs-comment\"># 相机:</span><br><span class=\"hljs-built_in\">get-appxpackage</span> *Microsoft.WindowsCamera* | <span class=\"hljs-built_in\">remove-appxpackage</span><br></code></pre></td></tr></table></figure>\n\n","tags":["Arch","Linux"]},{"title":"使用NeoVim进行Latex写作","url":"/2022/02/09/03-vim-latex/","content":"<h1 id=\"vim-配置\"><a href=\"#vim-配置\" class=\"headerlink\" title=\"vim 配置\"></a>vim 配置</h1><p>首先, 需要安装<code>vimtex</code>插件, 安装<code>zathura</code>及<code>zathura-pdf-poppler</code></p>\n<p>创建文件<code>~/.latexmkrc</code>, 写入以下内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$pdflatex=&quot;xelatex %O %S&quot;<br></code></pre></td></tr></table></figure>\n\n<p>在vim 配置文件中写入:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:vimtex_view_general_viewer</span> = <span class=\"hljs-string\">&#x27;zathura&#x27;</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:vimtex_view_method</span> = <span class=\"hljs-string\">&#x27;zathura&#x27;</span><br><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:vimtex_compiler_latexmk</span> = &#123;<br>        \\ <span class=\"hljs-string\">&#x27;executable&#x27;</span> : <span class=\"hljs-string\">&#x27;latexmk&#x27;</span>,<br>        \\ <span class=\"hljs-string\">&#x27;options&#x27;</span> : [<br>        \\    <span class=\"hljs-string\">&#x27;-xelatex&#x27;</span>,<br>        \\    <span class=\"hljs-string\">&#x27;-file-line-error&#x27;</span>,<br>        \\    <span class=\"hljs-string\">&#x27;-synctex=1&#x27;</span>,<br>        \\    <span class=\"hljs-string\">&#x27;-interaction=nonstopmode&#x27;</span><br>        \\ ],<br>    \\ &#125;<br></code></pre></td></tr></table></figure>\n\n<p>此外, 还可以设置忽略一些警告:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-comment\">&quot; 忽略烦人的警告, 美滋滋😋</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:vimtex_quickfix_ignore_filters</span> = [<br>            \\ <span class=\"hljs-string\">&#x27;Package fontspec Warning&#x27;</span>,<br>            \\ <span class=\"hljs-string\">&#x27;Underfull&#x27;</span>,<br>            \\ <span class=\"hljs-string\">&#x27;Overfull&#x27;</span><br>            \\]<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"zathura配置\"><a href=\"#zathura配置\" class=\"headerlink\" title=\"zathura配置\"></a>zathura配置</h1><p>需要安装python <code>neovim-remote</code>包.</p>\n<p>编辑配置文件<code>~/.config/zathura/zathurarc</code>(没有则创建一个)</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">set</span> synctex true<br><span class=\"hljs-keyword\">set</span> synctex-editor-<span class=\"hljs-keyword\">command</span> <span class=\"hljs-string\">&quot;nvr --remote-silent %f -c %l&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>配置完成后, 在SpaceVim中使用<code>SPC l v</code>可以进行正向定位, 在zathura中CTRL++鼠标左键点击可以进行反向定位.</p>\n","tags":["Vim","Latex"]},{"title":"Linux文件的S和T权限","url":"/2022/02/09/04-linux-privilege-st/","content":"<img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/st.jpg\"  />\n\n<p>上图中, S_IRWXU S_IRWXG S_IRWXO 代表常见的三段权限: 拥有者, 同组用户, 其他用户的权限, 而S_ISUID S_ISGID S_ISVTX 代表的是S权限 与 T权限.</p>\n<h1 id=\"S权限\"><a href=\"#S权限\" class=\"headerlink\" title=\"S权限\"></a>S权限</h1><p>S权限包括 S_ISUID 和 S_ISGID 两个常量在内, 叫做强制位权限.</p>\n<p>其中, S_ISUID 只能应用于二进制可执行文件.</p>\n<p>S_ISGID  可应用于二进制可执行文件和目录.</p>\n<p>注意shell脚本只是有执行权限的文本文件, 而非二进制可执行文件.</p>\n<p>当 S_ISUID S_ISGID 用在二进制文件时</p>\n<ul>\n<li>如果 S_ISUID 为真，则把此进程的有效用户ID设置为此文件拥有者的用户ID.</li>\n<li>如果 S_ISGID 为真，则把此进程的有效用户组ID设置为此文件的组ID.</li>\n</ul>\n<p>由于进程有用户/组ID影响文件访问权限, 于是就相当于临时拥有文件所有者的身份. 典型的文件是passwd. 如果一般用户执行该文件, 则在执行过程中, 该文件可以获得 root 权限, 从而可以更改用户的密码.</p>\n<p>当 S_ISGID 用在目录时：</p>\n<ul>\n<li>当前用户切换至该目录后，用户进程的有效用户组ID(effective group)将会设置为该目录的用户组. 若用户在此目录下具备w权限，则用户进程所创建的新文件的用户组ID与该目录用户组ID相同.</li>\n</ul>\n<p>这两个常量的值是:</p>\n<table>\n<thead>\n<tr>\n<th>项</th>\n<th>十六进制</th>\n<th>十进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S_ISUID</td>\n<td>4000</td>\n<td>2048</td>\n</tr>\n<tr>\n<td>S_ISGID</td>\n<td>2000</td>\n<td>1024</td>\n</tr>\n</tbody></table>\n<ul>\n<li>设置S_ISUID 将相应的权限位之前的那一位设置为4, 如: chmod 4755 examplefile</li>\n<li>设置 S_ISGID 将相应的权限位之前的那一位设置为2, 如: chmod 2755 examplefile</li>\n<li>两者都设置, 如法炮制, 改成6即可.</li>\n</ul>\n","tags":["Linux"]},{"title":"退火算法学习笔记","url":"/2022/02/09/05-simulated-annealing/","content":"<p>前段时间学习了一下退火算法。</p>\n<p>这里简单记一下踩过的坑~</p>\n<p>退火算法是一种搜索算法，我认为其核心思想便是”以一定的概率接受一个更差的解“，这样可以避免过早陷入局部最优解，有更大的概率找到全局最优解。</p>\n<p>首先，是”温度“，在算法执行过程中，温度会不断降低，当温度降低到一个值时算法结束，而随着温度的降低接受更差的解的概率会不断减小</p>\n<p>如果当前的温度为T，计算当前的解的代价为C(i)，新解的的代价为C(i+1)z，则</p>\n<p>当C(i+1)&lt;C(i)时，接受新的解</p>\n<p>当C(i+1)&gt;C(i)时，以exp( ( C(i+1)-C(i) )/T )的概率接受新的解</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 退火算法框架</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">while</span> (T&gt;Tmin) &#123;<br>    <span class=\"hljs-comment\">// 计算当前解的代价C(i)</span><br>    <span class=\"hljs-comment\">// 获新的解，计算其代价C(i+1)</span><br>    <br>    dE = C(i)-C(i+<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 计算代价之差</span><br>    <span class=\"hljs-keyword\">if</span> (dE&gt;<span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 接受新的解</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-type\">double</span>)(rand()%RAND_MAX)/RAND_MAX&lt;<span class=\"hljs-built_in\">exp</span>( dE/T ))<br>    &#125;<br>    <br>    T *= r; <span class=\"hljs-comment\">// r是降温速率，是一个小于 1 的实数</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>例题</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P1337\">吊打XXX</a></p>\n<p>退火算法十分玄学，有时候需要反复调试参数才能得到预期结果，因此需要谨慎选用。</p>\n","tags":["算法","退火算法"]},{"title":"C语言动态分配内存","url":"/2022/02/09/06-c-memory-allocate/","content":"<p>C语言的动态分配内存是十分重要的</p>\n<p>主要有四个函数: </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">malloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num)</span><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">calloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num, <span class=\"hljs-type\">int</span> size)</span><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">realloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *address, <span class=\"hljs-type\">int</span> newsize)</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">free</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *address)</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h1><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">malloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num)</span><br></code></pre></td></tr></table></figure>\n\n<p>在堆区分配一块指定大小的内存空间, 这块内存空间在函数执行完成后不会被初始化, 他们的值是未知的.</p>\n<h1 id=\"calloc\"><a href=\"#calloc\" class=\"headerlink\" title=\"calloc\"></a>calloc</h1><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">calloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num, <span class=\"hljs-type\">int</span> size)</span><br></code></pre></td></tr></table></figure>\n\n<p>在内存中动态地分配 num 个长度为 size 的连续空间, 并将每一个字节都初始化为 0. 所以它的结果是分配了 num*size 个字节长度的内存空间, 并且每个字节的值都是0.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\">name = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">200</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"realloc\"><a href=\"#realloc\" class=\"headerlink\" title=\"realloc\"></a>realloc</h1><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">ralloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *address, <span class=\"hljs-type\">int</span> newsize)</span><br></code></pre></td></tr></table></figure>\n\n<p>该函数重新分配内存，把内存扩展到 newsize。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\">name = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">realloc</span>(name, <span class=\"hljs-number\">100</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));<br></code></pre></td></tr></table></figure>\n\n<p>关于<code>realloc</code>函数, 需要注意原空间与新新申请的空间的关系.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">char</span>* str1 = (<span class=\"hljs-type\">char</span>*) <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));<br><span class=\"hljs-type\">char</span>* str2 = (<span class=\"hljs-type\">char</span>*) <span class=\"hljs-built_in\">realloc</span>(str1, <span class=\"hljs-number\">20</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));<br></code></pre></td></tr></table></figure>\n<p>在以上程序中, <code>str2</code>是在<code>str1</code>的基础上扩充的, 因此<code>str1~=str2</code>,<br>但是在释放<code>str1</code>的空间后, <code>str2</code>也会失效.</p>\n<h1 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free\"></a>free</h1><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">free</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *address)</span><br></code></pre></td></tr></table></figure>\n\n<p>该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。</p>\n<p>所有使用 malloc 与 calloc 申请的内存空间都应该被释放, 否则会造成内存泄露, 十分严重.</p>\n","tags":["C语言"]},{"title":"优秀文章集锦","url":"/2022/02/09/07-great-articles/","content":"<p>这里主要收录一些网上很不错的文章</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/TenosDoIt/p/3163621.html\">extern “C” 的解释</a></li>\n<li><a href=\"https://blog.csdn.net/yaorongke/article/details/119089190\">使用Hexo搭建博客</a></li>\n<li><a href=\"https://blog.csdn.net/knowledgebao/article/details/84776046\">一些文章索引的集合</a></li>\n<li><a href=\"http://garfileo.is-programmer.com/\">一个很好的博客</a></li>\n</ul>\n","tags":["杂"]},{"title":"Arch软件列表","url":"/2022/02/10/08-arch-software-list/","content":"<h1 id=\"Arch软件列表\"><a href=\"#Arch软件列表\" class=\"headerlink\" title=\"Arch软件列表\"></a>Arch软件列表</h1><p>记录下Arch上用到的有用的软件包.</p>\n<ul>\n<li><a href=\"https://aur.archlinux.org/packages/batsignal\">batsignal</a> 低电量时发出通知, 需要community/acpi包.</li>\n<li><a href=\"https://aur.archlinux.org/packages/libxft-bgra-git\">libxft-bgra-git</a> 打过彩色emoji补丁的libxft, 如果st要显示彩色emoji则需要这个包. 可以搭配<a href=\"https://github.com/LukeSmithxyz/st\">Luke Smith的st配置</a>一起使用.</li>\n<li><a href=\"https://archlinux.org/packages/community/x86_64/libconfig/\">libconfig</a> 一个C语言处理格式化配置化文件的库.</li>\n<li><a href=\"https://archlinux.org/packages/community/x86_64/cjson/\">cjson</a> Ultralightweight JSON parser in ANSI C</li>\n</ul>\n<h1 id=\"npm-packages\"><a href=\"#npm-packages\" class=\"headerlink\" title=\"npm packages\"></a>npm packages</h1><p>一些需要用到的npm包</p>\n<h2 id=\"博客相关\"><a href=\"#博客相关\" class=\"headerlink\" title=\"博客相关\"></a>博客相关</h2><ul>\n<li><strong>hexo-cli</strong> <code>npm install -g hexo-cli</code> 用于构建博客</li>\n<li><strong>hexo-generator-index</strong> <code>npm install -g hexo-generator-index</code> 用于为文章设置置顶等级</li>\n</ul>\n<h2 id=\"Vim相关\"><a href=\"#Vim相关\" class=\"headerlink\" title=\"Vim相关\"></a>Vim相关</h2><ul>\n<li><strong>neovim</strong></li>\n</ul>\n<h1 id=\"python-packages\"><a href=\"#python-packages\" class=\"headerlink\" title=\"python packages\"></a>python packages</h1><ul>\n<li><strong>neovim-remote</strong></li>\n<li><strong>pynvim</strong></li>\n</ul>\n","tags":["Arch","Linux"]},{"title":"创建 GNOME EXTENSION","url":"/2022/08/01/09-create-gnome-extension/","content":"<h1 id=\"创建-GNOME-扩展\"><a href=\"#创建-GNOME-扩展\" class=\"headerlink\" title=\"创建 GNOME 扩展\"></a>创建 GNOME 扩展</h1><h2 id=\"Before-Start\"><a href=\"#Before-Start\" class=\"headerlink\" title=\"Before Start\"></a>Before Start</h2><ul>\n<li><a href=\"https://wiki.gnome.org/Projects/GnomeShell/Extensions#Creating_Extensions\">Gnome Wiki - Creating Extensions</a></li>\n</ul>\n<blockquote>\n<p>As GNOME Shell and extensions are written in GJS, it is important to understand that GJS is simply <a href=\"https://wiki.gnome.org/JavaScript\">JavaScript</a> bindings for the existing GNOME platform APIs. This means many of the classes and functions you will use are already documented in the <a href=\"https://gjs-docs.gnome.org/\">GNOME API documentation</a>.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://gjs-docs.gnome.org/\">Gnome API Documentation</a></li>\n<li><a href=\"https://gjs.guide/extensions/\">GJS Guide</a></li>\n</ul>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>创建一个文件夹, 名称为 <code>activity-logo@corona</code>, 在该文件夹下创建三个文件:</p>\n<p><img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220803161655402.png\" alt=\"image-20220803161655402\"></p>\n<h3 id=\"metadata-json\"><a href=\"#metadata-json\" class=\"headerlink\" title=\"metadata.json\"></a>metadata.json</h3><p>在<code>metadata.json</code>中填入如下内容, 其中<code>uuid</code>为文件夹的名字.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>\t<span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Change Activity Logo&quot;</span><span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;activity-logo&quot;</span><span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-attr\">&quot;shell-version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><br>\t\t<span class=\"hljs-string\">&quot;42&quot;</span><br>\t<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-attr\">&quot;url&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-attr\">&quot;uuid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;activity-logo@corona09&quot;</span><span class=\"hljs-punctuation\">,</span><br>\t<span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"extension-js\"><a href=\"#extension-js\" class=\"headerlink\" title=\"extension.js\"></a>extension.js</h3><p>该文件包含三个主要函数, <code>init</code>, <code>enable</code>和<code>disable</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">St</span> = imports.<span class=\"hljs-property\">gi</span>.<span class=\"hljs-property\">St</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Main</span> = imports.<span class=\"hljs-property\">ui</span>.<span class=\"hljs-property\">main</span>;<br><br><span class=\"hljs-keyword\">let</span> panelButton, panelButtonText;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Init first to prepare extension</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) &#123;<br>    panelButton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">St</span>.<span class=\"hljs-title class_\">Bin</span>(&#123;<br>        <span class=\"hljs-attr\">style_class</span>: <span class=\"hljs-string\">&quot;panel-button&quot;</span><br>    &#125;);<br>    panelButtonText = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">St</span>.<span class=\"hljs-title class_\">Label</span>(&#123;<br>        <span class=\"hljs-attr\">style_class</span>: <span class=\"hljs-string\">&quot;panel-button-text&quot;</span>,<br>        <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&quot;fedora&quot;</span><br>    &#125;);<br>    panelButton.<span class=\"hljs-title function_\">set_child</span>(panelButtonText);<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * be called when enable the extension</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">enable</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-title class_\">Main</span>.<span class=\"hljs-property\">panel</span>.<span class=\"hljs-property\">_rightBox</span>.<span class=\"hljs-title function_\">insert_child_at_index</span>(panelButton, <span class=\"hljs-number\">1</span>);<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * be called when disable the extension</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">disable</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-title class_\">Main</span>.<span class=\"hljs-property\">panel</span>.<span class=\"hljs-property\">_rightBox</span>.<span class=\"hljs-title function_\">remove_child</span>(panelButton);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"stylesheet-css\"><a href=\"#stylesheet-css\" class=\"headerlink\" title=\"stylesheet.css\"></a>stylesheet.css</h3><p>在 <code>extension.js</code> 中, 包含有<code>style_class</code> 的字段, 其内容即为与 css 文件对应的 class 名称.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.panel-button-text</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"展示终端命令的输出\"><a href=\"#展示终端命令的输出\" class=\"headerlink\" title=\"展示终端命令的输出\"></a>展示终端命令的输出</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">const St = imports.gi.St;<br>const Main = imports.ui.main;<br>const MainLoop = imports.mainloop;<br>const GLib = imports.gi.GLib;<br><br><span class=\"hljs-built_in\">let</span> panelButton, panelButtonText, <span class=\"hljs-built_in\">timeout</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">setButtonText</span></span>() &#123;<br>    // 如果要使用管道, 则需要 bash -c, 如<br>    // GLib.spawn_command_line_sync(<span class=\"hljs-string\">&#x27;/bin/bash -c &quot;ifconfig -a | grep tun0&quot; &#x27;</span>);<br>    <span class=\"hljs-built_in\">let</span> [ok, output, err, <span class=\"hljs-built_in\">exit</span>] = GLib.spawn_command_line_sync(<span class=\"hljs-string\">&#x27;date&#x27;</span>);<br>    panelButtonText.set_text(output.toString());<br>    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><br>/**<br> * Init first to prepare extension<br> */<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">init</span></span>() &#123;<br>    panelButton = new St.Bin(&#123;<br>        style_class: <span class=\"hljs-string\">&quot;panel-button&quot;</span><br>    &#125;);<br>    panelButtonText = new St.Label(&#123;<br>        style_class: <span class=\"hljs-string\">&quot;panel-button-text&quot;</span>,<br>        text: <span class=\"hljs-string\">&quot;fedora&quot;</span><br>    &#125;);<br>    panelButton.set_child(panelButtonText);<br>&#125;<br><br>/**<br> * be called when <span class=\"hljs-built_in\">enable</span> the extension<br> */<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">enable</span></span>() &#123;<br>    Main.panel._rightBox.insert_child_at_index(panelButton, 1);<br>    <span class=\"hljs-built_in\">timeout</span> = MainLoop.timeout_add_seconds(1.0, setButtonText);<br>&#125;<br><br>/**<br> * be called when <span class=\"hljs-built_in\">disable</span> the extension<br> */<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">disable</span></span>() &#123;<br>    MainLoop.source_remove(<span class=\"hljs-built_in\">timeout</span>);<br>    Main.panel._rightBox.remove_child(panelButton);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><h3 id=\"查看调试信息\"><a href=\"#查看调试信息\" class=\"headerlink\" title=\"查看调试信息\"></a>查看调试信息</h3><p>在<code>extension.js</code>中添加如下代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">log</span>(message);<br><span class=\"hljs-title function_\">print</span>(message); <span class=\"hljs-comment\">// print to stdout</span><br><span class=\"hljs-title function_\">printerr</span>(message); <span class=\"hljs-comment\">// print to stderr</span><br><span class=\"hljs-comment\">// try-catch</span><br><span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Test Error&#x27;</span>);<br>&#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>    <span class=\"hljs-title function_\">logError</span>(e, <span class=\"hljs-string\">&#x27;ExtensionErr&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"X11\"><a href=\"#X11\" class=\"headerlink\" title=\"X11\"></a>X11</h4><p>运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">journalctl -f -o <span class=\"hljs-built_in\">cat</span> /usr/bin/gnome-shell<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Wayland\"><a href=\"#Wayland\" class=\"headerlink\" title=\"Wayland\"></a>Wayland</h4><p>运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">dbus-run-session -- gnome-shell --nested --wayland<br></code></pre></td></tr></table></figure>\n\n<p>执行了 <code>journalctl</code> 命令后重启 gnome-shell, 可以看到调试信息:</p>\n<img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220803171751337.png\" alt=\"image-20220803171751337\" style=\"width:900px;\" />\n\n<p>或者将扩展从<code>disable</code>切换到<code>enable</code>, 即可在终端的最后看到日志输出.</p>\n<h3 id=\"查看元素属性\"><a href=\"#查看元素属性\" class=\"headerlink\" title=\"查看元素属性\"></a>查看元素属性</h3><p><code>alt+F2</code>, 键入 <code>lg</code>, 在窗口左上角有一个按钮, 可以查看界面上各元素的属性, 类似于浏览器的开发者工具.</p>\n<img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220803173014979.png\" alt=\"image-20220803173014979\" style=\"width:900px;\" />\n\n<hr>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><h3 id=\"GSettings\"><a href=\"#GSettings\" class=\"headerlink\" title=\"GSettings\"></a>GSettings</h3><blockquote>\n<p><a href=\"https://gjs-docs.gnome.org/gio20-settings/\">GSettings</a> provides a simple, extremely fast API for storing application settings, that can also be used by GNOME Shell extensions.</p>\n</blockquote>\n<h4 id=\"创建-Schema\"><a href=\"#创建-Schema\" class=\"headerlink\" title=\"创建 Schema\"></a>创建 Schema</h4><p>在 <code>activity-logo@corona</code> 文件夹下创建子文件夹 <code>schemas/</code>.</p>\n<p>创建文件 <code>schemas/org.gnome.shell.extensions.activity-logo.gschema.xml</code>.</p>\n<p>该文件内容如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">schemalist</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">schema</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;org.gnome.shell.extensions.activity-logo&quot;</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/org/gnome/shell/extensions/activity-logo/&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- See also: https://docs.gtk.org/glib/gvariant-format-strings.html --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;show-indicator&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">default</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">default</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">summary</span>&gt;</span>summary<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">summary</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">description</span>&gt;</span>description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">description</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">schema</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">schemalist</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>type</code> 有如下选项:</p>\n<table>\n<thead>\n<tr>\n<th>TypeName</th>\n<th>TypeValue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>b</code></td>\n<td><code>gboolean</code></td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td><code>guchar</code></td>\n</tr>\n<tr>\n<td><code>n</code></td>\n<td><code>gint16</code></td>\n</tr>\n<tr>\n<td><code>q</code></td>\n<td><code>guint16</code></td>\n</tr>\n<tr>\n<td><code>i</code></td>\n<td><code>gint32</code></td>\n</tr>\n<tr>\n<td><code>u</code></td>\n<td><code>guint32</code></td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td><code>guint64</code></td>\n</tr>\n<tr>\n<td><code>t</code></td>\n<td><code>guint64</code></td>\n</tr>\n<tr>\n<td><code>h</code></td>\n<td><code>gint32</code></td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td><code>gdouble</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"编译-Schema\"><a href=\"#编译-Schema\" class=\"headerlink\" title=\"编译 Schema\"></a>编译 Schema</h4><p>进入<code>schemas/</code>文件夹, 使用<code>glib-compile-schemas schemas/</code> 来编译 schema</p>\n<p><img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220803204621466.png\" alt=\"image-20220803204621466\"></p>\n<h4 id=\"整合-Schema\"><a href=\"#整合-Schema\" class=\"headerlink\" title=\"整合 Schema\"></a>整合 Schema</h4><p>在<code>extension.js</code> 中添加如下片段:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Gio</span> = imports.<span class=\"hljs-property\">gi</span>.<span class=\"hljs-property\">Gio</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ExtensionUtils</span> = imports.<span class=\"hljs-property\">misc</span>.<span class=\"hljs-property\">extensionUtils</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Me</span> = <span class=\"hljs-title class_\">ExtensionUtils</span>.<span class=\"hljs-title function_\">getCurrentExtension</span>();<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getSettings</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">GioSSS</span> = <span class=\"hljs-title class_\">Gio</span>.<span class=\"hljs-property\">SettingsSchemaSource</span>;<br>    <span class=\"hljs-keyword\">let</span> schemaSource = <span class=\"hljs-title class_\">GioSSS</span>.<span class=\"hljs-title function_\">new_from_directory</span>(<br>        <span class=\"hljs-title class_\">Me</span>.<span class=\"hljs-property\">dir</span>.<span class=\"hljs-title function_\">get_child</span>(<span class=\"hljs-string\">&quot;schemas&quot;</span>).<span class=\"hljs-title function_\">get_path</span>(),<br>        <span class=\"hljs-title class_\">GioSSS</span>.<span class=\"hljs-title function_\">get_default</span>(),<br>        <span class=\"hljs-literal\">false</span><br>    );<br>    <br>    <span class=\"hljs-keyword\">let</span> schemaObj = schemaSource.<span class=\"hljs-title function_\">lookup</span>(<span class=\"hljs-string\">&#x27;org.gnome.shell.extensions.activity-logo&#x27;</span>, <span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-keyword\">if</span> (!schemaObj) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Cannot find schemas&#x27;</span>);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gio</span>.<span class=\"hljs-title class_\">Settings</span>(&#123;<span class=\"hljs-attr\">settings_schema</span>: schemaObj&#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在需要使用设置的地方, 采用如下方式获取/修改设置的值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> settings = <span class=\"hljs-title function_\">getSettings</span>();<br>    <span class=\"hljs-comment\">// 获取</span><br>    <span class=\"hljs-keyword\">let</span> int_value = settings.<span class=\"hljs-title function_\">get_int</span>(<span class=\"hljs-string\">&#x27;int-key&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> settings = <span class=\"hljs-title function_\">getSettings</span>();<br>    <span class=\"hljs-keyword\">let</span> int_value     = settings.<span class=\"hljs-title function_\">get_int</span>(<span class=\"hljs-string\">&#x27;int-key&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> double_value  = settings.<span class=\"hljs-title function_\">get_double</span>(<span class=\"hljs-string\">&#x27;double-key&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> boolean_value = settings.<span class=\"hljs-title function_\">get_boolean</span>(<span class=\"hljs-string\">&#x27;boolean-key&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> string_value  = settings.<span class=\"hljs-title function_\">get_string</span>(<span class=\"hljs-string\">&#x27;string-key&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> sarray_value  = settings.<span class=\"hljs-title function_\">get_strv</span>(<span class=\"hljs-string\">&#x27;strv-key&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> enum_value    = settings.<span class=\"hljs-title function_\">get_enum</span>(<span class=\"hljs-string\">&#x27;emun-key&#x27;</span>);<br>    <span class=\"hljs-comment\">// 设置</span><br>    settings.<span class=\"hljs-title function_\">set_int</span>(<span class=\"hljs-string\">&#x27;int-key&#x27;</span>, <span class=\"hljs-number\">0</span>);<br>    settings.<span class=\"hljs-title function_\">set_double</span>(<span class=\"hljs-string\">&#x27;double-key&#x27;</span>, <span class=\"hljs-number\">0.0</span>);<br>    settings.<span class=\"hljs-title function_\">set_boolean</span>(<span class=\"hljs-string\">&#x27;boolean-key&#x27;</span>, <span class=\"hljs-literal\">true</span>);<br>    settings.<span class=\"hljs-title function_\">set_string</span>(<span class=\"hljs-string\">&#x27;string-key&#x27;</span>, <span class=\"hljs-string\">&#x27;Corona&#x27;</span>);<br>    settings.<span class=\"hljs-title function_\">set_strv</span>(<span class=\"hljs-string\">&#x27;strv-key&#x27;</span>, [<span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-string\">&#x27;World&#x27;</span>]);<br>    settings.<span class=\"hljs-title function_\">set_enum</span>(<span class=\"hljs-string\">&#x27;enum-key&#x27;</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 不要使用 nick 来赋值</span><br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置窗口\"><a href=\"#设置窗口\" class=\"headerlink\" title=\"设置窗口\"></a>设置窗口</h3><h3 id=\"调试-1\"><a href=\"#调试-1\" class=\"headerlink\" title=\"调试\"></a>调试</h3><hr>\n<h2 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h2><p>以<code>example@corona09</code>为例, 在扩展文件夹下创建<code>locale/zh_CN/LC_MESSAGES/</code>文件夹, 在<code>extension.js</code>中添加如下内容: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ExtensionUtils</span> = imports.<span class=\"hljs-property\">misc</span>.<span class=\"hljs-property\">extensionUtils</span>;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Me</span> = <span class=\"hljs-title class_\">ExtensionUtils</span>.<span class=\"hljs-title function_\">getCurrentExtension</span>();<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Gettext</span> = imports.<span class=\"hljs-property\">gettext</span>;<br><br><span class=\"hljs-title class_\">Gettext</span>.<span class=\"hljs-title function_\">bindtextdomain</span>(<span class=\"hljs-string\">&quot;example&quot;</span>, <span class=\"hljs-title class_\">Me</span>.<span class=\"hljs-property\">dir</span>.<span class=\"hljs-title function_\">get_child</span>(<span class=\"hljs-string\">&quot;locale&quot;</span>)).<span class=\"hljs-title function_\">get_path</span>();<br><span class=\"hljs-title class_\">Gettext</span>.<span class=\"hljs-title function_\">textdomain</span>(<span class=\"hljs-string\">&quot;example&quot;</span>);<br><br><span class=\"hljs-comment\">// 使用 gettext 函数来获取文本的翻译</span><br><span class=\"hljs-keyword\">const</span> _ = <span class=\"hljs-title class_\">Gettext</span>.<span class=\"hljs-property\">gettext</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-comment\">// 如果存在对对应的语言, 则会出处相应的结果, 否则输出原文本</span><br>    <span class=\"hljs-title function_\">log</span>( <span class=\"hljs-title function_\">_</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>) );<br>    <span class=\"hljs-comment\">// 根据数字选择文本, 单数选择前一个, 复数选择后一个</span><br>    <span class=\"hljs-title function_\">log</span>( <span class=\"hljs-title class_\">Gettext</span>.<span class=\"hljs-title function_\">ngettext</span>(<span class=\"hljs-string\">&quot;%d item&quot;</span>, <span class=\"hljs-string\">&quot;%d items&quot;</span>, <span class=\"hljs-number\">10</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, <span class=\"hljs-number\">10</span>) );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>提取所有 js 文件中的字符串:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">xgettext --output=locale/example.pot *.js<br></code></pre></td></tr></table></figure>\n\n<p>编辑生成的<code>example.pot</code>文件, 更改其编码:</p>\n<p><img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220806113300125.png\" alt=\"image-20220806113300125\"></p>\n<p>在<code>locale/zh_CN/LC_MESSAGES/</code>文件夹下创建中文的翻译文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">msginit --locale zh_CN --input locale/example.pot --out locale/zh_CN/LC_MESSAGES/example.po<br></code></pre></td></tr></table></figure>\n\n<p>编译<code>.po</code>文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> locale/zh_CN/LC_MESSAGES/<br>msgfmt example.po --output-file=example.mo<br></code></pre></td></tr></table></figure>\n\n<p>注意在编译之前将<code>example.po</code>的编码设为<code>UTF-8</code>.</p>\n","tags":["linux","gnome"]},{"title":"走出vim舒适区 (已放弃, 摆烂辽)","url":"/2022/02/12/13-out-of-vim-comfortble-zone/","content":"<p>今天晚上本来打算继续学习<code>libconfig</code>, 然后再学点其他东西的, 但是vim的自动补全和我设置的一些快捷键突然莫名其妙地不能用了! 很离谱!</p>\n<p>结果一个晚上都在尝试各种方式抢救我的vim… 弄了一晚上后发现是因为打开了SpaceVim的<code>paste-mode</code>, 在开启这个模式之后, 插入模式下的所有快捷键失灵, 自动补全也不能用了…</p>\n<p>另外, 还发现<code>nvim-lspconfig</code>这个插件好像有点问题, 不过暂时没有影响.</p>\n<p>我是不愿意花费太多的精力去自行完全从头开始定制自己的编辑器的, 这样子太浪费时间与精力了. 与其花费大量时间在工具上, 不如去学点有用的东西. 因此我选择了SpaceVim, 但是由于SpaceVim出色的编辑体验与这段时间我对SpaceVim做的一些个性化设置, 让vim与我的契合度已经达到了一个比较高的程度. 这就导致一旦vim出现问题, 我在用其他编辑器的时候会感到非常的不适!</p>\n<p>虽然说, vim让我的编辑效率大大提升, 但是或许我应该走出vim的舒适区, 去体验一下不同的环境.</p>\n<hr>\n<p>2022-02-13 23:02</p>\n<p>当然, 寻找第二个编辑器并不意味着放弃vim, 只是多一个选择而已. 不得不说现在vim带来的一体化的编辑体验所能带来的效率是其他编辑器根本无法企及的.</p>\n<p>之前其实尝试过一段时间的emacs, 但是体验并不好. 至于vscode, 确实vscode是一个很好的编辑器, 但是用起来也是不太顺手. 看来较长一段时间内还是需要只用vim.</p>\n<hr>\n<p><b>2022-05-27 19:08</b> : 放弃了, vim 太好用了, 换不辽嘞.</p>\n","tags":["杂"]},{"title":"使用Lua编写Vim插件 [未完待续]","url":"/2022/02/13/14-create-vim-plugin-using-lua/","content":"<h1 id=\"开始学习Lua\"><a href=\"#开始学习Lua\" class=\"headerlink\" title=\"开始学习Lua\"></a>开始学习Lua</h1><p>2022-02-13</p>\n<p>最近想要写一个vim插件–在选中的文本两段插入字符–实际上这个插件已经有人写过了(vim-surround), 但是并不怎么好用, 因此打算写自己写一个插件.</p>\n<p>写vim插件的选择也是比较多的, vimscript, python, lua, 使用js写coc扩展…这些我都不会…最终在权衡之下决定学一下lua.</p>\n<h1 id=\"lua-语法\"><a href=\"#lua-语法\" class=\"headerlink\" title=\"lua 语法\"></a>lua 语法</h1><p>这部分略, 会用就行</p>\n<h1 id=\"如何使用lua写一个vim插件\"><a href=\"#如何使用lua写一个vim插件\" class=\"headerlink\" title=\"如何使用lua写一个vim插件\"></a>如何使用lua写一个vim插件</h1><h2 id=\"Lua-LSP-Config\"><a href=\"#Lua-LSP-Config\" class=\"headerlink\" title=\"Lua LSP Config\"></a>Lua LSP Config</h2><p>我使用的是coc, 在安装coc本体后需要安装coc扩展: <a href=\"https://github.com/xiyaowong/coc-sumneko-lua.git\">coc-sumneko-lua</a> </p>\n<p>在安装该扩展后, 需要在<code>settings.json</code>中如下设置:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;sumneko-lua.enableNvimLuaDev&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>为了开发lua插件, NeoVim提供了全局变量<code>vim</code>, 可以在lua程序中调用, 设置如上选项后可以使lsp识别<code>vim</code>并提供补全.</p>\n<p>为了设置这玩意花了我老大劲, 原来有这个选项啊, 难顶😅</p>\n<h2 id=\"创建插件\"><a href=\"#创建插件\" class=\"headerlink\" title=\"创建插件\"></a>创建插件</h2><ul>\n<li><p><a href=\"https://github.com/wsdjeg/vim-plugin-dev-guide\">Develop Vim Plugin</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=wkxtHV1hzEY&list=PLWW-qE7VJRzNtBo2udtkLe__I7zmVQpiB\">Create Neovim Plugins with Lua</a></p>\n</li>\n<li><p><a href=\"https://www.2n.pl/blog/how-to-write-neovim-plugins-in-lua.md\">How to write Neovim plugins in lua</a></p>\n</li>\n</ul>\n","tags":["vim","lua"]},{"title":"VimScript Note [未完待续]","url":"/2022/02/16/15-vimscript-note/","content":"<h1 id=\"VimScript\"><a href=\"#VimScript\" class=\"headerlink\" title=\"VimScript\"></a>VimScript</h1><p>要想写vim插件, 学习vimscript还真是不能省的啊.</p>\n<p>暂定vim插件的学习路线为: vimscript $\\rightarrow$ lua $\\rightarrow$ typescript</p>\n<p>将网络上已经有的东西重新写一遍是没有什么意义的, 这里只列出一些比较重要的东西, 其余内容贴上链接.</p>\n<h2 id=\"Vim-变量\"><a href=\"#Vim-变量\" class=\"headerlink\" title=\"Vim 变量\"></a>Vim 变量</h2><p>vim存在三种变量: <strong>全局变量</strong>(g), <strong>局部变量</strong>(l)和<strong>脚本变量</strong>(s).</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:helloworld</span> = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">&quot; 这是一个全局变量， g: 前缀未省略</span><br><span class=\"hljs-keyword\">let</span> helloworld = <span class=\"hljs-number\">1</span>    <span class=\"hljs-comment\">&quot; 这也是一个全局变量，在函数外部，默认的作用域是全局的</span><br><br><span class=\"hljs-keyword\">function!</span> <span class=\"hljs-title\">HelloWorld</span><span class=\"hljs-params\">()</span><br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:helloworld</span> = <span class=\"hljs-number\">1</span>    <span class=\"hljs-comment\">&quot; 这是函数内部全局变量</span><br>  <span class=\"hljs-keyword\">let</span> helloworld = <span class=\"hljs-number\">1</span>      <span class=\"hljs-comment\">&quot; 这是一个函数内部的局部变量，在函数内部，默认的作用域为局部变量</span><br><span class=\"hljs-keyword\">endfunction</span><br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>前缀</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>g:</code></td>\n<td>全局变量</td>\n</tr>\n<tr>\n<td><code>l:</code></td>\n<td>局部变量，只可在函数内部使用</td>\n</tr>\n<tr>\n<td><code>s:</code></td>\n<td>脚本变量，只可以在当前脚本函数内使用</td>\n</tr>\n<tr>\n<td><code>v:</code></td>\n<td>Vim 特殊变量</td>\n</tr>\n<tr>\n<td><code>b:</code></td>\n<td>作用域限定在某一个缓冲区内</td>\n</tr>\n<tr>\n<td><code>w:</code></td>\n<td>作用域限定在窗口内部</td>\n</tr>\n<tr>\n<td><code>t:</code></td>\n<td>作用域限定在标签内部</td>\n</tr>\n</tbody></table>\n<h2 id=\"Vim插件的目录结构\"><a href=\"#Vim插件的目录结构\" class=\"headerlink\" title=\"Vim插件的目录结构\"></a>Vim插件的目录结构</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>autoload/</code></td>\n<td>自动载入脚本</td>\n</tr>\n<tr>\n<td><code>colors/</code></td>\n<td>颜色主题</td>\n</tr>\n<tr>\n<td><code>plugin/</code></td>\n<td>在 Vim 启动时将被载入的脚本</td>\n</tr>\n<tr>\n<td><code>ftdetect/</code></td>\n<td>文件类型识别脚本</td>\n</tr>\n<tr>\n<td><code>syntax/</code></td>\n<td>语法高亮文件</td>\n</tr>\n<tr>\n<td><code>ftplugin/</code></td>\n<td>文件类型相关插件</td>\n</tr>\n<tr>\n<td><code>compiler/</code></td>\n<td>编译器</td>\n</tr>\n<tr>\n<td><code>indent/</code></td>\n<td>语法对齐</td>\n</tr>\n</tbody></table>\n<p>详见 <a href=\"https://github.com/wsdjeg/vim-plugin-dev-guide\">Vim插件开发指南</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.kancloud.cn/kancloud/learn-vimscript-the-hard-way/49321\">笨方法学VimScript</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/37352209\">VimScript五分钟入门</a></li>\n<li><a href=\"http://vimcdoc.sourceforge.net/doc/usr_41.html\">编写vim脚本和API列表</a></li>\n<li><a href=\"https://github.com/lymslive/vimllearn/blob/master/content.md\">Vim脚本编写指北</a><ul>\n<li><a href=\"https://github.com/lymslive/vimllearn/blob/master/z/20170818_2.md\">有关Vim Map(特殊键表示、映射详解等)</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/vim-china/vim-script-style-guide\">Vim脚本代码规范</a></li>\n</ul>\n","tags":["vim"]},{"title":"安装Arch","url":"/2022/02/24/16-arch-installation/","content":"<h1 id=\"台式机安装-Arch\"><a href=\"#台式机安装-Arch\" class=\"headerlink\" title=\"台式机安装 Arch\"></a>台式机安装 Arch</h1><p>虽然Manjaro是基于Arch的, 但是越来越觉得Manjaro与Arch的差距还是很大的.</p>\n<p>这次放了一个月寒假, 回来后Manjaro也基本是挂了的状态了, 正好趁此机会将台式机的系统重装下.</p>\n<p>思来想去, 已经用习惯Arch了, 再换其他发行版是不可能的了.</p>\n<p>除了Arch的安装过程之外, 还要记录下安装完Arch后的配置, 方便以后再用.</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"制作启动盘\"><a href=\"#制作启动盘\" class=\"headerlink\" title=\"制作启动盘\"></a>制作启动盘</h2><p>在下载完iso镜像文件后, 将其写入准备好的U盘.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">dd</span> bs=4M <span class=\"hljs-keyword\">if</span>=/path/to/archlinux.iso of=/dev/sdx status=progress &amp;&amp; <span class=\"hljs-built_in\">sync</span><br></code></pre></td></tr></table></figure>\n<p>注意是<code>/dev/sdx/</code>, 是不带数字的.</p>\n<p>在写入之前务必确认没有挂载.</p>\n<h2 id=\"选择字体\"><a href=\"#选择字体\" class=\"headerlink\" title=\"选择字体\"></a>选择字体</h2><p>在进Live环境后, 调整字体大小:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">setfont /usr/share/kbd/consolefonts/LatGrkCyr-12x22.psfu.gz<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"更新系统时间\"><a href=\"#更新系统时间\" class=\"headerlink\" title=\"更新系统时间\"></a>更新系统时间</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">timedatectl set-ntp <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"建立硬盘分区\"><a href=\"#建立硬盘分区\" class=\"headerlink\" title=\"建立硬盘分区\"></a>建立硬盘分区</h2><h3 id=\"查看分区\"><a href=\"#查看分区\" class=\"headerlink\" title=\"查看分区\"></a>查看分区</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">fdisk -l<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"编辑分区\"><a href=\"#编辑分区\" class=\"headerlink\" title=\"编辑分区\"></a>编辑分区</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">fdisk /dev/nvme0n1<br><br>&gt; g <span class=\"hljs-comment\"># 清空原有分区</span><br>&gt; n <span class=\"hljs-comment\"># 创建新分区</span><br>&gt; w <span class=\"hljs-comment\"># 保存</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置分区格式\"><a href=\"#设置分区格式\" class=\"headerlink\" title=\"设置分区格式\"></a>设置分区格式</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">mkfs.fat -F32 /dev/nvme0n1p1 <span class=\"hljs-comment\"># 引导分区</span><br>mkfs.ext4     /dev/nvme0n1p2 <span class=\"hljs-comment\"># 主分区</span><br>mkswap        /dev/nvme0n1p3 <span class=\"hljs-comment\"># Swap分区</span><br>swapon        /dev/nvme0n1p3<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置pacman\"><a href=\"#配置pacman\" class=\"headerlink\" title=\"配置pacman\"></a>配置pacman</h2><p>pacman的配置文件为<code>/etc/pacman.conf</code><br>编辑文件<code>/etc/pacman.d/mirrorlist</code>, 该文件中越靠前的优先级越大.<br>将中国的镜像地址移动到最上面, 如果没有, 则自行添加上.<br><del>不要相信xjtu源</del></p>\n<h2 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h2><h3 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h3><p><strong>按照顺序</strong>, 先挂载根分区到<code>/mnt</code>, 再挂载引导分区到<code>/mnt/efi</code>, 然后挂载其他分区.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">mount /dev/nvme0n1p2 /mnt <span class=\"hljs-comment\"># 挂载主分区</span><br><span class=\"hljs-built_in\">mkdir</span> /mnt/boot<br>mount /dev/nvme0n1p1 /mnt/boot <span class=\"hljs-comment\"># 挂载引导分区</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用pacstrap安装系统\"><a href=\"#使用pacstrap安装系统\" class=\"headerlink\" title=\"使用pacstrap安装系统.\"></a>使用pacstrap安装系统.</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacstrap /mnt base linux linux-firmware<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置系统\"><a href=\"#配置系统\" class=\"headerlink\" title=\"配置系统\"></a>配置系统</h2><h3 id=\"生成fstab\"><a href=\"#生成fstab\" class=\"headerlink\" title=\"生成fstab\"></a>生成fstab</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"进入chroot\"><a href=\"#进入chroot\" class=\"headerlink\" title=\"进入chroot\"></a>进入chroot</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">arch-chroot /mnt<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置时区\"><a href=\"#设置时区\" class=\"headerlink\" title=\"设置时区\"></a>设置时区</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure>\n<p>然后运行<code>hwclock</code>以生成<code>/etc/adjtime</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">hwclock --systohc<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"本地化\"><a href=\"#本地化\" class=\"headerlink\" title=\"本地化\"></a>本地化</h3><p>编辑<code>/etc/locale.gen</code>, 取消掉<code>en_US.UTF-8</code>和<code>UTF-8</code>和其他需要的时区前面的注释, 如<code>zh_CN.UTF-8</code>.</p>\n<p>执行<code>locale-gen</code>以生成<code>locale</code>信息.</p>\n<p>创建<code>/etc/locale.conf</code>, 并设置<code>LANG</code>变量:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs conf\">LANG=zh_CN.UTF-8<br></code></pre></td></tr></table></figure>\n<p>当然在编辑文件前需要安装一个编辑器, 比如neovim.</p>\n<h3 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h3><p>创建<code>hostname</code>文件<code>/etc/hostname</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># /etc/hostname</span><br><span class=\"hljs-built_in\">arch</span><br></code></pre></td></tr></table></figure>\n<p>将对应的信息添加到<code>/etc/hosts</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">127.0.0.1 localhost<br>::1       localhost<br>127.0.1.1 arch.localdomain <span class=\"hljs-built_in\">arch</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">passwd<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装引导程序\"><a href=\"#安装引导程序\" class=\"headerlink\" title=\"安装引导程序\"></a>安装引导程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S grub efibootmgr amd-ucode os-prober<br><span class=\"hljs-built_in\">mkdir</span> /boot/grub<br>grub-mkconfig &gt; /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure>\n\n<p>查看系统架构:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">uname</span> -m<br></code></pre></td></tr></table></figure>\n<p>安装grub:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">grub-install --target=x86_64-efi --efi-directory=/boot<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h2><p>退出chroot环境, 使用<code>reboot</code>命令重启, 拔出安装介质.</p>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"基本包与必备软件\"><a href=\"#基本包与必备软件\" class=\"headerlink\" title=\"基本包与必备软件\"></a>基本包与必备软件</h2><p>基本包 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S base-devel<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>linux-headers</li>\n<li>git</li>\n<li>终端模拟器 (st, alacritty)</li>\n<li>yay, paru</li>\n<li>aria2</li>\n<li>croc</li>\n<li>zip, gzip, unzip, p7zip, unrar</li>\n<li>google-chrome</li>\n<li>xclip</li>\n<li>ntfs-3g</li>\n<li>ueberzug</li>\n<li>fzf</li>\n<li>trash-cli</li>\n<li>imagemagick</li>\n<li>ctags</li>\n<li>nomacs</li>\n<li>webkit2gtk</li>\n<li>clang: <code>pacman -S clang</code></li>\n<li>php</li>\n</ul>\n<h3 id=\"python-packages\"><a href=\"#python-packages\" class=\"headerlink\" title=\"python packages\"></a>python packages</h3><p>建议使用 pacman 安装</p>\n<ul>\n<li>neovim-remote: <code>sudo pip install neovim-remote</code></li>\n<li>pynvim: <code>sudo pacman -S python-pynvim</code></li>\n<li>jedi: <code>sudo pacman -S python-jedi</code></li>\n<li>pylint <code>sudo pacman -S python-pylint</code></li>\n<li>rope <code> sudo pacman -S python-rope</code> (coc.python 用来重命名变量)</li>\n<li>virtualenv</li>\n<li>numpy</li>\n<li>matplotlib</li>\n</ul>\n<h3 id=\"npm-packages\"><a href=\"#npm-packages\" class=\"headerlink\" title=\"npm packages\"></a>npm packages</h3><ul>\n<li>hexo-cli <code>sudo npm install -g hexo-cli</code></li>\n<li>hexo-generator-index <code>sudo npm install -g hexo-generator-index</code></li>\n<li>typescript <code>sudo pacman -S typescript</code></li>\n</ul>\n<hr>\n<h2 id=\"创建普通用户\"><a href=\"#创建普通用户\" class=\"headerlink\" title=\"创建普通用户\"></a>创建普通用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">useradd -m corona<br>usermod -a -G wheel corona<br></code></pre></td></tr></table></figure>\n\n<p>编辑<code>/etc/sudoers</code>, 去掉</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">%wheel ALL=(ALL) ALL<br></code></pre></td></tr></table></figure>\n<p>前面的注释</p>\n<hr>\n<h2 id=\"安装图形界面\"><a href=\"#安装图形界面\" class=\"headerlink\" title=\"安装图形界面\"></a>安装图形界面</h2><h3 id=\"安装S-Server\"><a href=\"#安装S-Server\" class=\"headerlink\" title=\"安装S-Server\"></a>安装S-Server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S xorg-server<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装i3\"><a href=\"#安装i3\" class=\"headerlink\" title=\"安装i3\"></a>安装i3</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S i3-gaps<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装lightdm\"><a href=\"#安装lightdm\" class=\"headerlink\" title=\"安装lightdm\"></a>安装lightdm</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings<br></code></pre></td></tr></table></figure>\n\n<p>启动lightdm服务:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">systemctl <span class=\"hljs-built_in\">enable</span> lightdm.service<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"icon\"><a href=\"#icon\" class=\"headerlink\" title=\"icon\"></a>icon</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S papirus-icon-theme<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"添加archlinuxcn\"><a href=\"#添加archlinuxcn\" class=\"headerlink\" title=\"添加archlinuxcn\"></a>添加archlinuxcn</h2><p>在 /etc/pacman.conf 文件末尾添加以下两行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">[archlinuxcn]<br>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch<br></code></pre></td></tr></table></figure>\n<p>之后安装<code>archlinuxcn-keyring</code>包导入 GPG key</p>\n<hr>\n<h2 id=\"交换cap与左ctrl\"><a href=\"#交换cap与左ctrl\" class=\"headerlink\" title=\"交换cap与左ctrl\"></a>交换cap与左ctrl</h2><p><a href=\"https://corona09.github.io/2022/02/09/02-sundries/#5-%E4%BA%A4%E6%8D%A2Caps-Lock%E4%B8%8E%E5%B7%A6Ctrl\">Click Here</a></p>\n<hr>\n<h2 id=\"开机自动启动NumberLock\"><a href=\"#开机自动启动NumberLock\" class=\"headerlink\" title=\"开机自动启动NumberLock\"></a>开机自动启动NumberLock</h2><p><a href=\"https://corona09.github.io/2022/02/09/02-sundries/#7-%E5%BC%80%E6%9C%BA%E5%90%8E%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8NumLock\">Click Here</a></p>\n<hr>\n<h2 id=\"中文设置\"><a href=\"#中文设置\" class=\"headerlink\" title=\"中文设置\"></a>中文设置</h2><p>安装fcitx5词库及主题:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S fcitx5-im fcitx5-chinese-addons<br>pacman -S fcitx5-pinyin-moegirl fcitx5-pinyin-zhwiki<br><br></code></pre></td></tr></table></figure>\n<p>在<code>~/.xinitrc</code>及<code>~/.xprofile</code>中添加如下设置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">export LANG=zh_CN.UTF-8<br>export LANGUAGE=zh_CN:en_US<br></code></pre></td></tr></table></figure>\n\n<p>在<code>~/.pam_environment</code>中添加如下内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">GTK_IM_MODULE DEFAULT=fcitx<br>QT_IM_MODULE  DEFAULT=fcitx<br>XMODIFIERS    DEFAULT=\\@im=fcitx5<br>INPUT_METHOD  DEFAULT=fcitx<br>SDL_IM_MODULE DEFAULT=fcitx<br>GLFW_IM_MODULE DEFAULT=ibus<br></code></pre></td></tr></table></figure>\n\n<p>安装字体:</p>\n<p>安装FiraCode, SourceCodePro, 中华书局宋体, 思源宋体, 思源黑体, ttf-droid</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S ttf-droid noto-fonts ttf-joypixels adobe-source-han-sans-cn-fonts<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"亮度设置\"><a href=\"#亮度设置\" class=\"headerlink\" title=\"亮度设置\"></a>亮度设置</h2><p>亮度调整的脚本已经在my-script仓库中了, 这里需要安装下依赖:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S bc xorg-apps<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"声音设置\"><a href=\"#声音设置\" class=\"headerlink\" title=\"声音设置\"></a>声音设置</h2><p>编辑配置文件<code>~/.asoundrc</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">defaults.pcm.card   1<br>defaults.pcm.device 0<br>defaults.ctl.card   1<br></code></pre></td></tr></table></figure>\n<p>具体数值需要根据设备确定, 可参见 archwiki alsa 部分.</p>\n<p>在我使用的 Macbook Air 上, 要使用麦克风, 需要安装 <code>pulseaudio</code> 包并且需要打上以下补丁 : </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">--- a/usr/share/pulseaudio/alsa-mixer/paths/analog-input-mic.conf<br>+++ b/usr/share/pulseaudio/alsa-mixer/paths/analog-input-mic.conf<br>@@ -23,6 +23,8 @@<br> <br> [Jack Mic]<br> required-any = any<br>+state.plugged = unknown<br>+state.unplugged = unknown<br> <br> [Jack Mic Phantom]<br> required-any = any<br>@@ -31,6 +33,8 @@<br> <br> [Jack Mic - Input]<br> required-any = any<br>+state.plugged = unknown<br>+state.unplugged = unknown<br> <br> [Element Capture]<br> switch = mute<br></code></pre></td></tr></table></figure>\n\n<p>注意该补丁在 <code>pulseaudio</code> 每次更新后都需要手动打上.</p>\n<p>如果没有打这个补丁, 大部分软件都能正常使用, 但是使用腾讯会议时会没有声音.</p>\n<hr>\n<h2 id=\"摄像头设置\"><a href=\"#摄像头设置\" class=\"headerlink\" title=\"摄像头设置\"></a>摄像头设置</h2><p>参见 <a href=\"https://dotcs.me/posts/macbook-webcam-arch\">This</a></p>\n<p>因为我用的笔记本是 Macbook, 因此需要安装 AUR 中的 <code>bcwc-pcie-git</code> 包,<br>之后加载内核的 <code>facetimehd</code> 模块:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yay -S bcwc-pcie-git<br>modprobe facetimehd <span class=\"hljs-comment\"># 这条需要 root 权限</span><br></code></pre></td></tr></table></figure>\n\n<p>使用以下命令检查是否配置成功 : </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">v4l2-ctl --list-devices<br><span class=\"hljs-comment\"># 如果成功, 输出应类似 : </span><br><span class=\"hljs-comment\"># Apple Facetime HD (PCI:0000:02:00.0):</span><br><span class=\"hljs-comment\">#        /dev/video0</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Git设置\"><a href=\"#Git设置\" class=\"headerlink\" title=\"Git设置\"></a>Git设置</h2><h3 id=\"设置ssh\"><a href=\"#设置ssh\" class=\"headerlink\" title=\"设置ssh\"></a>设置ssh</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mkdir</span> ~/.ssh<br><span class=\"hljs-built_in\">cd</span> ~/.ssh<br>ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;Corona09@163.com&quot;</span> -f id_gitee<br>ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;Corona09@163.com&quot;</span> -f id_github<br></code></pre></td></tr></table></figure>\n<p>编辑<code>~/.ssh/config</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">#gitee<br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/gitee_id_ed25519<br><br>#github<br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure>\n\n<p>打开gitee, github设置公钥, 检查是否成功:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">ssh -T git@gitee.com<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"clash设置\"><a href=\"#clash设置\" class=\"headerlink\" title=\"clash设置\"></a>clash设置</h2><p>安装google-chrome的插件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">google-chrome-stable --proxy-server=<span class=\"hljs-string\">&quot;http://127.0.0.1:7890&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>打开谷歌应用市场<code>chrome://extensions</code><br>安装<code>ProxySwitchyOmega</code></p>\n<hr>\n<h2 id=\"挂载磁盘\"><a href=\"#挂载磁盘\" class=\"headerlink\" title=\"挂载磁盘\"></a>挂载磁盘</h2><p>因为台式机有额外的机械磁盘, 因此需要挂载硬盘.<br><a href=\"https://corona09.github.io/2022/02/09/02-sundries/#4-%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98\">Click Here</a></p>\n<hr>\n<h2 id=\"安装Latex\"><a href=\"#安装Latex\" class=\"headerlink\" title=\"安装Latex\"></a>安装Latex</h2><p>安装必要的包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S texlive-most texlive-lang<br>pacman -S poppler-data<br>yay -S zathrua zathura-pdf-poppler<br></code></pre></td></tr></table></figure>\n\n<p>设置必要的<code>latexmkrc</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$pdflatex=&quot;xelatex %O %S&quot;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"安装虚拟机\"><a href=\"#安装虚拟机\" class=\"headerlink\" title=\"安装虚拟机\"></a>安装虚拟机</h2><p><a href=\"https://wiki.archlinux.org/title/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%9C%A8_Arch_%E9%87%8C%E5%AE%89%E8%A3%85_VirtualBox\">Arch Wiki</a></p>\n<p>安装virtualbox相关包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yay -S virtualbox virtualbox-host-modules-arch<br></code></pre></td></tr></table></figure>\n<p>在 VirtualBox 所使用的 内核模块 中，只有 vboxdrv 是必须的。该模块必须在虚拟机运行之前加载。</p>\n<p>手动加载模块的命令是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">modprobe vboxdrv<br></code></pre></td></tr></table></figure>\n\n<p>有关高级功能的模块:</p>\n<ul>\n<li><p><code>vboxnetadp</code> &amp; <code>vboxnetflt</code> : 在使用桥接网络和host-only网络时是需要的.<br>  <code>vboxnetadp</code> 模块用于在 VirtualBox 全局配置里为主体机创建虚拟网卡；<br>  <code>vboxnetflt</code> 模块会在使用了该功能的客体机启动时起作用<br>  为了使用桥接网络或”Host-only”网络, 需要安装<code>net-tools</code>包.</p>\n</li>\n<li><p><code>vboxpci</code> 若要让虚拟机使用宿主机的PCI设备, 就需要这个模块.</p>\n</li>\n</ul>\n<p>如果在VirtualBox内核模块运行期间更新了模块所属软件包, 为了使用新版本, 需要手动加载这些模块. 在root权限下运行<code>vboxreload</code>即可重新加载.</p>\n<h3 id=\"从虚拟机访问宿主机USB设备\"><a href=\"#从虚拟机访问宿主机USB设备\" class=\"headerlink\" title=\"从虚拟机访问宿主机USB设备\"></a>从虚拟机访问宿主机USB设备</h3><p>将需要运行VirtualBox的用户名添加到<code>vboxusers</code>用户组.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">usermod -a -G vboxusers corona<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装扩展包\"><a href=\"#安装扩展包\" class=\"headerlink\" title=\"安装扩展包\"></a>安装扩展包</h3><p>Oracle Extension Pack 为虚拟机提供了额外功能. 但它并不是以自由软件协议发布的, 仅供个人使用. 这些扩展包可以从 <code>virtualbox-ext-oracle</code>(AUR)安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yay -S virtualbox-ext-oracle<br></code></pre></td></tr></table></figure>\n\n<p>重启计算机, 启动VirtualBox, 安装虚拟机.</p>\n<hr>\n<h2 id=\"Blog\"><a href=\"#Blog\" class=\"headerlink\" title=\"Blog\"></a>Blog</h2><p>使用Hexo构建博客后, 应为涉及到git仓库的问题, 因此在两台机器上编辑博客难免造成冲突. 在我找到好的解决方案之前就先只在一台机器上写博客吧.</p>\n<hr>\n<h2 id=\"连接-wifi\"><a href=\"#连接-wifi\" class=\"headerlink\" title=\"连接 wifi\"></a>连接 wifi</h2><p>为了能够在笔记本上连接 wifi, 需要 <code>broadcom-wl-dkms</code> 包.<br>参见 <a href=\"https://wiki.archlinux.org/title/Broadcom_wireless#broadcom-wl\">archwiki</a><br>在安装该包之前需要先安装 <code>linux-headers</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">pacman -S broadcom-wl-dkms<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p><code>2022-06-05 20:02</code> : 已经转投 openSUSE 了</p>\n","tags":["arch"]},{"title":"Socket Programming Notes [未完待续]","url":"/2022/03/17/17-socket-notes/","content":"<h1 id=\"1-Client\"><a href=\"#1-Client\" class=\"headerlink\" title=\"1 Client\"></a>1 Client</h1><h2 id=\"1-1-创建-Socket\"><a href=\"#1-1-创建-Socket\" class=\"headerlink\" title=\"1.1 创建 Socket\"></a>1.1 创建 Socket</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> &#123;<br>\t<span class=\"hljs-type\">int</span> socket_desc;<br>\tsocket_desc = socket(AF_INET, SOCK_STREAM, <span class=\"hljs-number\">0</span>);<br><br>\t<span class=\"hljs-keyword\">if</span> (socket_desc == <span class=\"hljs-number\">-1</span>) &#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Could not create socket&quot;</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"1-2-连接-Server\"><a href=\"#1-2-连接-Server\" class=\"headerlink\" title=\"1.2 连接 Server\"></a>1.2 连接 Server</h2><p>需要使用以下数据结构 (定义在 <code>arpa/inet.h</code> 中) :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">in_addr</span> &#123;</span><br>    <span class=\"hljs-comment\">// 该结构体中存储 ip 地址</span><br>\t<span class=\"hljs-comment\">// 需要使用 inet_addr 函数将字符串转化为 long 格式</span><br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> s_addr; <span class=\"hljs-comment\">// load with inet_pton()</span><br>&#125; in_addr;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> &#123;</span><br>    <span class=\"hljs-type\">short</span> sin_family; <span class=\"hljs-comment\">// e.g. AF_INET, AF_INET6</span><br>    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">short</span> sin_port; <span class=\"hljs-comment\">// e.g. htons(3409)</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">in_addr</span> <span class=\"hljs-title\">sin_addr</span>;</span><br>    <span class=\"hljs-type\">char</span> sin_zero[<span class=\"hljs-number\">8</span>];<br>&#125; sockaddr_in;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netinet/in.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arpa/inet.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> &#123;<br>\t<span class=\"hljs-type\">int</span> socket_desc;<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> <span class=\"hljs-title\">server</span>;</span><br><br>\t<span class=\"hljs-comment\">// 创建 Socket, 与上相同</span><br>\t<br>\t<span class=\"hljs-comment\">// inet_addr 函数会将 ip 地址转化为 long 格式整数</span><br>\tserver.sin_addr.s_addr = inet_addr(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>);<br>\tserver.sin_family = AF_INET;<br>\tserver.sin_port = htons(<span class=\"hljs-number\">4000</span>);<br><br>\t<span class=\"hljs-comment\">// 连接远程服务</span><br>\t<span class=\"hljs-keyword\">if</span> (connect(socket_desc, (<span class=\"hljs-keyword\">struct</span> sockaddr*)&amp;server, <span class=\"hljs-keyword\">sizeof</span>(server)) &lt; <span class=\"hljs-number\">0</span>) &#123;<br>\t\t<span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Connect Error&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>\t&#125;<br><br>\t<span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Connected&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在本地启动占用 4000 端口的服务后, 即可运行以上程序, 可见输出 <code>Connected</code>.</p>\n<hr>\n<h2 id=\"1-3-发送数据\"><a href=\"#1-3-发送数据\" class=\"headerlink\" title=\"1.3 发送数据\"></a>1.3 发送数据</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 使用 send 函数可以向 server 发送数据</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netinet/in.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arpa/inet.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> &#123;<br>\t<span class=\"hljs-type\">int</span> socket_dest;<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> <span class=\"hljs-title\">server</span>;</span><br>\t<span class=\"hljs-type\">char</span> *message;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 创建 Socket 并连接 Server</span><br><span class=\"hljs-comment\">\t * 与上相同</span><br><span class=\"hljs-comment\">\t */</span><br><br>\t<span class=\"hljs-comment\">// 发送数据</span><br>\tmessage = (<span class=\"hljs-type\">char</span>*) <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">31</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));<br>\t<span class=\"hljs-built_in\">strcpy</span>(message, <span class=\"hljs-string\">&quot;GET / HTTP/1.1\\r\\n\\r\\n&quot;</span>);<br><br>\t<span class=\"hljs-keyword\">if</span> (send(socket_dest, message, <span class=\"hljs-built_in\">strlen</span>(message), <span class=\"hljs-number\">0</span>) &lt; <span class=\"hljs-number\">0</span>) &#123;<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Send Failed\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Data Sent\\n&quot;</span>);<br><br>\t<span class=\"hljs-built_in\">free</span>(message);<br><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-关闭-Socket\"><a href=\"#1-4-关闭-Socket\" class=\"headerlink\" title=\"1.4 关闭 Socket\"></a>1.4 关闭 Socket</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\">close(socket_dest);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-5-获取-IP-地址\"><a href=\"#1-5-获取-IP-地址\" class=\"headerlink\" title=\"1.5 获取 IP 地址\"></a>1.5 获取 IP 地址</h2><p><code>netdb.h</code> 中的函数 <code>gethostbyname</code> 可以解析 DNS, 给定域名, 获取其 IP 地址等信息.</p>\n<p>在 <code>netdb.h</code> 中定义的结构体 <code>hostent</code> 如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">hostent</span> &#123;</span><br>\t<span class=\"hljs-comment\">// Official name of host</span><br>\t<span class=\"hljs-type\">char</span>* h_name;<br>\t<span class=\"hljs-comment\">// Alias list</span><br>\t<span class=\"hljs-type\">char</span>** h_aliases;<br>\t<span class=\"hljs-comment\">// Host address type</span><br>\t<span class=\"hljs-type\">int</span> h_addrtype;<br>\t<span class=\"hljs-comment\">// Length of address</span><br>\t<span class=\"hljs-type\">int</span> h_length;<br>\t<span class=\"hljs-comment\">// List of addresses from name server</span><br>\t<span class=\"hljs-type\">char</span>** h_addr_list;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>以下程序可以获取 <code>www.baidu.com</code> 的 IP 地址.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netinet/in.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netdb.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arpa/inet.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> &#123;<br>\t<span class=\"hljs-type\">char</span>* hostname = <span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>;<br>\t<span class=\"hljs-type\">char</span> ip[<span class=\"hljs-number\">50</span>];<br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">hostent</span> *<span class=\"hljs-title\">he</span>;</span><br>\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">in_addr</span> **<span class=\"hljs-title\">addr_list</span>;</span><br><br>\t<span class=\"hljs-keyword\">if</span> ( (he = gethostbyname(hostname)) == <span class=\"hljs-literal\">NULL</span>) &#123;<br>\t\t<span class=\"hljs-comment\">// failed</span><br>\t\t<span class=\"hljs-comment\">// herror(&quot;gethostbyname&quot;);</span><br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Failed\\n&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>\t&#125;<br><br>\taddr_list = (<span class=\"hljs-keyword\">struct</span> in_addr**) he-&gt;h_addr_list;<br><br>\t<span class=\"hljs-comment\">// Cast the h_addr_list to in_addr</span><br>\t<span class=\"hljs-comment\">// Since h_addr_list also has the ip address in long format only</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; addr_list[i] != <span class=\"hljs-literal\">NULL</span>; i++) &#123;<br>\t\t<span class=\"hljs-built_in\">strcpy</span>(ip, inet_ntoa(*addr_list[i]));<br>\t&#125;<br><br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s resolved to : %s\\n&quot;</span>, hostname, ip);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>inet_ntoa</code> 函数可以将 <code>long</code> 格式的 IP 地址转化为点号分割的字符串格式. 这个过程正好与 <code>inet_addr</code> 是相反的.</p>\n<hr>\n<h1 id=\"2-Server\"><a href=\"#2-Server\" class=\"headerlink\" title=\"2 Server\"></a>2 Server</h1><h2 id=\"2-1-绑定端口\"><a href=\"#2-1-绑定端口\" class=\"headerlink\" title=\"2.1 绑定端口\"></a>2.1 绑定端口</h2>","tags":["C语言"]},{"title":"XFCE 配置","url":"/2022/03/27/18-xfce-config/","content":"<p>最近迁到了 xfce4</p>\n<p>在尝试了 kde, gnome, i3 之后, 感觉还是 xfce 比较好</p>\n<p>当然 i3 依旧在用, 但是部分应用窗口在 i3 下的显示很奇怪, 毕竟 i3 只是一个窗口管理器.</p>\n<h1 id=\"必要软件包\"><a href=\"#必要软件包\" class=\"headerlink\" title=\"必要软件包\"></a>必要软件包</h1><p>在安装 xfce 基础包之后, 还需要安装一部分额外的包:</p>\n<ul>\n<li><code>xfce4-pulseaudio-plugin</code> 在 panel 上显示声音</li>\n<li><code>network-manager-applet</code> 在 panel 上显示网络</li>\n<li><code>gvfs</code> 使用回收站</li>\n<li><code>thunar-archive-plugin</code> 该插件只是提供一个接口, 真正的解压软件需要另外安装;</li>\n<li><code>xarchive</code></li>\n<li><code>thunar-media-tag-plugin</code></li>\n<li><code>light-locker</code> 与 loghtdm 配套的锁屏, 安装后需执行命令 :<br>  <code>xfconf-query --create -c xfce4-session -p /general/LockCommand -t string -s &quot;light-locker-command --lock&quot;</code></li>\n</ul>\n<h1 id=\"杂项设置\"><a href=\"#杂项设置\" class=\"headerlink\" title=\"杂项设置\"></a>杂项设置</h1><h2 id=\"自启动-Conky-有多个实例\"><a href=\"#自启动-Conky-有多个实例\" class=\"headerlink\" title=\"自启动 Conky 有多个实例\"></a>自启动 Conky 有多个实例</h2><p>所有应用程序 $\\rightarrow$ 注销 $\\rightarrow$ 取消“保存会话用于将来登录” $\\rightarrow$ 重启</p>\n<h1 id=\"Thunar\"><a href=\"#Thunar\" class=\"headerlink\" title=\"Thunar\"></a>Thunar</h1><h3 id=\"隐藏菜单栏\"><a href=\"#隐藏菜单栏\" class=\"headerlink\" title=\"隐藏菜单栏\"></a>隐藏菜单栏</h3><p>菜单栏被隐藏后可使用快捷键 <code>Ctrl+M</code> 呼出</p>\n<h3 id=\"归档管理器\"><a href=\"#归档管理器\" class=\"headerlink\" title=\"归档管理器\"></a>归档管理器</h3><p>使用 <code>xarchiver</code> 和 <code>file-roller</code> 之后, 感觉并不满意. <code>xarchiver</code> 太老旧, <code>file-roller</code> 好像不是用 gtk 写的, 和 gtk 主题不能匹配.<br>最终选择了 <code>peazip</code>, 但是需要做一些设置 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 下载 peazip 的 gtk 版本</span><br>paru -S peazip-gtk2-bin<br></code></pre></td></tr></table></figure>\n\n<p>创建文件 <code>/usr/lib/xfce4/thunar-archive-plugin/peazip.tap</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># peazip.tap - Wrapper script to create and extract archive files</span><br><span class=\"hljs-comment\">#                   in Thunar, via the thunar-archive-plugin, using the</span><br><span class=\"hljs-comment\">#                   peazip.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># $Id$</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Copyright (c) 2006 Benedikt Meurer &lt;benny@xfce.org&gt;.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># This program is free software; you can redistribute it and/or modify it</span><br><span class=\"hljs-comment\"># under the terms of the GNU General Public License as published by the Free</span><br><span class=\"hljs-comment\"># Software Foundation; either version 2 of the License, or (at your option)</span><br><span class=\"hljs-comment\"># any later version.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># This program is distributed in the hope that it will be useful, but WITHOUT</span><br><span class=\"hljs-comment\"># ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span><br><span class=\"hljs-comment\"># FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for</span><br><span class=\"hljs-comment\"># more details.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># You should have received a copy of the GNU General Public License along with</span><br><span class=\"hljs-comment\"># this program; if not, write to the Free Software Foundation, Inc., 59 Temple</span><br><span class=\"hljs-comment\"># Place, Suite 330, Boston, MA  02111-1307  USA.</span><br><span class=\"hljs-comment\">#</span><br><br><span class=\"hljs-comment\"># determine the action and the folder, $@ then contains only the files</span><br>action=<span class=\"hljs-variable\">$1</span>; <span class=\"hljs-built_in\">shift</span>;<br>folder=<span class=\"hljs-variable\">$1</span>; <span class=\"hljs-built_in\">shift</span>;<br><br><span class=\"hljs-comment\"># check the action</span><br><span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable\">$action</span> <span class=\"hljs-keyword\">in</span><br>create)<br>\t<span class=\"hljs-built_in\">exec</span> peazip <span class=\"hljs-string\">&quot;-add2archive-add&quot;</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$@</span>&quot;</span><br>\t;;<br><br>extract-here)<br>\t<span class=\"hljs-built_in\">exec</span> peazip <span class=\"hljs-string\">&quot;-ext2here&quot;</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$@</span>&quot;</span><br>\t;;<br><br>extract-to)<br>\t<span class=\"hljs-built_in\">exec</span> peazip <span class=\"hljs-string\">&quot;-ext2to&quot;</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$@</span>&quot;</span><br>\t;;<br><br>*)<br>\t<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Unsupported action &#x27;<span class=\"hljs-variable\">$action</span>&#x27;&quot;</span> &gt;&amp;2<br>\t<span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">esac</span><br></code></pre></td></tr></table></figure>\n\n<p>刷新数据库 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo update-desktop-database /usr/share/applications<br></code></pre></td></tr></table></figure>\n<p>然后就可以在 thunar 中使用 peazip 作为归档管理器了</p>\n<h1 id=\"AUR-Packages\"><a href=\"#AUR-Packages\" class=\"headerlink\" title=\"AUR Packages\"></a>AUR Packages</h1><p>记录一下正在使用的 AUR 中的包</p>\n<h2 id=\"LAPTOP\"><a href=\"#LAPTOP\" class=\"headerlink\" title=\"LAPTOP\"></a>LAPTOP</h2><ul>\n<li>bcwc-pcie-git (摄像头)</li>\n<li>google-chrome</li>\n<li>jdk11</li>\n<li>jdk8</li>\n<li>peazip-gtk2-bin</li>\n<li>ttf-symbola</li>\n<li>ttf-wps-fonts</li>\n<li>wemeet-bin</li>\n<li>wps-office-cn</li>\n<li>wps-office-mui-zh-cn</li>\n<li>yesplaymusic</li>\n</ul>\n<h2 id=\"PC\"><a href=\"#PC\" class=\"headerlink\" title=\"PC\"></a>PC</h2><ul>\n<li>google-chrome</li>\n<li>jdk11</li>\n<li>jdk8</li>\n<li>peazip-gtk2-bin</li>\n<li>ttf-symbola</li>\n<li>ttf-wps-fonts</li>\n<li>wemeet-bin</li>\n<li>wps-office-cn</li>\n<li>wps-office-mui-zh-cn</li>\n<li>yesplaymusic</li>\n</ul>\n<hr>\n<p>2022-06-05 20:01 : 已经用 KDE 辽</p>\n<hr>\n<p>2022-07-03 : 又换回 XFCE 辽</p>\n<hr>\n<h1 id=\"主题设置\"><a href=\"#主题设置\" class=\"headerlink\" title=\"主题设置\"></a>主题设置</h1><p>MacOS 的样式确实好看, 尝试将 xfce 伪装成 xfce 的样子 😄.</p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>下载 <a href=\"https://www.opencode.net/lsteam/xfce-big-sur-setup-file/-/blob/master/update-xfce-bigsur.zip\">该压缩包</a>, 将其中的字体复制到 <code>~/.fonts</code> 下.</p>\n<h2 id=\"grub\"><a href=\"#grub\" class=\"headerlink\" title=\"grub\"></a>grub</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo pacman -S grub-customizer<br><span class=\"hljs-comment\"># 在 archlinuxcn 中</span><br>sudo pacman -S grub-theme-whitesur-whitesur-1080p-git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"GTK-Theme\"><a href=\"#GTK-Theme\" class=\"headerlink\" title=\"GTK Theme\"></a>GTK Theme</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">paru -S whitesur-gtk-theme-git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Icon-Theme\"><a href=\"#Icon-Theme\" class=\"headerlink\" title=\"Icon Theme\"></a>Icon Theme</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">paru -S whitesur-icon-theme<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"panel\"><a href=\"#panel\" class=\"headerlink\" title=\"panel\"></a>panel</h2><p>添加全局菜单</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">paru -S vala-panel-appmenu-xfce-git vala-panel-appmenu-registrar-git<br>sudo pacman -S appmenu-gtk-module<br></code></pre></td></tr></table></figure>\n\n<p>安装以上软件包后, 执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">xfconf-query -c xsettings -p /Gtk/ShellShowsMenubar -n -t bool -s <span class=\"hljs-literal\">true</span><br>xfconf-query -c xsettings -p /Gtk/ShellShowsAppmenu -n -t bool -s <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>之后在面板首选项中添加”全局菜单”.</p>\n<h2 id=\"dock\"><a href=\"#dock\" class=\"headerlink\" title=\"dock\"></a>dock</h2><p>对于下部的 dock 懒, 使用 <code>plank</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo pacman -S plank<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Fcitx5\"><a href=\"#Fcitx5\" class=\"headerlink\" title=\"Fcitx5\"></a>Fcitx5</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">paru -S fcitx5-nord<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"QT-与-GTK-样式\"><a href=\"#QT-与-GTK-样式\" class=\"headerlink\" title=\"QT 与 GTK 样式\"></a>QT 与 GTK 样式</h2><p>最近开始使用了 RSS, 经过多次尝试, 还是 QuiteRSS 最好用, 但是问题是有时候会出现不能关闭/关闭后无法打开的问题. 不过暂时还是用这个吧.</p>\n<p>但是不能忍的问题是, QuiteRSS 的白色界面实在是刺眼, 必须统一一下 QT 与 GTK 的主题了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装 adwaita-qt 与 qt5ct</span><br>paru -S adwaita-qt qt5ct<br></code></pre></td></tr></table></figure>\n<p>编辑 <code>~/.pam_environment</code> 设置环境变量, 在最后一行加上:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">QT_QPA_PLATFORMTHEME=qt5ct<br></code></pre></td></tr></table></figure>\n<p>重启, 打开 <code>qt5ct</code> 选择对应的主题.</p>\n<p>然后就能看到, QT 程序也有暗色模式了, 比如 fcitx5 设置.</p>\n<h2 id=\"compiz\"><a href=\"#compiz\" class=\"headerlink\" title=\"compiz\"></a>compiz</h2><p>想有好看的动画, 但是 wayland 现在又不成熟…所以选择了 compiz</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">paru -S compiz<br></code></pre></td></tr></table></figure>\n\n<p>安装需要的时间比较长, 最好提前设置 git 的代理.</p>\n<p>安装完成后, 执行以下命令替换 <code>xfwm4</code>: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 用户范围</span><br>xfconf-query -c xfce4-session -p /sessions/Failsafe/Client0_Command -a -s compiz<br></code></pre></td></tr></table></figure>\n<p>如果要全局范围内替换, 则需要修改 <code>/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-session.xml</code> 文件, 将其中的 <code>xfwm4</code> 替换为 <code>compiz</code>.</p>\n<p>如果要换回 <code>xfwm4</code>, 则修改配置文件 <code>~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-session.xml</code> (单用户) 或 <code>/etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-session.xml</code> (全局), 将其中的 <code>compiz</code> 换回 <code>xfwm4</code> .</p>\n<p>设置成功之后, 执行以下脚本, 选择 <code>whitesur</code> 主题.</p>\n<p>compiz-gtk-decorator-theme-selector.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br>SAVEIFS=<span class=\"hljs-variable\">$IFS</span><br>IFS=$(<span class=\"hljs-built_in\">echo</span> -en <span class=\"hljs-string\">&quot;\\n\\b&quot;</span>)<br><br><span class=\"hljs-keyword\">if</span> [ ! -f /usr/bin/metacity ]; <span class=\"hljs-keyword\">then</span><br>  zenity --warning --text=<span class=\"hljs-string\">&quot;&lt;b&gt;You do not appear to have Metacity installed.&lt;/b&gt;\\n\\nThe Compiz GTK window decorator uses Metacity libraries to operate. The Metacity theme is what this tool adjusts.\\n\\nInstall the metacity package if you would like to use the Compiz GTK window decorator.&quot;</span><br><span class=\"hljs-keyword\">fi</span><br><br><span class=\"hljs-function\"><span class=\"hljs-title\">main_window</span></span>() &#123;<br>  selection=$(<br>    zenity --height 450 --width 320 --list --ok-label=<span class=\"hljs-string\">&quot;Apply&quot;</span> --cancel-label=<span class=\"hljs-string\">&quot;Close&quot;</span> --title=<span class=\"hljs-string\">&quot;Metacity themes&quot;</span> \\<br>    --column=<span class=\"hljs-string\">&quot;Current theme: <span class=\"hljs-subst\">$( if [ $(gsettings get org.gnome.desktop.wm.preferences theme)</span> == &quot;</span><span class=\"hljs-string\">&#x27;&#x27;</span><span class=\"hljs-string\">&quot; ]; then</span><br><span class=\"hljs-string\">        echo Default</span><br><span class=\"hljs-string\">      else</span><br><span class=\"hljs-string\">        gsettings get org.gnome.desktop.wm.preferences theme</span><br><span class=\"hljs-string\">      fi)&quot;</span> \\<br>    <span class=\"hljs-string\">&quot;Compiz GWD default&quot;</span> \\<br>    $(<br>      <span class=\"hljs-keyword\">for</span> d <span class=\"hljs-keyword\">in</span> /usr/share/themes/*/metacity-1; <span class=\"hljs-keyword\">do</span><br>        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$d</span> | sed <span class=\"hljs-string\">&#x27;s:/usr/share/themes/::&#x27;</span> | sed <span class=\"hljs-string\">&#x27;s:/metacity-1::&#x27;</span><br>      <span class=\"hljs-keyword\">done</span><br>    )<br>  )<br>&#125;<br><br><span class=\"hljs-keyword\">while</span> [ $? = 0 ]; <span class=\"hljs-keyword\">do</span><br><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$selection</span>&quot;</span> == <span class=\"hljs-string\">&quot;Compiz GWD default&quot;</span> ]; <span class=\"hljs-keyword\">then</span><br>  gsettings <span class=\"hljs-built_in\">set</span> org.gnome.desktop.wm.preferences theme <span class=\"hljs-string\">&quot;&quot;</span><br><span class=\"hljs-keyword\">elif</span> [ <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$selection</span>&quot;</span> != <span class=\"hljs-string\">&quot;&quot;</span> ]; <span class=\"hljs-keyword\">then</span><br>  gsettings <span class=\"hljs-built_in\">set</span> org.gnome.desktop.wm.preferences theme <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$selection</span>&quot;</span><br><span class=\"hljs-keyword\">fi</span><br>main_window<br><span class=\"hljs-keyword\">done</span><br><br>IFS=<span class=\"hljs-variable\">$SAVEIFS</span><br></code></pre></td></tr></table></figure>\n\n<p>执行以下命令设置窗口按钮:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">gsettings <span class=\"hljs-built_in\">set</span> org.gnome.desktop.wm.preferences button-layout <span class=\"hljs-string\">&quot;&#x27;menu:minimize,maximize,close&#x27;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常规选项\"><a href=\"#常规选项\" class=\"headerlink\" title=\"常规选项\"></a>常规选项</h3><p>完成上述设置后, 运行 <code>CompizConfig设置管理器</code>.</p>\n<p>常规 -&gt; 常规选项 -&gt; 桌面尺寸 -&gt; 调整虚拟桌面 (工作区) 数量.</p>\n<p>常规 -&gt; 常规选项 -&gt; 功能键 :<br>设置 “关闭窗口” : <Super> q,<br>设置 “窗口菜单” : <Super> space,<br>设置 “显示窗口” : <Ctrl><Alt>d</p>\n<h3 id=\"Desktop-Wall\"><a href=\"#Desktop-Wall\" class=\"headerlink\" title=\"Desktop Wall\"></a>Desktop Wall</h3><p>桌面  -&gt; 勾选“Desktop Wall” -&gt; 点击“Desktop Wall” -&gt; 绑定 -&gt; 修改 Move Left/Right/Up/Down 的快捷键为 <Super> Left/Right/Up/Down</p>\n<h3 id=\"Expo\"><a href=\"#Expo\" class=\"headerlink\" title=\"Expo\"></a>Expo</h3><p>Expo 是一个虚拟桌面展示的插件.</p>\n<p>桌面 -&gt; Expo -&gt; 绑定 -&gt; Expo Key 设置为 <Super> Tab -&gt; Expo Corner/Edge 设置为 TopRight</p>\n<h3 id=\"Grid\"><a href=\"#Grid\" class=\"headerlink\" title=\"Grid\"></a>Grid</h3><p>窗口管理 -&gt; Grid -&gt; Put Left/Right/Top/Bottom Key 设置为 <Super><Shift> Left/Right/Up/Down</p>\n<h3 id=\"Shift-Switcher\"><a href=\"#Shift-Switcher\" class=\"headerlink\" title=\"Shift Switcher\"></a>Shift Switcher</h3><p>窗口管理  -&gt; Shift Switcher -&gt; 设置 Initiate Screen Corner/Edge 为 BottomRight -&gt; 设置 Next/Previous Window Key 为 <Alt>/<Shift><Alt> Tab</p>\n<h3 id=\"移动窗口\"><a href=\"#移动窗口\" class=\"headerlink\" title=\"移动窗口\"></a>移动窗口</h3><p>窗口管理 -&gt; 移动窗口 -&gt; 常规 -&gt; 设置 启动窗口移动 为 <Super> m</p>\n<h3 id=\"放置窗口\"><a href=\"#放置窗口\" class=\"headerlink\" title=\"放置窗口\"></a>放置窗口</h3><p>窗口管理 -&gt; 放置窗口 -&gt; 常规 -&gt; 安置模式 -&gt; 选择居中</p>\n<h3 id=\"工作区\"><a href=\"#工作区\" class=\"headerlink\" title=\"工作区\"></a>工作区</h3><p>工具 -&gt; 工作区 -&gt; 勾选 Qt Window Fix, Java Window Fix, Firefox Menu Fix</p>\n<h3 id=\"Viewport-Switcher\"><a href=\"#Viewport-Switcher\" class=\"headerlink\" title=\"Viewport Switcher\"></a>Viewport Switcher</h3><p>桌面 -&gt; Viewport Switcher -&gt; Go to specific viewport -&gt; 设置 Switch to Viewport 1-8 为 <Super> 1-8</p>\n"},{"title":"openSUSE","url":"/2022/05/17/19-opensuse/","content":"<p>最近, 有点想转向 openSUSE 了, 究其原因, 大概是因为毕竟 arch 是一个没有有实体组织支持的发行版, 实际上稳定性确实是堪忧. 这不仅是系统的稳定性, 还有社区的稳定性.</p>\n<p><s>当然可能最主要的原因还是闲的</s></p>\n<h1 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h1><p>从去年 10 月开始使用 arch, 到现在也有半年多了, 经历了那么长时间, arch 也越来越顺手.<br>如果要从 arch 到 openSUSE 的话, 需要在 openSUSE 上实现的有 : </p>\n<ol>\n<li><code>git</code> 这个必不可少啦</li>\n<li><code>nvim</code> 必须把 neovim 现在的配置迁移到 openSUSE 上</li>\n<li><code>latex</code> 现在写作已经离不开 latex 了, 要把自定义模板及与 vim 结合的配置迁移到 openSUSE 上.<ul>\n<li>zathura 预览/查看 pdf</li>\n</ul>\n</li>\n<li><code>hexo</code> 撰写博客必备</li>\n<li><code>python</code> 这个不用说了, 不过 SUSE 自带 python, 虽然是 3.8</li>\n<li><code>java</code> 需要安装 Oracle JDK 8 和 Oracle JDK 11, 顺便把 openjdk 卸载掉, 这个会比较麻烦</li>\n<li><code>croc</code> 用来传输文件</li>\n<li><code>aria2</code> 用来下载文件</li>\n<li>RSS 阅读器</li>\n<li><code>wine</code> : qq, office</li>\n<li><code>wps office</code> 如果 wine 无法安装</li>\n<li>文件压缩/解压缩软件</li>\n<li>因为 openSUSE 不提供音视频解码器, 因此需要额外安装</li>\n<li><code>clash</code> 不必多说</li>\n<li><a href=\"https://github.com/patjak/facetimehd/wiki/Installation#get-started-on-opensuse\">Macbook 的摄像头驱动</a></li>\n<li>nerd fonts</li>\n<li>腾讯会议 (x)</li>\n<li>idea/eclipse : java 开发环境 (x)</li>\n<li>快捷键设置</li>\n<li>亮度控制</li>\n<li>蓝牙 - 连接鼠标</li>\n<li>网易云音乐客户端 - yesplaymusic (好像已经有人打包了?) (x)</li>\n<li>Google Chrome 浏览器</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装之前记得把分区删掉</p>\n<h1 id=\"更换镜像源及添加软件源\"><a href=\"#更换镜像源及添加软件源\" class=\"headerlink\" title=\"更换镜像源及添加软件源\"></a>更换镜像源及添加软件源</h1><p><s>是谁说的官方源一点都不慢的</s></p>\n<p>按照<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/opensuse/\">清华镜像站上的指导</a>, 禁用官方源然后添加清华源 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 禁用官方源</span><br>sudo zypper mr -da<br><span class=\"hljs-comment\"># 添加清华镜像源</span><br>sudo zypper ar -cfg <span class=\"hljs-string\">&#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/tumbleweed/repo/oss/&#x27;</span> tuna-oss<br>sudo zypper ar -cfg <span class=\"hljs-string\">&#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/tumbleweed/repo/non-oss/&#x27;</span> tuna-non-oss<br></code></pre></td></tr></table></figure>\n\n<p>Tumbleweed 安装后默认会启用 oss, non-oss, update, 3 个官方软件源, 其中 oss 及 non-oss 源用于发布 Tumbleweed 的每日构建快照, 快照中已包含系统所需的全部软件包及更新. update 源仅用于推送临时安全补丁, 如当日快照已发布但仍有临时安全补丁时, 会首先推送至 update 源, 并在次日合入下一版快照. 由于 update 源存在较强的时效性, 上游镜像并未同步 update 源, TUNA 亦无法提供该源的镜像. 禁用 update 源并不会使系统缺失任何功能或安全更新, 仅会导致极少数更新晚些推送, 如有需求可以重新启用官方 update 源 (摘抄自清华镜像站).</p>\n<p>删除安装硬件所带来的源, 同时添加清华 packman 镜像源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper ar -cfg <span class=\"hljs-string\">&#x27;https://mirrors.tuna.tsinghua.edu.cn/packman/suse/openSUSE_Tumbleweed/&#x27;</span> tuna-packman<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"无线网络\"><a href=\"#无线网络\" class=\"headerlink\" title=\"无线网络\"></a>无线网络</h1><p>由于使用的是 Macbook, 因此需要安装 Broadcom 的驱动 :<br>添加 packman 源后在 yast 中添加 <code>broadcom-wl</code>.</p>\n<h1 id=\"一些必要软件\"><a href=\"#一些必要软件\" class=\"headerlink\" title=\"一些必要软件\"></a>一些必要软件</h1><ul>\n<li>git</li>\n<li>clash</li>\n<li>neovim<br>  对于 SunnyVim 的配置, 在 arch 下需要将 vimsnippets.py 放置于 <code>/usr/lib/python3.x</code> 下, 但是在 openSUSE 下需要将其放置在 <code>/usr/lib/python3.x/site-packages/</code> 下才能生效.</li>\n<li>nodejs-default</li>\n<li>yarn</li>\n<li>conky</li>\n<li>fzfj</li>\n<li>bat</li>\n<li>ncdu</li>\n<li>typescript</li>\n</ul>\n<h1 id=\"Chrome-安装\"><a href=\"#Chrome-安装\" class=\"headerlink\" title=\"Chrome 安装\"></a>Chrome 安装</h1><ol>\n<li><p>引入 google Chrome 软件源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper ar http://dl.google.com/linux/chrome/rpm/stable/x86_64 Google-Chrome<br></code></pre></td></tr></table></figure></li>\n<li><p>下载密钥文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">wget https://dl.google.com/linux/linux_signing_key.pub<br>sudo rpm --import linux_signing_key.pub<br></code></pre></td></tr></table></figure></li>\n<li><p>打开 yast 安装 Chrome<br>或者运行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper install google-chrome-stable<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>安装 Chrome 后, 运行 <code>google-chrome-stable --proxy-server=&quot;127.0.0.1:7890&quot;</code></p>\n<h1 id=\"安装解码器\"><a href=\"#安装解码器\" class=\"headerlink\" title=\"安装解码器\"></a>安装解码器</h1><p>在安装了 packman 源后, 执行如下命令 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper install --from tuna-packman ffmpeg gstreamer-plugins-&#123;good,bad,ugly,libav&#125; libavcodec-full<br></code></pre></td></tr></table></figure>\n\n<p>另外, 如果要使用 vlc, 还需要安装 <code>vlc-codecs</code>, 因为如果采用的 packman 是镜像源的话, 会有部分依赖需要从原 packman 等处下载, 因此推荐使用 YaST 安装.</p>\n<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<h1 id=\"安装-fuse-exFat\"><a href=\"#安装-fuse-exFat\" class=\"headerlink\" title=\"安装 fuse-exFat\"></a>安装 fuse-exFat</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper install fuse-exfat<br></code></pre></td></tr></table></figure>\n\n<p>=======<br>另外, 还需要安装 <code>xf86-video-indel</code> 或者 <code>xf86-video-amdgpu</code></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>fde6bd8e0106fcd7290218413389890ae9d54450</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1 id=\"更换-fcitx5-更换皮肤及添加词库-amp-字体\"><a href=\"#更换-fcitx5-更换皮肤及添加词库-amp-字体\" class=\"headerlink\" title=\"更换 fcitx5 更换皮肤及添加词库 &amp; 字体\"></a>更换 fcitx5 更换皮肤及添加词库 &amp; 字体</h1><p>SUSE 官方源中没有 fcitx5 皮肤, 痕迹<br>在 github 上找到了一款比较不错的皮肤</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/thep0y/fcitx5-themes --depth=1<br></code></pre></td></tr></table></figure>\n<p>克隆到本地后, 将项目中的以下文件夹拷贝到 <code>$HOME/.local/share/fcitx5/themes/</code> 下 (如果没有这个文件夹则自行创建)</p>\n<ul>\n<li>spring</li>\n<li>summer</li>\n<li>autumn</li>\n<li>winter</li>\n<li>green</li>\n<li>transparent-green</li>\n</ul>\n<p>如果要添加 <a href=\"https://github.com/felixonmars/fcitx5-pinyin-zhwiki\">zhwiki</a>词库, 则从其 github 仓库中下载最新版本的 zhwiki.dict 文件, 并将其复制到 <code>~/.local/share/fcitx5/pinyin/dictionaries/</code></p>\n<p>对于字体, 首先是中华书局宋体, 然后是<a href=\"https://github.com/lxgw/LxgwWenKai/\">霞鹜文楷</a>, 思源宋体. 思源黑体倒是自带.<br>霞鹜文楷还在开发中, SUSE 也不像 Arch 那样有 AUR 很方便更新, 因此先不考虑安装.</p>\n<h1 id=\"卸载不必要软件\"><a href=\"#卸载不必要软件\" class=\"headerlink\" title=\"卸载不必要软件\"></a>卸载不必要软件</h1><p>采用 kde 版本的 Tumbleweed, 有很多东西是不需要的.<br><s>比如麻将</s>.</p>\n<h1 id=\"latex-安装\"><a href=\"#latex-安装\" class=\"headerlink\" title=\"latex 安装\"></a>latex 安装</h1><p>和 arch 下相比, 在 openSUSE 下使用 latex 的配置过程要麻烦些</p>\n<ol>\n<li><p>安装 <code>texlive</code> 包</p>\n</li>\n<li><p>安装以下包</p>\n<ul>\n<li>texlive-ctex</li>\n<li>texlive-anyfontsize</li>\n<li>texlive-gbt7714</li>\n<li>texlive-silence</li>\n<li>texlive-lstaddons</li>\n<li>texlive-warpcol</li>\n</ul>\n</li>\n<li><p>创建文件夹 <code>/usr/local/share/texmf/tex/local/</code>, 将自定义 cls 文件放入其中 (比如现在用的 <code>coronanote.cls</code> 和 <code>coronareport.cls</code>)</p>\n</li>\n<li><p>创建文件 <code>/usr/local/share/texmf/ls-R</code>, 其内容为 :</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">% ls-R -- filename database for kpathsea; do not change this line.<br><br>./:<br>.:<br>ls-R<br>tex<br><br>./tex:<br>local<br><br>./tex/local:<br>coronanote.cls<br>coronareport.cls<br></code></pre></td></tr></table></figure>\n<p> 创建之后, 修改其权限与所属用户组 :</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">chmod</span> 664 ./ls-R<br><span class=\"hljs-built_in\">chown</span> root:mktex ./ls-R<br></code></pre></td></tr></table></figure>\n<p> 然后执行以下命令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">texhash<br></code></pre></td></tr></table></figure>\n<p> 之后, 我的 Makefile 文件就能运行了</p>\n</li>\n</ol>\n<p>不得不说, 确实比 Arch 下麻烦了不少, 好多包需要自己装.</p>\n<h1 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h1><ul>\n<li>Java IDE : JetBrains Intellij Idea</li>\n<li>数据库管理 : Antares<ul>\n<li><a href=\"https://github.com/antares-sql/antares\">Repo</a></li>\n<li><a href=\"https://raw.githubusercontent.com/antares-sql/antares/master/assets/appx/Square44x44Logo.targetsize-256_altform-unplated.png\">icon</a></li>\n</ul>\n</li>\n<li>数据库模式设计 : Mysql Workbench <code>sudo zypper install mysql-workbench</code></li>\n</ul>\n<h1 id=\"安装一些无法通过官方源获取的软件\"><a href=\"#安装一些无法通过官方源获取的软件\" class=\"headerlink\" title=\"安装一些无法通过官方源获取的软件\"></a>安装一些无法通过官方源获取的软件</h1><h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>hexo : 博客<br>    <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo npm install -g hexo<br>sudo npm install -g hexo-generator-index<br></code></pre></td></tr></table></figure></p>\n<h2 id=\"croc\"><a href=\"#croc\" class=\"headerlink\" title=\"croc\"></a>croc</h2><p>下载 <a href=\"https://github.com/schollz/croc/releases/latest\">croc binary release 版本</a><br>解压即用, 但是有点小问题, 传送大文件时不太好使.</p>\n<h2 id=\"icalingua\"><a href=\"#icalingua\" class=\"headerlink\" title=\"icalingua\"></a>icalingua</h2><p>可以在<a href=\"https://github.com/Icalingua-plus-plus/Icalingua-plus-plus/releases\">icalingua++ release</a> 页面找到 appimage 版本.</p>\n<h2 id=\"YesPlayMusic\"><a href=\"#YesPlayMusic\" class=\"headerlink\" title=\"YesPlayMusic\"></a>YesPlayMusic</h2><p>网易云第三方客户端, 也可以在其项目 <a href=\"https://github.com/qier222/YesPlayMusic/releases\">release 页面</a>下载 appimage 版本</p>\n<h2 id=\"lazygit\"><a href=\"#lazygit\" class=\"headerlink\" title=\"lazygit\"></a>lazygit</h2><p>已经彻底懒了 :P<br>下载 <a href=\"https://github.com/jesseduffield/lazygit/releases\">lazygit binary release 版本</a><br>可以直接使用</p>\n<h2 id=\"ueberzug\"><a href=\"#ueberzug\" class=\"headerlink\" title=\"ueberzug\"></a>ueberzug</h2><p>不是吧这也没有 ? </p>\n<p><b>更换 pip 源</b> : <code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p>\n<p>可以使用 pip 安装 : <code>sudo pip install ueberzug</code>, 使用 sudo 可为全局安装<br>在此之前需要先安装 gcc, 并且还需要安装缺少 C 语言库 :</p>\n<ul>\n<li>python38-devel</li>\n<li>libX11-devel</li>\n<li>libXext-devel<br>这些库就不删了, 或许以后还能有用.</li>\n</ul>\n<h2 id=\"clitrans\"><a href=\"#clitrans\" class=\"headerlink\" title=\"clitrans\"></a>clitrans</h2><p>这个或许也可以不装, 不过也不是很大.<br>下载 <a href=\"https://github.com/wfxr/clitrans/releases\">clitrans</a>, 解压到相应路径.</p>\n<h2 id=\"cloc\"><a href=\"#cloc\" class=\"headerlink\" title=\"cloc\"></a>cloc</h2><p>统计代码行数, 用的不多, 不过也不大.<br><a href=\"https://github.com/AlDanial/cloc/releases\">cloc release</a></p>\n<hr>\n<h1 id=\"Java-设置\"><a href=\"#Java-设置\" class=\"headerlink\" title=\"Java 设置\"></a>Java 设置</h1><p>openSUSE 默认安装的是 openJdk, 这很正常. 但是因为没有了 AUR, 需要手动安装 java 了.</p>\n<p>首先从 Oracle 官网上下载 jdk8 和 jdk11 的 .tar.gz 压缩包, 将其解压到 <code>$HOME/Software/java/</code> 下. 我现在下载的是 <code>jdk-11.0.15.1</code> 和 <code>jdk1.8.0_333</code>, 那么路径就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">$HOME/Software/java/jdk1.8.0_333<br>$HOME/Software/java/jdk-11.0.15.1<br></code></pre></td></tr></table></figure>\n\n<p>设置一下 <code>.bashrc</code> 和 <code>.config/fish/config.fish</code>, 根据<code>$HOME/.java_status</code> 中的值自动选择 jdk8 和 jdk11.</p>\n<h1 id=\"显卡驱动-intel\"><a href=\"#显卡驱动-intel\" class=\"headerlink\" title=\"显卡驱动 (intel)\"></a>显卡驱动 (intel)</h1><p>原来一直没装显卡驱动, 以至于全靠 CPU 在顶, 光开个 KDE 桌面就 CPU 占用 10%…</p>\n<p>参照 archwiki (<s>ArchWiki yyds</s>), 安装 <code>xf86-video-intel</code> 包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper install xf86-video-intel<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"FacetimeHD-驱动\"><a href=\"#FacetimeHD-驱动\" class=\"headerlink\" title=\"FacetimeHD 驱动\"></a>FacetimeHD 驱动</h1><p>安装 <code>facetimehd-kmp-default</code> 和 <code>facetimehd-firmware</code> 这两个包.</p>\n<p>安装成功后, 可以检查是否有加载 <code>facetimehd</code> 模块 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">lsmod | grep facetimehd<br></code></pre></td></tr></table></figure>\n<p>如果没有加载, 则手动加载该模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo modprobe facetimehd<br></code></pre></td></tr></table></figure>\n\n<p>可以安装 <code>kamoso</code> 来测试能否正常拍照.</p>\n<p><s>反转了</s></p>\n<p>通过 <code>modprobe</code> 命令加载的内核模块只是暂时生效, 因此需要配置开机自动加载内核模块.</p>\n<p>按照 <a href=\"https://zh.opensuse.org/SDB:%E8%AE%A9%E7%B3%BB%E7%BB%9F%E5%9C%A8%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97\">SUSE Wiki</a> 上的指导, 尝试了修改 <code>/etc/sysconfig/kernel</code> (事实上我这里没有这个文件, 因此是自己创建的), 没用. YaST 的 sysconfig/System/Kernel 里也没有 <code> MODULES_LOADED_ON_BOOT</code> 这一项.</p>\n<p>最后在 <code>/etc/modules-load.d/</code> 文件夹下创建了 <code>modules.conf</code> 文件, 并将 <code>facetimehd</code> 写入, 重启后可以自动加载 <code>facetimehd</code> 模块了.</p>\n<p><code>modules.conf</code> 中只需要写 <code>facetimehd</code> 就行, 其他的一概不需要</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">facetimehd<br></code></pre></td></tr></table></figure>\n\n<p><s>另外, 按照 SUSE Wiki 上的说法, <code>modules.conf</code> 这个文件叫什么名其实并不重要</s>.</p>\n<h1 id=\"使用-st-终端\"><a href=\"#使用-st-终端\" class=\"headerlink\" title=\"使用 st 终端\"></a>使用 st 终端</h1><p>不得不说, st 仍然是我目前能找到的各方面特性最好的终端.<br>但是在 SUSE 上编译 st 需要安装很多包…</p>\n<ul>\n<li>fontconfig-devel</li>\n<li>harfbuzz-devel</li>\n<li>libXft-devel</li>\n<li>posix_cc 这个不是必需的, 只是懒得改 Makefile 了</li>\n<li>ncurses-devel</li>\n</ul>\n<h1 id=\"激活-Linux\"><a href=\"#激活-Linux\" class=\"headerlink\" title=\"激活 Linux\"></a>激活 Linux</h1><p><s>怎么会有人那么无聊啊</s><br><a href=\"https://github.com/MrGlockenspiel/activate-linux\">项目主页</a></p>\n<p>需要安装的依赖 :</p>\n<ul>\n<li>cairo-devel (同时带来一堆依赖包)</li>\n<li>libXinerama-devel</li>\n<li>libXfixes-devel</li>\n</ul>\n<h1 id=\"KDE-设置\"><a href=\"#KDE-设置\" class=\"headerlink\" title=\"KDE 设置\"></a>KDE 设置</h1><p>KDE 有一些东西还是需要设置的<br><s>有一说一 KDE 的设置有点拉, 让人摸不着头脑</s></p>\n<h2 id=\"鼠标单击打开文件\"><a href=\"#鼠标单击打开文件\" class=\"headerlink\" title=\"鼠标单击打开文件\"></a>鼠标单击打开文件</h2><p>设置 -&gt; 工作区行为 -&gt; 常规行为 -&gt; 点击文件或文件夹时</p>\n<h2 id=\"设置锁屏\"><a href=\"#设置锁屏\" class=\"headerlink\" title=\"设置锁屏\"></a>设置锁屏</h2><p>设置 -&gt; 工作区行为 -&gt; 常规行为 -&gt; 锁屏</p>\n<h2 id=\"禁用自动登录\"><a href=\"#禁用自动登录\" class=\"headerlink\" title=\"禁用自动登录\"></a>禁用自动登录</h2><p>KDE 默认会开启用户自动登录, 也就是说用户不需要输入密码就能登录, 那我还设置密码干啥…</p>\n<p>设置 -&gt; 开机与关机 -&gt; 登录屏幕 (SDDM) -&gt; 行为设置</p>\n<h2 id=\"KDE-Wallet\"><a href=\"#KDE-Wallet\" class=\"headerlink\" title=\"KDE Wallet\"></a>KDE Wallet</h2><p><s>KDE Wallet 纯纯逆天</s><br>我就是想连接个 wifi, 真 tm 麻烦.</p>\n<ol>\n<li>使用传统方式, 不要使用 GPG ;</li>\n<li>钱包名 kdewallet</li>\n<li>禁用自动登录, 如果想用自动登录, 那就把钱包密码设为空.</li>\n</ol>\n<p>纯纯逆天, 原来搞了那么久, 不能自动链接 wifi 的原因是设置了自动登录…</p>\n<p>据我猜想, 将 kdewallet 的密码设置与用户登录密码相同, 就是为了在登录时输入密码后同步解锁 kdewallet, 但是自动登录没有输入密码的过程, 所以就必须再手输一遍密码…</p>\n<p><s>纯纯逆天</s></p>\n<h2 id=\"托盘图标模糊\"><a href=\"#托盘图标模糊\" class=\"headerlink\" title=\"托盘图标模糊\"></a>托盘图标模糊</h2><p><a href=\"https://wiki.archlinux.org/title/KDE_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E4%B8%8A%E7%9A%84%E5%9B%BE%E6%A0%87%E6%A8%A1%E7%B3%8A\">ArchWiki YYDS!</a></p>\n<p>KDE 下一些应用 (如 icalingua, yesplaymusic) 的托盘图标非常模糊,<br>根据 arch wiki 上的描述, 需要安装 <code>libappindicator</code>, 在 SUSE 上, 执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper install libappindicator3-1<br></code></pre></td></tr></table></figure>\n<p>安装完后启动应用就可以看到清晰的托盘图标了.</p>\n<h2 id=\"Dolphin-添加右键菜单\"><a href=\"#Dolphin-添加右键菜单\" class=\"headerlink\" title=\"Dolphin 添加右键菜单\"></a>Dolphin 添加右键菜单</h2><p>如果要在 Dolphin 中添加自定义右键菜单, 需要添加自定义 desktop 文件.</p>\n<p>例如, 要添加右键点击种子文件使用 aria2 下载, 则编辑以下文件 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs desktop\">[Desktop Entry]<br>Type=Service<br>ServiceTypes=KonqPopupMenu/Plugin<br>MimeType=application/x-bittorrent<br>Actions=download<br>Icon=download<br><br>[Desktop Action download]<br>Name=使用 aria2 下载<br>Exec=aria2 &quot;%f&quot;<br>Icon=download<br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>MimeType</code> 可以使用 <code>file --mime-type 文件名</code> 查看.<br>至于 <code>%f</code>, <code>%F</code>, 可以在 <a href=\"https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#exec-variables\">Freedesktop Desktop Entry Specification-&gt; The Exec key</a> 中查询.</p>\n<p>这里记载一下 :</p>\n<table>\n<thead>\n<tr>\n<th>字符串</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>%f</code></td>\n<td>单个文件及其路径</td>\n</tr>\n<tr>\n<td><code>%F</code></td>\n<td>所有选定的文件</td>\n</tr>\n<tr>\n<td><code>%u</code></td>\n<td>单个 url, 本地文件会被转换成 <code>file:urls</code> 或文件路径</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>多个 url</td>\n</tr>\n</tbody></table>\n<p>将以上文件命名为 <code>download.desktop</code>, 放到 <code>~/.local/share/kservices5/ServiceMenus/</code> 中.</p>\n<p>具体的指导可以看<a href=\"https://develop.kde.org/docs/extend/dolphin/service-menus/\">这里</a></p>\n<h2 id=\"Akregator-设置阅读背景\"><a href=\"#Akregator-设置阅读背景\" class=\"headerlink\" title=\"Akregator 设置阅读背景\"></a>Akregator 设置阅读背景</h2><p>当切换到暗色模式时, Akregator 的阅读背景还是亮色的…</p>\n<p>到 <a href=\"https://gist.github.com/intika/34bd6d30149c707ba0407a36ef8dceb7\">intika/combinedview</a>, 下载 zip 文件, 将其解压到 <code>$HOME/.local/share/akregator/grantleetheme/5.2/</code> 下, 然后重启 Akregator 可以得到深色的阅读背景.</p>\n<h2 id=\"Ark-添加-7z-rar-支持\"><a href=\"#Ark-添加-7z-rar-支持\" class=\"headerlink\" title=\"Ark 添加 7z, rar 支持\"></a>Ark 添加 7z, rar 支持</h2><p>Ark 是 KDE 的默认解压工具, 但初始并不支持 7z 与 rar 格式.<br>为了支持 7z 类型, 需要安装 <code>p7zip</code> 与 <code>p7zip-full</code> 包.<br>为了支持 rar 类型, 需要安装 <code>rar</code>,<code>unrar</code> 与 <code>unar</code> 包.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper install p7zip p7zip-full rar unrar unar<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"任务切换器\"><a href=\"#任务切换器\" class=\"headerlink\" title=\"任务切换器\"></a>任务切换器</h1><p>这个东西比较乱, 直接在 快捷键-&gt; KWin 中设置是不行的.</p>\n<p>正确设置方法:<br>设置 -&gt; 窗口管理器 -&gt; 任务切换器 -&gt; 主窗口 -&gt; 可视化 -&gt; 选择缩略图并在下方配置快捷键 alt+tab/alt+shift+tab</p>\n<h1 id=\"Libre-Office-设置\"><a href=\"#Libre-Office-设置\" class=\"headerlink\" title=\"Libre Office 设置\"></a>Libre Office 设置</h1><p>Libre Office 现在已经很好用了, 所以我也就没有下载安装 WPS<br><s>除了没有微软的字体外</s></p>\n<p>我还是习惯用暗色模式, 但是 LO 跟随系统调整到暗色模式后, 编辑区域仍然是白色的, 很刺眼.</p>\n<p>解决方法是 : 工具 (Tools) -&gt; 选项 (Options) -&gt; LibreOffice -&gt; 应用程序颜色 -&gt; 配色方案, 选择 LibreOffice Dark</p>\n<p>另外还有, 默认使用的图标在暗色模式下很难分辨, 因此需要更换图标:<br>工具 (Tools) -&gt; 选项 (Options) -&gt; LibreOffice -&gt; 视图 (Views) -&gt; 图标样式, 推荐 Breeze (dark) (不是 Breeze (SVG+dark)).</p>\n<h1 id=\"快照\"><a href=\"#快照\" class=\"headerlink\" title=\"快照\"></a>快照</h1><h2 id=\"禁用已启动快照\"><a href=\"#禁用已启动快照\" class=\"headerlink\" title=\"禁用已启动快照\"></a>禁用已启动快照</h2><p>快照是个好东西, 可以用来恢复数据, 尤其是 Tumbleweed 滚动更新, 容易出现错误.<br>但是, 我的电脑存储空间十分滴珍贵 (总共 128 G), 使用快照就有点奢侈了, 因此还是禁用了吧.<br>在安装好 openSUSE Tumbleweed 后, 如果使用了默认设置且根分区 &gt; 16 G, 那么就会自动启用快照. <s>怪不得存储空间在不断变少</s></p>\n<p>Snapper 自动创建的快照有三种 :</p>\n<ol>\n<li>时间线快照</li>\n<li>安装快照</li>\n<li>管理快照</li>\n</ol>\n<p>按如下操作禁用这三种快照 :</p>\n<ol>\n<li><p>禁用时间线快照<br> <code>snapper -c 配置文件名 set-config &quot;TIMELINE_CREATE=no&quot;</code><br> 同样, 如果要启用时间线快照, 则执行 <code>snapper -c 配置文件名 set-config &quot;TIMELINE_CREATE=yes&quot;</code><br> 默认启动的快照配置名为 <code>root</code>.</p>\n</li>\n<li><p>禁用安装快照<br> 安装快照是在安装软件前后创建的快照, 可用于撤销软件包更改.</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 禁用安装快照</span><br>zypper remove snapper-zypp-plugin<br><span class=\"hljs-comment\"># 启用安装快照</span><br>zypper install snapper-zypp-plugin<br></code></pre></td></tr></table></figure>\n<p> <b>2022-05-27 19:07</b>: 放弃了, 还是启用安装快照吧, 也不要太在意空间…</p>\n</li>\n<li><p>禁用管理快照<br> 在 <code>/etc/sysconfig/yast2</code> 中将 <code>USE_SNAPPER</code> 设置为 <code>no</code><br> 同理, 如果要启用管理快照, 则将其设置为 <code>yes</code></p>\n</li>\n</ol>\n<h2 id=\"删除已有快照\"><a href=\"#删除已有快照\" class=\"headerlink\" title=\"删除已有快照\"></a>删除已有快照</h2><p>以 root 用户执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">snapper list<br></code></pre></td></tr></table></figure>\n<p>列出所有 <code>root</code> 配置下的快照</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">snapper delete 快照编号 <span class=\"hljs-comment\"># 如 snapper delete 15</span><br>snapper delete 快照编号范围 <span class=\"hljs-comment\"># 如 snapper delete 15-17</span><br></code></pre></td></tr></table></figure>\n\n<p>可以添加 <code>-s</code> 参数以在删除快照后立即释放可用空间.</p>\n<h2 id=\"手动创建快照\"><a href=\"#手动创建快照\" class=\"headerlink\" title=\"手动创建快照\"></a>手动创建快照</h2><p>以 root 用户运行 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用 root 配置创建快照</span><br>snapper create -t single -d <span class=\"hljs-string\">&quot;手动备份-1&quot;</span> <span class=\"hljs-comment\"># -t 是快照类型, 默认就是 single</span><br></code></pre></td></tr></table></figure>\n\n<p>更多见 <a href=\"https://zh.opensuse.org/SDB:Snapper_Tutorial\">Snapper Tutorial</a></p>\n"},{"title":"SUSE 使用过程中遇到的问题","url":"/2022/05/27/20-opensuse-problem-fix/","content":"<p><s>怎么感觉 openSUSE Thumbleweed 比 arch 还要不稳定</s></p>\n<p>这才几个周…就遇到了好几个问题…</p>\n<h1 id=\"Latexmk-奇怪地寄掉\"><a href=\"#Latexmk-奇怪地寄掉\" class=\"headerlink\" title=\"Latexmk 奇怪地寄掉\"></a>Latexmk 奇怪地寄掉</h1><p>不知道更新了啥, Latexmk 突然寄掉了, 还好还是有快照的.</p>\n<p>回滚了之后, 发现执行 Latexmk 编译 tex 文件时, 会输出以下报错 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">mktexfmt [ERROR]: -user mode but path setup is -sys <span class=\"hljs-built_in\">type</span>, bailing out<br></code></pre></td></tr></table></figure>\n\n<p>在 <a href=\"https://bugzilla.opensuse.org/show_bug.cgi?id=1074128\">SUSE BUG 页面</a> 找到了相关解决方法 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">su<br><span class=\"hljs-built_in\">mkdir</span> /run/texlive<br><span class=\"hljs-built_in\">touch</span> /var/run/texlive/run-hyphen<br><span class=\"hljs-built_in\">touch</span> /var/run/texlive/run-fmtutil.language<br><span class=\"hljs-built_in\">touch</span> /var/run/texlive/run-fmtutil.refresh<br>/usr/share/texmf/texconfig/update<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"摄像头突然寄掉\"><a href=\"#摄像头突然寄掉\" class=\"headerlink\" title=\"摄像头突然寄掉\"></a>摄像头突然寄掉</h1><p>不知为何摄像头突然寄掉了, 重装 facetimehd 又好了…</p>\n<h1 id=\"播放视频-CPU-占用过高\"><a href=\"#播放视频-CPU-占用过高\" class=\"headerlink\" title=\"播放视频 CPU 占用过高\"></a>播放视频 CPU 占用过高</h1><p>不知为何, 使用 firefox 播放视频时 CPU 占用能占到 40% 甚至更多, 有时候甚至能占到 70%.<br>这也太恐怖了.<br>即便是使用 vlc 播放本地视频, CPU 也能占到 20-30%.</p>\n<p>在 firefox 地址栏中输入 <code>about: config</code>, 然后搜索选项 <code>media.ffmpeg.vaapi.enabled</code>, 设置为 <code>true</code>;<br>搜索选项 <code>media.ffvpx.enabled</code>, 设置为 <code>false</code>.</p>\n<p>vlc 中, 工具-&gt;设置-&gt;输入/编解码器-&gt;硬件加速解码</p>\n<p>但是实际上经过实测, 即便经过如上设置也没有用, 一旦播放视频 CPU 占用就高居不下.</p>\n<p>安装 <code>intel-gpu-tools</code>, 实时查看 GPU 使用情况.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo zypper install intel-gpu-tools<br>sudo intel_gpu_top<br></code></pre></td></tr></table></figure>\n\n<p>可以看到, 在播放视频的时候, GPU 占用仅有 10% 左右… 离大谱.</p>\n<p>总之这个问题很难搞, 总得把它给解决了.</p>\n"},{"title":"Mybatis 自动生成主键并获取其值","url":"/2022/07/07/21-mybatis-auto-increment-key/","content":"<h1 id=\"AUTO-INCREMENT\"><a href=\"#AUTO-INCREMENT\" class=\"headerlink\" title=\"AUTO INCREMENT\"></a>AUTO INCREMENT</h1><p>在使用 MySQL 作为数据库时, 表中的主键可以设置为 <code>INT</code> 并设置 <code>AUTO_INCREMENT</code>, 例如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> role (<br>  `roleid` <span class=\"hljs-type\">INT</span> UNSIGNED <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `rolename` <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  <span class=\"hljs-keyword\">PRIMARY</span> KEY (`roleid`),<br>  <span class=\"hljs-keyword\">UNIQUE</span> INDEX `r_id_UNIQUE` (`roleid` <span class=\"hljs-keyword\">ASC</span>) VISIBLE,<br>  <span class=\"hljs-keyword\">UNIQUE</span> INDEX `r_name_UNIQUE` (`rolename` <span class=\"hljs-keyword\">ASC</span>) VISIBLE)<br></code></pre></td></tr></table></figure>\n\n<p>此时, 向表中插入项时可以不指定主键, 其主键会自动生成, 依次加一.</p>\n<p>因此, 可以将该字段设置为 <code>UNSIGNED</code>, 以获得更大的主键范围.</p>\n<p>此时, 向数据库中插入一条记录可以使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> role(rolename) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;管理员&#x27;</span>);<br><span class=\"hljs-comment\">-- 或者</span><br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> role(roleid, rolename) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-keyword\">null</span>, <span class=\"hljs-string\">&#x27;管理员&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"MyBatis-中使用-AUTO-INCREMENT-并获取生成的主键\"><a href=\"#MyBatis-中使用-AUTO-INCREMENT-并获取生成的主键\" class=\"headerlink\" title=\"MyBatis 中使用 AUTO_INCREMENT 并获取生成的主键\"></a>MyBatis 中使用 AUTO_INCREMENT 并获取生成的主键</h1><p>在项目中, 可以通过如下方法使用 <code>AUTO_INCREMENT</code>, 例如要实现上述的 sql 插入语句, 则可以编写如下数据交换类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span> <span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RoleDto</span> &#123;<br>\t<span class=\"hljs-keyword\">private</span> Integer roleId;<br>\t<span class=\"hljs-keyword\">private</span> String roleName;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当前要向数据库中插入 “ 管理员 ” 这一条记录, 则有一个 <code>RoleDto</code> 的实例 <code>roleDto</code>, 其属性为 <code>roleDto.roleName = &quot;管理员&quot;</code>, <code>roleDto.roleId = null</code>.</p>\n<p>假设持久层的接口名为 <code>com.xjtu.example.role.dao.RoleDao</code>, 其定义为 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.xjtu.example.role.dao.RoleDao;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">RoleDao</span> &#123;<br>\t<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addRole</span><span class=\"hljs-params\">(RoleDto roleDto)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其对应的 xml 文件如下 :</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">mapper</span> <span class=\"hljs-keyword\">PUBLIC</span> <span class=\"hljs-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"hljs-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">&quot;com.xjtu.example.role.dao.RoleDao&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 添加新的用户 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">insert</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;addRole&quot;</span> <span class=\"hljs-attr\">useGeneratedKeys</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">keyProperty</span>=<span class=\"hljs-string\">&quot;roleId&quot;</span> <span class=\"hljs-attr\">keyColumn</span>=<span class=\"hljs-string\">&quot;roleid&quot;</span>&gt;</span><br>        insert into role (roleid, rolename)<br>        values(#&#123;roleId&#125;, #&#123;userName&#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">insert</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在 <code>insert</code> 条目中设置 <code>useGeneratedKeys = true</code>, 并设置 <code>keyProperty</code> 与 <code>keyColumn</code>  的值, 其中 <code>keyProperty</code> 对应交换类 <code>RoleDto</code> 的属性名, <code>keyColumn</code> 对应数据库中 <code>Role</code> 表中的列名.</p>\n<p>因为传入的 <code>roleDto</code> 中, 属性 <code>roleId</code> 是 <code>null</code>, 因此数据库会自动生成主键, 并且 MyBatis 会根据设置的属性名, 将生成的主键的值设置到 <code>keyProperty</code> 对应的属性中. 因此在执行完 <code>roleDao.addRole(roleDto)</code> 之后, 可以获取生成的主键的值:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">roleId</span> <span class=\"hljs-operator\">=</span> roleDto.getRoleId();<br></code></pre></td></tr></table></figure>\n","tags":["java"]},{"title":"Vue 跳转页面传参","url":"/2022/07/08/22-vue-param/","content":"<p>要在 vue 中跳转页面时传递参数, 首先需要引入 <code>useRoute</code> 与 <code>useRouter</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">import &#123;useRouter, useRoute&#125; from &#x27;vue-router&#x27;;<br>const route = useRoute();<br>const router = useRouter();<br></code></pre></td></tr></table></figure>\n\n<p>要从页面 A 跳转到页面 B, 并将参数 <code>userName</code> 传递给页面 B, 假设页面 A 的 <code>name</code> 是 <code>PageA</code>, 页面 B 的 <code>name</code> 是 <code>PageB</code>, 则在页面 A 中可以如下方法传递参数并跳转页面:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">import &#123;useRouter, useRoute&#125; from &#x27;vue-router&#x27;;<br><br>const router = useRouter();<br>const userName = ref(&quot;Corona&quot;);<br><br>router.push(&#123;<br>\tname: &#x27;PageB&#x27;,<br>\tquery: &#123;<br>\t\tuserName: userName.value;<br>\t&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>在页面 B 中以如下方法获取传递的参数 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs vue\">import &#123;useRouter, useRoute&#125; from &#x27;vue-router&#x27;;<br>const route = useRoute();<br><br>const userName = route.query.userName;<br></code></pre></td></tr></table></figure>\n\n<p>页面 A 在跳转时传递的参数会在跳转后页面的地址栏中显示, 如果跳转时没有传递参数, 则在页面 B 中获取的 <code>route.query.userName</code> 会是 <code>null</code>.</p>\n","tags":["前端","vue"]},{"title":"Lambda 表达式 与 Stream API","url":"/2022/07/27/23-lambda-expression-and-stream-api/","content":"<h1 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h1><p>Lambda 表达式允许把一个函数作为一个方法的参数, lambda 表达式的语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">&#123; params &#125; -&gt; expression<br><span class=\"hljs-comment\">// 或</span><br>&#123; params &#125; -&gt; &#123; statements; &#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里给出一个简单的例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> test;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\t<span class=\"hljs-type\">Operation</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> () -&gt; <span class=\"hljs-number\">5</span>;<br>\t\ttest(x);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Operation f)</span> &#123;<br>\t\tSystem.out.println(f.execute());<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Operation</span> &#123;<br>\t\t<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">execute</span><span class=\"hljs-params\">()</span>;<br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * javac -d . Main.java</span><br><span class=\"hljs-comment\"> * java test.Main</span><br><span class=\"hljs-comment\"> * output: 5</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></td></tr></table></figure>\n\n<p>又如以下程序片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> Map&lt;String, Object&gt; <span class=\"hljs-title function_\">getBlogListOfConcernedUser</span><span class=\"hljs-params\">(PageParam pageParam, Integer userId)</span> &#123;<br>\t<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">queryAction</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">QueryAction</span>&lt;BlogVO&gt; &#123;<br>\t\t<span class=\"hljs-meta\">@Override</span><br>\t\t<span class=\"hljs-keyword\">public</span> List&lt;BlogVO&gt; <span class=\"hljs-title function_\">execute</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t\tList&lt;BlogVO&gt; blogVOList = blogHomeDao.getArticleListOfConcernedUser(userId);<br>\t\t\t<span class=\"hljs-keyword\">return</span> blogVOList;<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-type\">queryAction</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">queryAction</span>();<br>\t<span class=\"hljs-keyword\">return</span> Utils.getPage(pageParam, query);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用 lambda 表达式重写后, 可以简化为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> Map&lt;String, Object&gt; <span class=\"hljs-title function_\">getBlogListOfConcernedUser</span><span class=\"hljs-params\">(PageParam pageParam, Integer userId)</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> Utils.getPage(pageParam, () -&gt; blogHomeDao.getArticleListOfConcernedUser(userId));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><b>在 lambda 表达式中不能修改变量的值.</b></p>\n<hr>\n<h1 id=\"Stream-API\"><a href=\"#Stream-API\" class=\"headerlink\" title=\"Stream API\"></a>Stream API</h1><p><a href=\"https://www.jianshu.com/p/fcf7841e4540\">Stream API 详解</a></p>\n<h2 id=\"Stream-的创建\"><a href=\"#Stream-的创建\" class=\"headerlink\" title=\"Stream 的创建\"></a>Stream 的创建</h2><ol>\n<li>通过集合生成; <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; integerList = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>);<br>Stream&lt;Integer&gt; stream = integerList.stream();<br></code></pre></td></tr></table></figure></li>\n<li>通过数组生成; <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] intArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;;<br><span class=\"hljs-type\">IntStream</span> <span class=\"hljs-variable\">stream</span> <span class=\"hljs-operator\">=</span> Arrays.stream(intArr);<br></code></pre></td></tr></table></figure></li>\n<li>通过静态方法生成; <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">Stream&lt;Integer&gt; stream = Stream.of(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>);<br></code></pre></td></tr></table></figure></li>\n<li>通过文件生成; <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class=\"hljs-string\">&quot;data.txt&quot;</span>), Charset.defaultCharset())<br></code></pre></td></tr></table></figure></li>\n<li>通过函数生成. <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">Stream&lt;Integer&gt; stream = Stream.iterate(<span class=\"hljs-number\">0</span>, n -&gt; n + <span class=\"hljs-number\">2</span>).limit(<span class=\"hljs-number\">5</span>);<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"流的操作\"><a href=\"#流的操作\" class=\"headerlink\" title=\"流的操作\"></a>流的操作</h2><p>流的操作主要可以分为两种: <b>中间操作</b>与<b>终端操作</b></p>\n<h3 id=\"中间操作\"><a href=\"#中间操作\" class=\"headerlink\" title=\"中间操作\"></a>中间操作</h3><p>一个流可以后面跟随零个或多个中间操作. 其目的主要是打开流, 做出某种程度的数据映射/过滤, 然后返回一个新的流, 交给下一个操作使用. 这类操作都是惰性化的, 仅仅调用到这类方法, 并没有真正开始流的遍历, 真正的遍历需等到终端操作时, 常见的中间操作有下面即将介绍的filter、map等.</p>\n<h4 id=\"filter-筛选\"><a href=\"#filter-筛选\" class=\"headerlink\" title=\"filter 筛选\"></a>filter 筛选</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; intList = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>);<br>Stream&lt;Integer&gt; stream = intList.stream().filter(n -&gt; n &gt; <span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"distinct-去重\"><a href=\"#distinct-去重\" class=\"headerlink\" title=\"distinct 去重\"></a>distinct 去重</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">Stream&lt;Integer&gt; stream = intList.stream().distinct();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"limit-返回指定个数的元素\"><a href=\"#limit-返回指定个数的元素\" class=\"headerlink\" title=\"limit 返回指定个数的元素\"></a>limit 返回指定个数的元素</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 只返回前 3 个元素</span><br>Stream&lt;Integer&gt; stream = intList.stream().limit(<span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"skip-跳过指定个数元素\"><a href=\"#skip-跳过指定个数元素\" class=\"headerlink\" title=\"skip 跳过指定个数元素\"></a>skip 跳过指定个数元素</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 跳过前两个元素</span><br>Stream&lt;Integer&gt; stream = intList.stream().skip(<span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"map-流映射\"><a href=\"#map-流映射\" class=\"headerlink\" title=\"map 流映射\"></a>map 流映射</h4><p>将接收的元素转换为另一个元素.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; stringList = Arrays.asList(<span class=\"hljs-string\">&quot;Corona&quot;</span>, <span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-string\">&quot;World&quot;</span>, <span class=\"hljs-string\">&quot;Hello World&quot;</span>);<br>List&lt;Integer&gt; lengths = stringList.stream().map(String::length).collect(Collectors.toList());<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"元素匹配\"><a href=\"#元素匹配\" class=\"headerlink\" title=\"元素匹配\"></a>元素匹配</h4><p>匹配的结果是一个 boolean 值, 匹配成功返回 true; 匹配失败返回 false.</p>\n<ol>\n<li><p><code>allMatch</code> 匹配所有</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; stringList = Arrays.asList(<span class=\"hljs-string\">&quot;Corona&quot;</span>, <span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-string\">&quot;World&quot;</span>, <span class=\"hljs-string\">&quot;Hello World&quot;</span>);<br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">ok1</span> <span class=\"hljs-operator\">=</span> stringList.stream().allMatch(s -&gt; s.length() &gt; <span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n<p> 如上, 当 <code>stringList</code> 中的所有字符串长度都 &gt; 3 时才会返回 <code>true</code>.</p>\n</li>\n<li><p><code>anyMatch</code> 匹配一个</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; stringList = Arrays.asList(<span class=\"hljs-string\">&quot;Corona&quot;</span>, <span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-string\">&quot;World&quot;</span>, <span class=\"hljs-string\">&quot;Hello World&quot;</span>);<br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">ok2</span> <span class=\"hljs-operator\">=</span> stringList.stream().anyMatch(s -&gt; s.length() == <span class=\"hljs-number\">11</span>);<br></code></pre></td></tr></table></figure>\n<p> 如上, 当 <code>stringList</code> 中的有一个字符串长度为 11, 即返回 <code>true</code>.</p>\n</li>\n<li><p><code>noneMatch</code> 全不匹配</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; stringList = Arrays.asList(<span class=\"hljs-string\">&quot;Corona&quot;</span>, <span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-string\">&quot;World&quot;</span>, <span class=\"hljs-string\">&quot;Hello World&quot;</span>);<br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">ok3</span> <span class=\"hljs-operator\">=</span> stringList.stream().noneMatch(s -&gt; s.length() &lt; <span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n<p> 如上, 当 <code>stringList</code> 中没有字符串长度 &lt; 1 时返回 <code>true</code>.</p>\n</li>\n</ol>\n<h3 id=\"终端操作\"><a href=\"#终端操作\" class=\"headerlink\" title=\"终端操作\"></a>终端操作</h3><p>一个流有且只能有一个终端操作, 当这个操作执行后, 流就被关闭了, 无法再被操作. 因此一个流只能被遍历一次, 若想在遍历需要通过源数据在生成流. 终端操作的执行, 才会真正开始流的遍历. 如下面即将介绍的count、collect等.</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>假设现在有如下要求: 将从数据库中查询到的数据 (菜的列表) 进行处理:</p>\n<ol>\n<li>筛选出卡路里 &lt; 400 的菜;</li>\n<li>对筛选后的菜按卡路里值升序排序;</li>\n<li>获取排序后的菜的名字.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dish</span> &#123;<br>\t<span class=\"hljs-keyword\">private</span> String name;<br>\t<span class=\"hljs-keyword\">private</span> Integer calories;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>正常情况下, 会有如下流程:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> test;<br><span class=\"hljs-keyword\">import</span> test.dish.Dish;<br><span class=\"hljs-keyword\">import</span> java.util.*;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Dish&gt; dishList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>\t<span class=\"hljs-keyword\">static</span> &#123;<br>\t\tString[] dishNameList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;Apple&quot;</span>, <span class=\"hljs-string\">&quot;Banana&quot;</span>, <span class=\"hljs-string\">&quot;PineApple&quot;</span>, <span class=\"hljs-string\">&quot;Hello World&quot;</span>, <span class=\"hljs-string\">&quot;Bean&quot;</span>&#125;;<br>\t\tInteger[] dishCaloryList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[]&#123;<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">400</span>&#125;;<br><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) &#123;<br>\t\t\tdishList.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dish</span>(dishNameList[i], dishCaloryList[i]));<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tList&lt;Dish&gt; lowCaloricDishes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>\t\t<span class=\"hljs-comment\">// 1. 筛选出卡路里 &lt; 400 的菜</span><br>\t\t<span class=\"hljs-keyword\">for</span> (Dish dish : dishList) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (dish.getCalories() &lt; <span class=\"hljs-number\">400</span>) &#123;<br>\t\t\t\tlowCaloricDishes.add(dish);<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-comment\">// 2. 对筛选出来的菜进行排序</span><br>\t\tCollections.sort(lowCaloricDishes, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Dish&gt;() &#123;            <br>\t\t\t<span class=\"hljs-meta\">@Override</span>            <br>\t\t\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Dish o1, Dish o2)</span> &#123;                <br>\t\t\t\t<span class=\"hljs-keyword\">return</span> Integer.compare(o1.getCalories(), o2.getCalories());           <br>\t\t\t&#125;        <br>\t\t&#125;);<br><br>\t\t<span class=\"hljs-comment\">// 3. 获取菜的名字</span><br>\t\tList&lt;String&gt; nameList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>\t\t<span class=\"hljs-keyword\">for</span> (Dish dish : lowCaloricDishes) &#123;<br>\t\t\tnameList.add(dish.getName());<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; nameList.size(); i++) &#123;<br>\t\t\tSystem.out.println(nameList.get(i));<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n","tags":["java"]},{"title":"fedora","url":"/2022/07/08/24-fedora/","content":"<h1 id=\"fedora-配置\"><a href=\"#fedora-配置\" class=\"headerlink\" title=\"fedora 配置\"></a>fedora 配置</h1><h2 id=\"安装解码器\"><a href=\"#安装解码器\" class=\"headerlink\" title=\"安装解码器\"></a>安装解码器</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf install gstreamer1-plugins-&#123;bad-\\*,good-\\*,base&#125; gstreamer1-plugin-openh264 gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"禁用-packagekit\"><a href=\"#禁用-packagekit\" class=\"headerlink\" title=\"禁用 packagekit\"></a>禁用 packagekit</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">systemctl stop packagekit.service<br>systemctl <span class=\"hljs-built_in\">disable</span> packagekit.service<br>systemctl mask packagekit.service<br></code></pre></td></tr></table></figure>\n\n<p>禁用掉 packagekit 后, gnome 软件商店就没法用了, 但是问题不大, 真的需要的时候再临时开一下, 等之后换了更高配置的机器就可以不用在意 packagekit 了</p>\n<h2 id=\"配置摄像头\"><a href=\"#配置摄像头\" class=\"headerlink\" title=\"配置摄像头\"></a>配置摄像头</h2><p>Fedora 的新版本有 <a href=\"https://copr.fedorainfracloud.org/coprs/frgt10/facetimehd-dkms/\">DKMS RPMs</a></p>\n<p>首先安装固件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 依赖项: curl, xzcat, cpio</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/patjak/facetimehd-firmware.git<br></code></pre></td></tr></table></figure>\n\n<p>进入安装目录, 执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">make<br>sudo make install<br></code></pre></td></tr></table></figure>\n\n<p>如果一切正常, 则应该有如下输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ make<br>Dowloading the driver, please <span class=\"hljs-built_in\">wait</span>...<br><br>Found matching <span class=\"hljs-built_in\">hash</span> from OS X, El Capitan 10.11.5<br>==&gt; Extracting firmware...<br> --&gt; Decompressing the firmware using gzip...<br> --&gt; Deleting temporary files...<br> --&gt; Extracted firmware version 1.43.0<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># make install</span><br>Copying firmware into <span class=\"hljs-string\">&#x27;/usr/lib/firmware/facetimehd&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>添加 copr 库:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf copr <span class=\"hljs-built_in\">enable</span> frgt10/facetimehd-dkms<br></code></pre></td></tr></table></figure>\n\n<p>安装 facetimehd</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf install facetimehd<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装-dbeaver\"><a href=\"#安装-dbeaver\" class=\"headerlink\" title=\"安装 dbeaver\"></a>安装 dbeaver</h2><p>不要试图更换镜像源，sjtu的国内源已经很久没更新了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">flatpak install flathub io.dbeaver.DBeaverCommunity<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"配置-gnome\"><a href=\"#配置-gnome\" class=\"headerlink\" title=\"配置 gnome\"></a>配置 gnome</h2><h3 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h3><h5 id=\"GTK-主题\"><a href=\"#GTK-主题\" class=\"headerlink\" title=\"GTK 主题\"></a>GTK 主题</h5><p>拷贝 WhiteSur 主题仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/vinceliuice/WhiteSur-gtk-theme.git --depth=1<br><span class=\"hljs-comment\"># 进入安装目录</span><br><span class=\"hljs-comment\"># -c Dark: 安装暗色主题</span><br><span class=\"hljs-comment\"># -t all : 安装所有颜色</span><br><span class=\"hljs-comment\"># -i : 活动图标, 有 fedora, gnome, void, debian, arch 等选项</span><br><span class=\"hljs-comment\"># -N mojave: Nautilus 样式</span><br>./install.sh \\<br>\t-c Dark \\<br>\t-t all \\<br>\t-i gnome \\<br>\t-N mojave<br>sudo ./tweaks.sh -g -i fedora -c Dark -b /path/to/background.png<br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>/path/to/background.png</code>是电脑启动后的背景图片.</p>\n<h5 id=\"图标\"><a href=\"#图标\" class=\"headerlink\" title=\"图标\"></a>图标</h5><p>WhiteSur 的图标:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/vinceliuice/WhiteSur-icon-theme.git --depth=1<br><span class=\"hljs-comment\"># 进入目标路径</span><br>./install -t all<br></code></pre></td></tr></table></figure>\n\n\n\n<p>Cutefish 的图标:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/cutefishos/icons.git --depth=1<br><span class=\"hljs-comment\"># 进入目标路径</span><br><span class=\"hljs-built_in\">mkdir</span> build<br>cmake ..<br>make<br>sudo make install<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"光标\"><a href=\"#光标\" class=\"headerlink\" title=\"光标\"></a>光标</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/vinceliuice/WhiteSur-cursors.git --depht=1<br>./install.sh<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装-gnome-扩展\"><a href=\"#安装-gnome-扩展\" class=\"headerlink\" title=\"安装 gnome 扩展\"></a>安装 gnome 扩展</h3><h4 id=\"通过-dnf-安装\"><a href=\"#通过-dnf-安装\" class=\"headerlink\" title=\"通过 dnf 安装\"></a>通过 dnf 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf install gnome-extensions-app <span class=\"hljs-comment\"># 管理扩展</span><br>sudo dnf install chrome-gnome-shell <span class=\"hljs-comment\"># 与 chrome 浏览器的集成</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"手动下载并安装\"><a href=\"#手动下载并安装\" class=\"headerlink\" title=\"手动下载并安装\"></a>手动下载并安装</h4><p>到<a href=\"https://extensions.gnome.org/\">gnome extensions</a> 网站搜索扩展并下载压缩包，将其解压缩，找到<code>metadata.json</code>文件，复制其<code>uuid</code>一项作为解压后的文件夹名。</p>\n<p>将文件夹移动到<code>~/.local/share/gnome-shell/extensions/</code>下，注销会话并重新登录，即可在扩展管理中看到新安装的扩展。</p>\n<p>正在使用的插件 :</p>\n<ol>\n<li><p><a href=\"https://extensions.gnome.org/extension/615/appindicator-support/\">AppIndicator and KStatusNotifierItem Support</a> 系统托盘</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/3956/gnome-fuzzy-app-search/\">Gnome Fuzzy App Search</a> 搜索栏模糊查找</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/517/caffeine/\">caffeine</a> 某些应用下禁用自动睡眠</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/3843/just-perfection/\">just-perfection</a> 大量自定义选项</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/307/dash-to-dock/\">Dash to Dock</a> 终于开始支持 Gnome42 了 (甚至已经支持 Gnome43 了)</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/1702/overview-navigation/\">overview navigate</a> 在 overview 界面按空格后可快速定位窗口</p>\n</li>\n<li><p><a href=\"https://github.com/wengxt/gnome-shell-extension-kimpanel\">Inupt Method Panel</a> 与 fcitx5 配套的输入法 UI, 统一 fcitx5 显示为 libadwaita 风格，且不安装这个扩展<a href=\"https://github.com/fcitx/fcitx5/issues/573\">在某些地方无法显示候选词</a></p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/570/todotxt/\">Todo.txt</a> 一直以来想做的, 原来已经有了啊. 可以在 panel 上显示任务. 与 cli 版的 <a href=\"https://github.com/todotxt/todo.txt-cli\">todo.txt</a> 类似 (但是该插件不需要安装 todo.txt 也能运行)</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/1625/soft-brightness/\">Soft brightness</a> wayland 下调整台式机显示器的亮度, 终于找到了!</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/4850/command-menu/\">Command Menu</a> 快速运行命令，必备</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/3193/blur-my-shell/\">blur-my-shell</a> 模糊特效，需要禁用对 dash 的 blur，并选择 <code>overview -&gt; overview components style</code> 为 <code>do not style</code></p>\n<ul>\n<li>2022-09-05 12:37 : 现在走默认风格了捏</li>\n<li>2022-10-07 20:57 : <del>又换回来了</del></li>\n</ul>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/19/user-themes/\">User Themes</a> 自定义主题</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/3088/extension-list/\">Exension List</a> 在 panel 中快速设置扩展</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/771/proxy-switcher/\">Proxy Switcher</a> 在右上角菜单显示代理切换选项</p>\n<ul>\n<li>2022-09-05 12:33 : chrome + edge, 不需要这个了</li>\n<li>2022-10-07 20:59 : <del>还是挺需要的</del></li>\n</ul>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/3488/big-avatar/\">big-avatar</a> 右上角菜单展示头像<del>用以提升逼格</del>(如果不支持 Gnome 43 就不用了罢)</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/\">bluetooth quick connect</a> 快速连接蓝牙，很实用</p>\n</li>\n</ol>\n<p>目前已经不用了的插件 :</p>\n<ul>\n<li><p><a href=\"https://extensions.gnome.org/extension/4112/customize-ibus/\">customize-ibus</a> 自定义 ibus 样式</p>\n<ul>\n<li>2022-09-05 12:33 : 专用 fcitx5 了捏</li>\n</ul>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/4405/replace-activities-text/\">replace-activities-text</a> 相比于 <a href=\"https://extensions.gnome.org/extension/4451/logo-menu/\">logo-menu</a> 我其实只是想要替换一下 <code>活动</code> 按钮的标志与文字.</p>\n<ul>\n<li>2022-08-14 16:17 : 效果不佳, <del>不如原生活动按钮</del>.</li>\n<li>2022-09-05 12:32 : 不需要了, 已经换成默认主题了</li>\n</ul>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/5236/material-you-color-theming/\">Material You Color Theming</a> 根据背景图片生成系统主题色, 需要安装<a href=\"https://github.com/lassekongo83/adw-gtk3\">adw-gtk3</a></p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/1653/tweaks-in-system-menu/\">tweaks-in-system-menu</a> 在右上角菜单中显示<b>优化</b>与<b>扩展</b>, 快速打开优化与扩展. 如果不是经常换主题与插件的话, 其实用处不大.</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/3985/shu-zhi/\">shuzhi</a> 生成<del>颇有意境的</del>壁纸</p>\n<ul>\n<li>2022-09-05 12:35 : 花里胡哨, 用处不大</li>\n</ul>\n</li>\n</ul>\n<center>\n    <img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/2022-09-04_16-50-10.c9dkP6IAh.png\" width=\"400px\"/>\n    <p><b>shuzhi 生成的壁纸</b></p>\n</center>\n\n<ul>\n<li><p><a href=\"https://extensions.gnome.org/extension/3759/cleaner-overview/\">cleaner-overview</a> 进入 overview 后可整齐排列窗口</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/4652/adjust-display-brightness/\">Adjust Display Brightness </a> 本来寄希望于它能调整亮度…但是效果不太行</p>\n</li>\n<li><p><a href=\"https://extensions.gnome.org/extension/4703/dock-from-dash/\">Dock from Dash</a> 将 dash 添加到 dock，不如 dash-to-dock</p>\n</li>\n</ul>\n<h3 id=\"导出-导入配置\"><a href=\"#导出-导入配置\" class=\"headerlink\" title=\"导出/导入配置\"></a>导出/导入配置</h3><p>使用 <code>dconf</code> 导出/导入配置实现快速恢复配置</p>\n<h4 id=\"导出配置\"><a href=\"#导出配置\" class=\"headerlink\" title=\"导出配置\"></a>导出配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">dconf dump / &gt; dconf.settings<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"导入配置\"><a href=\"#导入配置\" class=\"headerlink\" title=\"导入配置\"></a>导入配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> dconf.settings | dconf load -f /<br></code></pre></td></tr></table></figure>\n\n<p>对于背景与头像, 需要提前将其放置到指定位置.</p>\n<img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220802095437134.png\" alt=\"配置之后的大概样子\" style=\"zoom:50%;\" />\n\n<center>配置之后的大概样子</center>\n\n<h2 id=\"乱七八糟的软件\"><a href=\"#乱七八糟的软件\" class=\"headerlink\" title=\"乱七八糟的软件\"></a>乱七八糟的软件</h2><h3 id=\"flatpak\"><a href=\"#flatpak\" class=\"headerlink\" title=\"flatpak\"></a>flatpak</h3><p>卸载 flatpak 应用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">flatpak uninstall --delete-data com.visualstudio.code<br></code></pre></td></tr></table></figure>\n\n<p>移除不用的依赖:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">flatpak uninstall --unused<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>vscode</strong>: <code>flatpak install flathub com.visualstudio.code</code></p>\n<p>flatpak 版的 vscode 的配置文件位置在 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">~/.var/app/com.visualstudio.code/config/Code/User/settings.json<br></code></pre></td></tr></table></figure>\n\n<p>快捷键配置文件在 <code>~/.var/app/com.visualstudio.code/config/Code/User/keybindings.json</code></p>\n<p>2022-08-13 21:41: flatpak 版本的 vscode 有一些问题, 无法正确检测到部分系统目录, 还是用巨硬官方提供的 rpm 仓库吧</p>\n</li>\n<li><p><strong>newsflash</strong>: rss 阅读器<code>flatpak install flathub com.gitlab.newsflash</code></p>\n</li>\n<li><p><strong>fragments</strong>: bt 种子下载程序 <code>flatpak install flathub de.haeckerfelix.Fragments</code></p>\n</li>\n<li><p><strong>flatseal</strong>: 管理 flatpak 程序的权限 <code>flatpak install flathub com.github.tchx84.Flatseal</code></p>\n<blockquote>\n<p>例如, 使用 flatseal 关闭 vscode 后台运行的权限.</p>\n<p>安装 newsflash 后使用 flatseal 允许其访问<strong>所有用户文件</strong>以启用与系统同步的gtk主题.</p>\n</blockquote>\n</li>\n<li><p><strong>腾讯会议</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 进入 bash 环境</span><br><span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">&quot;http://127.0.0.1:7890&quot;</span><br><span class=\"hljs-built_in\">export</span> HTTPS_PROXY=<span class=\"hljs-string\">&quot;http://127.0.0.1:7890&quot;</span><br>flatpak install flathub com.tencent.wemeet<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 添加密钥与仓库</span><br>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc<br>sudo sh -c <span class=\"hljs-string\">&#x27;echo -e &quot;[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/vscode.repo&#x27;</span><br><span class=\"hljs-comment\"># 更新源并安装 vscode</span><br>dnf check-update<br>sudo dnf install code<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Intel-GPU-Tools\"><a href=\"#Intel-GPU-Tools\" class=\"headerlink\" title=\"Intel GPU Tools\"></a>Intel GPU Tools</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf install igt-gpu-tools<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"xeyes\"><a href=\"#xeyes\" class=\"headerlink\" title=\"xeyes\"></a>xeyes</h3><p>一款判断应用是运行在 wayland 还是 xwayland 下的小工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf install xeyes<br></code></pre></td></tr></table></figure>\n\n<p>当指针位于 xwayland 应用上时眼睛:eyes:会跟着动</p>\n<h3 id=\"sushi\"><a href=\"#sushi\" class=\"headerlink\" title=\"sushi\"></a>sushi</h3><p>和 MacOS 的 QuickLook 类似, 在 Nautilus 中按空格可以预览文件.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf install -y sushi<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"GBKunzip\"><a href=\"#GBKunzip\" class=\"headerlink\" title=\"GBKunzip\"></a>GBKunzip</h3><p>在 linux 下解压一些于 windows 下压缩的文件时，总是会出现各种乱码，依云写的<a href=\"https://github.com/lilydjwg/winterpy/blob/master/pyexe/gbkunzip\">gbkunzip</a>就是用来解决这个问题的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/Corona09/GBKunzip-by-lilydjwg.git<br></code></pre></td></tr></table></figure>\n\n<p>执行 <code>make install</code> 以安装脚本。</p>\n<h3 id=\"emacs\"><a href=\"#emacs\" class=\"headerlink\" title=\"emacs\"></a>emacs</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 安装 slime</span><br>sudo dnf install -y sbcl<br>git <span class=\"hljs-built_in\">clone</span> --depth=1 https://github.com/slime/slime.git slime<br><span class=\"hljs-built_in\">cd</span> slime<br>sudo <span class=\"hljs-built_in\">ln</span> -s (<span class=\"hljs-built_in\">pwd</span>) /opt/local/slime<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 编译 emacs</span><br>sudo dnf install -y jansson-devel mpfr-devel libmpc-devel gmp-devel \\<br>                    libgccjit-devel autoconf texinfo libX11-devel jansson \\<br>                    jansson-devel libXpm libXaw-devel libjpeg-turbo-devel \\<br>                    libpng-devel giflib-devel libtiff-devel gnutls-devel \\<br>                    ncurses-devel gtk3-devel webkit2gtk3-devel<br>git <span class=\"hljs-built_in\">clone</span> https://github.com/emacs-mirror/emacs.git --depth=1<br><span class=\"hljs-built_in\">cd</span> emacs<br>./autogen.sh<br>./configure --with-dbus --with-gif --with-jpeg --with-png --with-rsvg \\<br>            --with-tiff --with-xft --with-xpm --with-gpm=no \\<br>            --with-xwidgets --with-x-toolkit=gtk3 --with-cairo --with-modules --with-native-compilation --with-pgtk \\<br>            -with-threads --with-included-regex<br>make -j8<br>sudo make install<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装字体\"><a href=\"#安装字体\" class=\"headerlink\" title=\"安装字体\"></a>安装字体</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf install -y google-noto-&#123;sans,serif&#125;-sc-fonts adobe-source-han-&#123;sans,serif&#125;-cn-fonts<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装-Latex\"><a href=\"#安装-Latex\" class=\"headerlink\" title=\"安装 Latex\"></a>安装 Latex</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf -y install texlive texlive-&#123;ulem, lstaddons, anyfontsize, silence, gbt7714, bibtex, threeparttable, hanging, noto&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"手动安装软件\"><a href=\"#手动安装软件\" class=\"headerlink\" title=\"手动安装软件\"></a>手动安装软件</h3><p>有一些软件需要手动安装, 这些软件文件放到 <code>/opt/local</code> 下, 如 <code>lazygit</code>, <code>clitrans</code>, <code>typora</code> 等.    </p>\n<h3 id=\"Nautilus-配置\"><a href=\"#Nautilus-配置\" class=\"headerlink\" title=\"Nautilus 配置\"></a>Nautilus 配置</h3><p>安装 Nautilus 插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">sudo dnf install -y seahorse-nautilus <span class=\"hljs-comment\"># 加密/解密扩展</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"gnome-control-center-无故崩溃\"><a href=\"#gnome-control-center-无故崩溃\" class=\"headerlink\" title=\"gnome-control-center 无故崩溃\"></a>gnome-control-center 无故崩溃</h3><p>gnome-control-center 无故崩溃, 无法启动</p>\n<p>报错信息 (<a href=\"https://gitlab.gnome.org/GNOME/gnome-control-center/-/issues/1504\">类似错误</a>):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">(gnome-control-center:551378): cc-power-profile-row-CRITICAL **: 11:47:22.497: cc_power_profile_row_get_radio_button: assertion <span class=\"hljs-string\">&#x27;CC_IS_POWER_PROFILE_ROW (self)&#x27;</span> failed<br>**<br>power-cc-panel:ERROR:../panels/power/cc-power-panel.c:1122:performance_profile_set_active: assertion failed: (button)<br>Bail out! power-cc-panel:ERROR:../panels/power/cc-power-panel.c:1122:performance_profile_set_active: assertion failed: (button)<br>fish: Job 1, <span class=\"hljs-string\">&#x27;gnome-control-center&#x27;</span> terminated by signal SIGABRT (Abort)<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://ramfree17.net/capsule/2020/07/fix-for-crashing-gnome-control-center/\">解决方法</a> :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">dconf reset -f /org/gnome/control-center<br></code></pre></td></tr></table></figure>\n","tags":["前端","vue"]},{"title":"服务器配置","url":"/2022/07/31/25-server-config/","content":"<p>最近将手里的笔记本系统换了又换, 最后换到了 fedora, 正好服务器的 centos 也十分老旧了, 并且由于当时什么都不会配置得很栏, 于是把服务器也换成了 fedora, 这里记录一下一些配置过程.</p>\n<h1 id=\"设置长时间连接\"><a href=\"#设置长时间连接\" class=\"headerlink\" title=\"设置长时间连接\"></a>设置长时间连接</h1><p>在服务器的<code>/etc/ssh/sshd_config</code>中添加如下配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">ClientAliveInterval 60<br></code></pre></td></tr></table></figure>\n\n<p>然后重启服务器.</p>\n<h1 id=\"安装-mariadb\"><a href=\"#安装-mariadb\" class=\"headerlink\" title=\"安装 mariadb\"></a>安装 mariadb</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">dnf install mariadb mariadb-server<br></code></pre></td></tr></table></figure>\n\n<p>安装完成后启动 mariadb. 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">systemctl start mariadb.service<br></code></pre></td></tr></table></figure>\n\n<p>执行安全安装脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">mysql_secure_isntallation<br></code></pre></td></tr></table></figure>\n\n<p>登录 mysql, 创建新用户 corona 与 admin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\"># 创建用户<br>create user &#x27;corona&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;;<br>create user &#x27;admin&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;;<br># 授予权限<br>grant all on *.* to &#x27;corona&#x27;@&#x27;%&#x27;;<br>grant all on databasename.tablename to &#x27;admin&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"安装-nginx\"><a href=\"#安装-nginx\" class=\"headerlink\" title=\"安装 nginx\"></a>安装 nginx</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">dnf isntall nginx<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"多用户配置文件\"><a href=\"#多用户配置文件\" class=\"headerlink\" title=\"多用户配置文件\"></a>多用户配置文件</h1><p>由于服务器上有多个用户, 对于 fish 等的配置文件要每个用户一份的话十分麻烦</p>\n<p>创建 <code>/usr/local/share/user-config</code> 文件夹, 将 fish 与 starship 的配置文件拷贝到文件夹下, 在对应的用户 <code>.config</code> 目录下创建软连接.</p>\n<p>但是 ranger 的配置文件不可以, 对应用户必须要对配置文件夹有写权限. </p>\n","tags":["linux"]},{"title":"GTK 学习笔记","url":"/2022/08/13/26-gtk-learning/","content":"<h1 id=\"GTK-NOTES\"><a href=\"#GTK-NOTES\" class=\"headerlink\" title=\"GTK NOTES\"></a>GTK NOTES</h1><h2 id=\"Generate-compile-commands-json\"><a href=\"#Generate-compile-commands-json\" class=\"headerlink\" title=\"Generate compile_commands.json\"></a>Generate compile_commands.json</h2><p>在编写 gtk 程序时, 需要使用到:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;gtk/gtk.h&gt;</span></span><br><span class=\"hljs-comment\">/// ...</span><br></code></pre></td></tr></table></figure>\n\n<p>但实际上, 这个库的路径是 <code>/usr/include/gtk-4.0/gtk/gtk.h</code>, 因此需要在 <a href=\"https://clang.llvm.org/docs/JSONCompilationDatabase.html\">compile_commands.json</a> 中设置<code>includePath</code>.</p>\n<p>为了生成 compile_commands.json, 需要使用 cmake 构建项目.</p>\n<h3 id=\"创建-cmake-项目结构\"><a href=\"#创建-cmake-项目结构\" class=\"headerlink\" title=\"创建 cmake 项目结构\"></a>创建 cmake 项目结构</h3><p>假设项目名为<code>helloWorld</code>, 则应有如下的目录结构:</p>\n<p><img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220813190132082.png\" alt=\"image-20220813190132082\"></p>\n<p>其中 <code>COPYRIGH</code>, <code>README</code>与<code>doc/helloWorld.txt</code>是非必需的, <code>src/main.cpp</code>是项目的主要源文件.</p>\n<h3 id=\"编写-CMakeLists-txt\"><a href=\"#编写-CMakeLists-txt\" class=\"headerlink\" title=\"编写 CMakeLists.txt\"></a>编写 CMakeLists.txt</h3><p>首先编辑项目根目录下的<code>CMakeLists.txt</code>:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">PROJECT</span>(HELLOWORLD) <span class=\"hljs-comment\"># 项目名称</span><br><span class=\"hljs-keyword\">ADD_SUBDIRECTORY</span>(src bin) <span class=\"hljs-comment\"># 指定两个子文件夹, src 是源代码目录, bin 是生成的二进制文件所在目录</span><br><span class=\"hljs-keyword\">SET</span>(CMAKE_INSTALL_PREFIX /home/corona/Downloads/projects/) <span class=\"hljs-comment\"># 更改安装路径</span><br><span class=\"hljs-keyword\">INSTALL</span>(FILES COPYRIGHT README DESTINATION doc/helloWorld/) <span class=\"hljs-comment\"># 指定文件安装路径</span><br><span class=\"hljs-keyword\">INSTALL</span>(DIRECTORY doc/ DESTINATION doc/helloWorld/) <span class=\"hljs-comment\"># 将 doc/ 目录下的所有文件安装到指定路径</span><br></code></pre></td></tr></table></figure>\n\n<p>然后编辑<code>src/CMakeLists.txt</code>:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">SET</span> (SRC_LIST main.cpp)<br><span class=\"hljs-keyword\">SET</span>(EXECUTABLE_OUTPUT_PATH <span class=\"hljs-variable\">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin) <span class=\"hljs-comment\"># 指定生成的二进制文件路径</span><br><span class=\"hljs-keyword\">SET</span>(LIBRARY_OUTPUT_PATH <span class=\"hljs-variable\">$&#123;PROJECT_BINARY_DIR&#125;</span>/lib)<br><span class=\"hljs-keyword\">ADD_EXECUTABLE</span> (hello <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>) <span class=\"hljs-comment\"># hello 是生成的可执行文件名, SRC_LIST 是其依赖</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"指定-includePath-与添加链接参数\"><a href=\"#指定-includePath-与添加链接参数\" class=\"headerlink\" title=\"指定 includePath 与添加链接参数\"></a>指定 includePath 与添加链接参数</h3><p>首先, 使用 <code>pkg-config --cflags gtk4</code> 命令获取需要添加的路径与链接参数:</p>\n<img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220813191408477.png\" alt=\"image-20220813191408477\" style=\"zoom: 80%;\" />\n\n<p>在<code>src/CMakeLists.txt</code>中添加如下内容:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">INCLUDE_DIRECTORIES</span>(<br>\t/usr/<span class=\"hljs-keyword\">include</span>/gtk-<span class=\"hljs-number\">4.0</span><br>\t/usr/<span class=\"hljs-keyword\">include</span>/pango-<span class=\"hljs-number\">1.0</span><br>\t/usr/<span class=\"hljs-keyword\">include</span>/glib-<span class=\"hljs-number\">2.0</span><br>\t/usr/lib64/glib-<span class=\"hljs-number\">2.0</span>/<span class=\"hljs-keyword\">include</span><br>\t/usr/<span class=\"hljs-keyword\">include</span>/sysprof-<span class=\"hljs-number\">4</span><br>\t/usr/<span class=\"hljs-keyword\">include</span>/harfbuzz<br>\t/usr/<span class=\"hljs-keyword\">include</span>/freetype2<br>\t/usr/<span class=\"hljs-keyword\">include</span>/libpng16<br>\t/usr/<span class=\"hljs-keyword\">include</span>/libmount<br>\t/usr/<span class=\"hljs-keyword\">include</span>/blkid<br>\t/usr/<span class=\"hljs-keyword\">include</span>/fribidi<br>\t/usr/<span class=\"hljs-keyword\">include</span>/libxml2<br>\t/usr/<span class=\"hljs-keyword\">include</span>/cairo<br>\t/usr/<span class=\"hljs-keyword\">include</span>/pixman-<span class=\"hljs-number\">1</span><br>\t/usr/<span class=\"hljs-keyword\">include</span>/gdk-pixbuf-<span class=\"hljs-number\">2.0</span><br>\t/usr/<span class=\"hljs-keyword\">include</span>/graphene-<span class=\"hljs-number\">1.0</span><br>\t/usr/lib64/graphene-<span class=\"hljs-number\">1.0</span>/<span class=\"hljs-keyword\">include</span><br>\t/usr/<span class=\"hljs-keyword\">include</span>/gio-unix-<span class=\"hljs-number\">2.0</span><br>)<br><span class=\"hljs-keyword\">ADD_EXECUTABLE</span>(main <span class=\"hljs-variable\">$&#123;SRC_LIST&#125;</span>)<br><span class=\"hljs-comment\"># TARGET_LINK_LIBRARIES 需要在 ADD_EXECUTABLE 之后</span><br><span class=\"hljs-keyword\">TARGET_LINK_LIBRARIES</span>(main<br>\tpthread<br>\tgtk-<span class=\"hljs-number\">4</span><br>\tpangocairo-<span class=\"hljs-number\">1.0</span><br>\tpango-<span class=\"hljs-number\">1.0</span><br>\tharfbuzz<br>\tgdk_pixbuf-<span class=\"hljs-number\">2.0</span><br>\tcairo-gobject<br>\tcairo<br>\tgraphene-<span class=\"hljs-number\">1.0</span><br>\tgio-<span class=\"hljs-number\">2.0</span><br>\tgobject-<span class=\"hljs-number\">2.0</span><br>\tglib-<span class=\"hljs-number\">2.0</span><br>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"生成-compile-commands-json\"><a href=\"#生成-compile-commands-json\" class=\"headerlink\" title=\"生成 compile_commands.json\"></a>生成 compile_commands.json</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> build/<br><span class=\"hljs-built_in\">rm</span> -rf *<br>cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..<br></code></pre></td></tr></table></figure>\n\n<p>然后在<code>build/</code>目录下就能找到 <code>compile_commands.json</code>文件了</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">[</span><br>    <span class=\"hljs-punctuation\">&#123;</span><br>      <span class=\"hljs-attr\">&quot;directory&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;/home/corona/Documents/projects/gtk-learning/build/bin&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;command&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;/usr/bin/cc  -I/usr/include/gtk-4.0 -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/sysprof-4 -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/fribidi -I/usr/include/libxml2 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/graphene-1.0 -I/usr/lib64/graphene-1.0/include -I/usr/include/gio-unix-2.0  -o CMakeFiles/main.dir/main.o -c /home/corona/Documents/projects/gtk-learning/src/main.c&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;file&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;/home/corona/Documents/projects/gtk-learning/src/main.c&quot;</span><br>    <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">]</span><br></code></pre></td></tr></table></figure>\n\n<p>只需要这个文件就可以使<code>coc</code>能够正确地显示补全, 因此之后可以手动创建该文件, 将文件中的路径与文件名更改一下即可(不改也行, 因为只是用来让 coc.nvim 正确地显示补全的).</p>\n<p>以上命令同时生成了 <code>Makefile</code> 文件, 如果需要的话, 可以直接在 <code>build/</code> 目录下执行 <code>make install</code> 等命令构建项目. </p>\n<hr>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><h3 id=\"创建一个空的窗口\"><a href=\"#创建一个空的窗口\" class=\"headerlink\" title=\"创建一个空的窗口\"></a>创建一个空的窗口</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;gtk/gtk.h&gt;</span></span><br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span><br><span class=\"hljs-title function_\">activate</span> <span class=\"hljs-params\">(GtkApplication* app,</span><br><span class=\"hljs-params\">          gpointer        user_data)</span><br>&#123;<br>  GtkWidget *window;<br><br>  window = gtk_application_window_new (app);<br>  gtk_window_set_title (GTK_WINDOW (window), <span class=\"hljs-string\">&quot;Window&quot;</span>);<br>  gtk_window_set_default_size (GTK_WINDOW (window), <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>);<br>  gtk_widget_show (window);<br>&#125;<br><br><span class=\"hljs-type\">int</span><br><span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>    argc,</span><br><span class=\"hljs-params\">      <span class=\"hljs-type\">char</span> **argv)</span><br>&#123;<br>  GtkApplication *app;<br>  <span class=\"hljs-type\">int</span> status;<br><br>  app = gtk_application_new (<span class=\"hljs-string\">&quot;org.gtk.example&quot;</span>, G_APPLICATION_FLAGS_NONE);<br>  g_signal_connect (app, <span class=\"hljs-string\">&quot;activate&quot;</span>, G_CALLBACK (activate), <span class=\"hljs-literal\">NULL</span>);<br>  status = g_application_run (G_APPLICATION (app), argc, argv);<br>  g_object_unref (app);<br><br>  <span class=\"hljs-keyword\">return</span> status;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果不使用 cmake, 也可以直接使用以下命令编译运行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">gcc $( pkg-config --cflags gtk4 ) -o main main.c $( pkg-config --libs gtk4 )<br></code></pre></td></tr></table></figure>\n\n<p>运行程序, 可以看到弹出了一个空白窗口:</p>\n<img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220813205050250.png\" alt=\"image-20220813205050250\" style=\"width:80%;\" />\n\n<p>在 GTK 程序中, main 函数中需要创建一个<code>GtkApplication</code>类型的变量, 以上代码声明了<code>GtkApplication</code>类型的指针<code>app</code>并用<code>gtk_application_new</code>这一函数来初始化它. 其中参数 <code>org.gnome.example</code> 是其唯一标识</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://docs.gtk.org/gtk4/getting_started.html\">GTK Getting Started</a></li>\n<li><a href=\"https://gitee.com/skeystudio/GTK4/blob/master/doc/Additional_documentation/Getting_Started_with_GTK/readme.md\">GTK 入门</a></li>\n<li><a href=\"https://blog.csdn.net/knowledgebao/article/details/84633798\">GObject 相关文章</a><ul>\n<li>[原博客](<a href=\"http://garfileo.is-programmer.com/categories/6934/posts\">http://garfileo.is-programmer.com/categories/6934/posts</a></li>\n</ul>\n</li>\n</ul>\n","tags":["gtk","c"]},{"title":"深度学习笔记","url":"/2022/08/16/27-deep-learning-note/","content":"<h1 id=\"深度学习笔记\"><a href=\"#深度学习笔记\" class=\"headerlink\" title=\"深度学习笔记\"></a>深度学习笔记</h1><h2 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h2><h3 id=\"线性代数\"><a href=\"#线性代数\" class=\"headerlink\" title=\"线性代数\"></a>线性代数</h3><h4 id=\"范数\"><a href=\"#范数\" class=\"headerlink\" title=\"范数\"></a>范数</h4><p><strong>范数</strong> (norm): $L^p$ 范数的定义如下<br>$$<br>||x||_p = \\left(\\sum\\limits_i |x_i|^p\\right)^{\\frac{1}{p}}, p\\in \\R, p\\geq 1<br>$$<br>$p=2$ 时 $L^2$ 范数也称<strong>欧几里得范数</strong>, 简记为 $||x||$.</p>\n<h4 id=\"奇异值分解-1\"><a href=\"#奇异值分解-1\" class=\"headerlink\" title=\"奇异值分解^1\"></a>奇异值分解<a href=\"%5B%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3%E7%9A%84%E6%8F%AD%E7%A7%98%5D(https://zhuanlan.zhihu.com/p/26306568)\">^1</a></h4><p>给定$m\\times n$的矩阵 $A$, 则 $AA^T\\in \\R^{m\\times m}$, $A^TA\\in \\R^{m\\times m}$都是对称矩阵. </p>\n<p>若$AA^T=P\\Lambda_1 P^T$, $A^TA=Q\\Lambda_2Q^T$, 则矩阵 $A$ 的奇异值分解为<br>$$<br>A = P\\Sigma Q<br>$$<br>其中, 矩阵$P=(\\vec{p_1}, \\vec{p_2}, \\cdots, \\vec{p_m})$的大小是$m\\times m$, 列向量 $\\vec{p_1}, \\vec{p_2},\\cdots,\\vec{p_m}$是$AA^T$的特征向量, 也被称为$A$的<strong>左奇异向量</strong>; 同理, 矩阵$Q=(\\vec{q_1}, \\vec{q_2},\\cdots,\\vec{q_n})$, $\\vec{q_1}, \\vec{q_2}, \\cdots, \\vec{q_n}$是$A^TA$的特征向量, 也称为$A$的右奇异向量.</p>\n<p>矩阵$\\Lambda_1$与矩阵$\\Lambda_2$对角元素上的非零元素相同, 即<strong>矩阵$AA^T$与矩阵$A^TA$的非零特征值相同</strong>.</p>\n<p>矩阵$\\Sigma$对角线上的元素被称为<strong>奇异值</strong>.</p>\n<p>设矩阵$\\Lambda_1$(或$\\Lambda_2$)对角线上的非零元素为$\\lambda_1, \\lambda_2\\cdots,\\lambda_k(\\lambda_i&gt;0)$, 再设矩阵$\\Sigma$对角线上的非零元素为$\\sigma_1,\\sigma_2,\\cdots,\\sigma_k$,则<br>$$<br>\\sigma_i = \\sqrt{\\lambda_i}, 1\\le i \\le k<br>$$<br>例如,<br>$$<br>A=\\left[\\begin{matrix}<br>1 &amp; 2 \\<br>0 &amp; 0 \\<br>0 &amp; 0<br>\\end{matrix}\\right]<br>$$<br>则<br>$$<br>AA^T=\\left[\\begin{matrix}<br>5 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; 0<br>\\end{matrix}\\right]<br>$$<br>得到$\\lambda_1=5,\\lambda_2=0,\\lambda_3=0$, 特征向量$\\vec{p_1}=(1, 0, 0)^T, \\vec{p_2}=(0, 1, 0)^T, \\vec{p_3}=(0, 0, 1)^T$; </p>\n<p>由<br>$$<br>A^TA=\\left[\\begin{matrix}<br>1 &amp; 2 \\<br>2 &amp; 4<br>\\end{matrix}\\right]<br>$$<br>得到特征值 $\\lambda_1=5,\\lambda_2=0$, 特征向量为$\\vec{q_1}=\\left(\\frac{\\sqrt{5}}{5},\\frac{2\\sqrt{5}}{5}\\right)^T, \\vec{q_2}=\\left(-\\frac{2\\sqrt{5}}{5},\\frac{\\sqrt{5}}{5}\\right)$</p>\n<p>则<br>$$<br>\\Sigma=\\left[\\begin{matrix}<br>\\sqrt{5} &amp; 0 \\<br>0 &amp; 0 \\<br>0 &amp; 0<br>\\end{matrix}\\right]<br>$$<br>此时$A$的奇异值分解为<br>$$<br>A=P\\Sigma Q^T=(\\vec{p_1},\\vec{p_2})\\Sigma (\\vec{q_1},\\vec{q_2})^T<br>$$</p>\n<h4 id=\"Moore-Penrose-伪逆\"><a href=\"#Moore-Penrose-伪逆\" class=\"headerlink\" title=\"Moore-Penrose 伪逆\"></a>Moore-Penrose 伪逆</h4><p>非方阵没有逆矩阵, 其 Moore-Penrose 伪逆定义如下:<br>$$<br>A^+ = \\lim\\limits_{\\alpha\\rightarrow 0}(A^TA+\\alpha I)^{-1}A^T<br>$$<br>实际计算中往往使用如下公式:<br>$$<br>A^+ = VD^+U^T<br>$$<br>其中, 矩阵 $U$, $D$, $V$ 分别是矩阵 $A$ 奇异值分解后得到的矩阵. 对角矩阵 $D$ 的伪逆 $D^+$ 是其非零元素取倒数之后转置得到的.</p>\n<ul>\n<li>当矩阵$A$的列数多于行数时, $x=A^+y$是方程所有可行解中欧几里得范数$|x|_2$最小的;</li>\n<li>当矩阵$A$的行数多于列数时, $x=A^+y$是使得$Ax$和$y$的欧几里得距离$|Ax-y|_2$最小的解.</li>\n</ul>\n<h4 id=\"迹运算\"><a href=\"#迹运算\" class=\"headerlink\" title=\"迹运算\"></a>迹运算</h4><p>迹运算返回的是<strong>矩阵对角元素的和</strong>:<br>$$<br>\\mathrm{Tr}(A) = \\sum\\limits_i A_{i, i}<br>$$</p>\n<ul>\n<li>$Tr(A) = Tr(A^T)$</li>\n<li>$Tr\\left(\\prod\\limits_{i=1}^n F^{(i)}\\right)=Tr\\left(F^{(n)}\\prod\\limits_{i=1}^{n-1}F^{(i)}\\right)$</li>\n</ul>\n<hr>\n<h3 id=\"概率论\"><a href=\"#概率论\" class=\"headerlink\" title=\"概率论\"></a>概率论</h3><h4 id=\"独立与条件独立\"><a href=\"#独立与条件独立\" class=\"headerlink\" title=\"独立与条件独立\"></a>独立与条件独立</h4><ul>\n<li><p>相互<strong>独立</strong><br>$$<br>\\forall x\\in X, \\forall y\\in Y, P(X=x, Y=y) = P(X=x)P(Y=y)<br>$$<br>则称<strong>随机变量$X$与$Y$相互独立</strong>, 记为$X\\bot Y$.</p>\n</li>\n<li><p><strong>条件独立</strong><br>$$<br>\\forall x\\in X, y\\in Y, z\\in Z, P(X=x, Y=y|Z=z) = P(X=x|Z=z)p(Y=y|Z=z)<br>$$<br>则称<strong>随机变量$X$与$Y$在给定随机变量$Z$时是条件独立的</strong>, 记为$X\\bot Y|Z$</p>\n</li>\n</ul>\n<h4 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><ul>\n<li><p><strong>sigmoid</strong>函数<br>$$<br>\\sigma(x) = \\cfrac{1}{1+\\exp(x)}<br>$$</p>\n<ul>\n<li>$\\sigma(x) = \\cfrac{\\exp(x)}{\\exp(x)+\\exp(0)}$</li>\n<li>$\\cfrac{\\mathrm d}{\\mathrm d x}\\sigma(x)=\\sigma(x)(1-\\sigma(x))$</li>\n<li>$1-\\sigma(x)=\\sigma(-x)$</li>\n<li>$\\forall x\\in(0,1), \\sigma^{-1}(x)=\\log\\left(\\cfrac{x}{1-x}\\right)$</li>\n</ul>\n</li>\n<li><p><strong>softplus</strong>函数<br>$$<br>\\zeta(x) = \\log(1+\\exp(x))<br>$$</p>\n<ul>\n<li>$\\log \\sigma(x)=-\\zeta(-x)$</li>\n<li>$\\cfrac{\\mathrm d}{\\mathrm d x}\\zeta(x)=\\zeta(x)$</li>\n<li>$\\forall x&gt;0,\\zeta^{-1}(x)=\\log(\\exp(x)-1)$</li>\n<li>$\\zeta(x)=\\int_{-\\infty}^x\\sigma(y)\\mathrm d y$</li>\n<li>$\\zeta(x)-\\zeta(-x)=x$</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常用概率分布\"><a href=\"#常用概率分布\" class=\"headerlink\" title=\"常用概率分布\"></a>常用概率分布</h4><h5 id=\"Bernoulli-分布-0-1分布\"><a href=\"#Bernoulli-分布-0-1分布\" class=\"headerlink\" title=\"Bernoulli 分布 (0-1分布)\"></a>Bernoulli 分布 (0-1分布)</h5><p>$$<br>P(x=1)=p\\<br>P(x=0)=1-p<br>$$</p>\n<h5 id=\"多项分布\"><a href=\"#多项分布\" class=\"headerlink\" title=\"多项分布\"></a>多项分布</h5><p>对二项分布的扩展: 进行 n 次独立同分布实验, 每次实验都有 k 种结果.</p>\n<p>假设进行 n 次实验, 每次实验有 k 种不同的结果, 每种结果出现的概率分别是 $p_1, p_2, \\cdots, p_k$<br>$$<br>\\mathrm{P}(X_1=x_1,X_2=x_2,\\cdots,X_k=x_k)=\\cfrac{n!}{x_1!x_2!\\cdots x_k!}p_1^{x_1}p_2^{x_2}\\cdots p_k^{x_k}<br>$$<br>多项分布对其每一个结果都有均值和方差, 分别为:<br>$$<br>\\mathrm E(x_i)=np_i\\<br>\\mathrm{Var}(x_i)=np_i(1-p_i)<br>$$</p>\n<h5 id=\"高斯分布\"><a href=\"#高斯分布\" class=\"headerlink\" title=\"高斯分布\"></a>高斯分布</h5><p>$$<br>N(x;\\mu,\\sigma^2)=\\sqrt{\\cfrac{1}{2\\pi\\sigma^2}}\\exp\\left(-\\cfrac{1}{2\\sigma^2}(x-\\mu)^2\\right)<br>$$</p>\n<p>推广到$\\R^n$空间:<br>$$<br>N(x;\\mu, \\Sigma)=\\sqrt{\\cfrac{1}{(2\\pi^n)\\det(\\Sigma)}}\\exp\\left(-\\cfrac{1}{2}(x-\\mu)^T\\Sigma^{-1}(x-\\mu)\\right)<br>$$</p>\n<h5 id=\"指数分布\"><a href=\"#指数分布\" class=\"headerlink\" title=\"指数分布\"></a>指数分布</h5><p>$$<br>p(x;\\lambda)=\\lambda 1_{x\\ge 0}\\exp(-\\lambda x)<br>$$</p>\n<p>指数分布使用<strong>指示函数</strong> $1_{\\lambda\\ge 0}$来使得 $x$ 取负值时概率为 0.</p>\n<h5 id=\"Laplace-分布\"><a href=\"#Laplace-分布\" class=\"headerlink\" title=\"Laplace 分布\"></a>Laplace 分布</h5><p>$$<br>\\mathrm{Laplace}(x;\\mu, \\gamma)=\\cfrac{1}{2\\gamma}\\exp\\left(-\\cfrac{|x-\\mu|}{\\gamma}\\right)<br>$$</p>\n<p>Laplace 分布允许在任意一点$\\mu$处设置概率密度的峰值.</p>\n<h3 id=\"卷积\"><a href=\"#卷积\" class=\"headerlink\" title=\"卷积\"></a>卷积</h3><p>设两函数为 $f(\\vec x), g(\\vec x), \\vec x$ 为 $n$ 维向量, 则 $f(\\vec x)$与$g(\\vec x)$卷积定义为<br>$$<br>C(\\vec x) = f(\\vec x)\\cdot g(\\vec x) = \\int_{-\\infty}^{+\\infty}f(\\vec y)g(\\vec x - \\vec y)\\mathrm d^n\\vec y<br>$$<br>特别地, 在一维情况下:<br>$$<br>f(x)\\cdot g(x) = \\int_{-\\infty}^{+\\infty}f(y)g(x-y)\\mathrm dy<br>$$<br>在二维情况下<br>$$<br>f(x,y)\\cdot g(x, y) = \\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty} f(\\alpha, \\beta)g(x-\\alpha, y-\\beta)\\mathrm d\\alpha\\mathrm d\\beta<br>$$</p>\n<hr>\n<h2 id=\"机器学习基础\"><a href=\"#机器学习基础\" class=\"headerlink\" title=\"机器学习基础\"></a>机器学习基础</h2><h3 id=\"一致性\"><a href=\"#一致性\" class=\"headerlink\" title=\"一致性\"></a>一致性</h3><p>我们希望当数据集中数据点的数量 $m$ 增加时, 点估计会收敛到对应参数的真实值. 更形式化得, 我们需要:<br>$$<br>\\mathrm {p}\\lim\\limits_{m\\rightarrow\\infty}\\hat\\theta_m=\\theta<br>$$<br>符号$\\mathrm p\\lim$表示依概率收敛, 即对任意的$\\varepsilon&gt;0$, 当 $m\\rightarrow\\infty$时, 有<br>$$<br>P(|\\hat\\theta_m-\\theta|)&gt;\\varepsilon<br>$$<br><strong>强一致性</strong>是指<strong>几乎必然</strong>从$\\hat\\theta$收敛到$\\theta$. 几乎必然收敛是指当$P(\\lim\\limits_{m\\rightarrow\\infty}x^{(m)}=x)=1$时, 随机变量序列$x^{(1)},x^{(2)},\\cdots$收敛到$x$.</p>\n<h3 id=\"K-折交叉验证\"><a href=\"#K-折交叉验证\" class=\"headerlink\" title=\"K 折交叉验证\"></a>K 折交叉验证</h3><p>将数据分为 k 个不重合的子集, 测试误差估计为 k 次计算后的平均测试误差.</p>\n<p>在第 i 次测试时, 数据的第 i 个子集用于测试集, 其他的数据用于训练集.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\">将数据集 D 分为 k 个不相交的子集 Di;<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1.</span>.k]:<br>    fi = A(D\\Di) <span class=\"hljs-comment\"># A 为学习算法</span><br>    <span class=\"hljs-keyword\">for</span> zj <span class=\"hljs-keyword\">in</span> Di:<br>        ej = L(fi, zj) <span class=\"hljs-comment\"># L 是代价函数</span><br><span class=\"hljs-keyword\">return</span> e<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"前馈神经网络\"><a href=\"#前馈神经网络\" class=\"headerlink\" title=\"前馈神经网络\"></a>前馈神经网络</h2><blockquote>\n<p><strong>深度前馈网络</strong>也称<strong>前馈神经网络</strong>, 或<strong>多层感知机</strong>.</p>\n</blockquote>\n<p>前馈网络的目标是接近某个函数$f^*$. 例如对于分类器$y=f^*(x)$将输入$x$映射到一个类别$y$.</p>\n<hr>\n<h2 id=\"卷积神经网络\"><a href=\"#卷积神经网络\" class=\"headerlink\" title=\"卷积神经网络\"></a>卷积神经网络</h2><h3 id=\"卷积-1\"><a href=\"#卷积-1\" class=\"headerlink\" title=\"卷积\"></a>卷积</h3><h4 id=\"卷积的概念\"><a href=\"#卷积的概念\" class=\"headerlink\" title=\"卷积的概念\"></a>卷积的概念</h4><p>卷积经常用在图像处理中，给定一个图像 $X\\in \\R^{M\\times N}$ 和一个滤波器 $W\\in \\R^{U\\times V}$, 一般有 $U&lt;&lt;M, V&lt;&lt;N$, 其卷积为:</p>\n<p>$$<br>y_{i, j} = \\sum\\limits_{u=1}^U\\sum\\limits_{v=1}^V w_{uv}x_{i-u+1,j-v+1}<br>$$<br>简单起见, 这里假设 $y_{i, j}$ 的下标 $i, j$ 从 $U, V$ 开始.</p>\n<center>\n    <img\n        src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/20220901173410.png\"\n        width=\"80%\"\n    />\n</center>\n<center><p> 二维卷积示例 </p></center>\n\n<p><em>需要注意的是, 根据卷积的定义, 以上示例在计算时需要进行卷积核的翻转.</em></p>\n<p>在图像处理中, 卷积经常作为特征提取的有效方法.<br>一副图像在经过卷积操作后得到的结果称为<strong>特征映射</strong>.</p>\n<h4 id=\"互相关\"><a href=\"#互相关\" class=\"headerlink\" title=\"互相关\"></a>互相关</h4><p><b>互相关</b>是一个衡量两个序列相关性的函数, 通常使用滑动窗口的<strong>点积</strong>计算来实现, 给定一个图像 $X\\in \\R^{M\\times N}$ 和卷积核 $W\\in \\R^{U\\times V}$, 它们的互相关为</p>\n<p>$$<br>y_{i,j} = \\sum\\limits_{u=1}^U\\sum\\limits_{v=1}^V w_{uv}x_{i+u-1, j+v-1}.<br>$$</p>\n<p>互相关和卷积的区别仅仅在于卷积核是否进行翻转, 因此互相关也称为<b>不翻转卷积</b>.</p>\n<h4 id=\"步长与零填充\"><a href=\"#步长与零填充\" class=\"headerlink\" title=\"步长与零填充\"></a>步长与零填充</h4><p><b>步长</b>是指卷积核在滑动时的时间间隔 (如下图 (a)).</p>\n<p><b>零填充</b>是指在输入向量两端进行补零 (如下图 (b)). 假设卷积层的输入神经元个数为 $M$, 卷积大小为 $K$, 步长为 $S$, 在输入两端各填补 $P$ 个 0, 那么该卷积层的神经元数量为 $(M-K+2P)/S+1$. 一般常用的卷积有以下三类:</p>\n<ol>\n<li><b>窄卷积</b> : 步长 $S=1$, 两端不补零 $P=0$, 卷积输出后长度为 $M-K+1$;</li>\n<li><b>宽卷积</b> : 步长 $S=1$, 两端补零 $P=K-1$, 卷积后输出长度 $M-K-1$;</li>\n<li><b>等宽卷积</b> : 步长 $S=1$, 两端补零 $P=(K-1)/2$, 卷积输出后长度为 $M$ (如下图 (b)).</li>\n</ol>\n<p><strong>补一张图</strong></p>\n<h4 id=\"卷积的数学性质\"><a href=\"#卷积的数学性质\" class=\"headerlink\" title=\"卷积的数学性质\"></a>卷积的数学性质</h4><h5 id=\"交换性\"><a href=\"#交换性\" class=\"headerlink\" title=\"交换性\"></a>交换性</h5><p>如果不限制两个卷积信号的长度, 真正的翻转卷积是具有交换性的, 即 $x<em>y=y</em>x$. 对于互相关的卷积, 也同样具有一定的“交换性”.</p>\n<blockquote>\n<p><strong>宽卷积</strong>： 给定一个二维图像 $x\\in \\R^{M\\times N}$ 和一个二维卷积 $W\\in\\R^{U\\times V}$, 对图像 $X$ 进行零填充, 两端各补 $U-1$ 和 $V-1$ 个零, 得到<strong>全填充</strong>的图像$\\widetilde X\\in \\R^{(M+2U-2)\\times(N+2V-2)}$. 图像 $X$ 和卷积核 $W$ 的宽卷积定义为<br>$$<br>W\\widetilde\\otimes X\\stackrel{\\Delta}{=} W\\otimes \\widetilde X<br>$$<br>其中 $\\widetilde \\otimes$ 表示宽卷积运算</p>\n</blockquote>\n<p>当输入的信息和卷积核有固定长度是, 它们的宽卷积依然具有交换性, 即</p>\n<p>$$<br>\\mathrm{rot180}(W)\\widetilde \\otimes X = \\mathrm{rot180}(X)\\widetilde\\otimes W<br>$$</p>\n<p>其中 $\\mathrm{rot180}$ 表示旋转 180 度.</p>\n<h5 id=\"导数\"><a href=\"#导数\" class=\"headerlink\" title=\"导数\"></a>导数</h5><p>假设 $Y=W\\otimes X$, 其中 $X\\in\\R^{M\\times N}$, $W\\in \\R^{U\\times V}$, $Y\\in \\R^{(M-U+1)\\times(N-V+1)}. 函数 $f(Y)\\in\\R$为一个标量函数, 则</p>\n<center><img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/20220901214221.png\" alt=\"20220901214221\" width=\"100%\"/></center>\n\n<p>其中 $y_{i, j}=\\sum\\limits_{u, v}w_{u, v}x_{i+u-1, j+v-1}$.</p>\n<p>可以看出, $f(Y)$关于 $W$ 的偏导数为 $X$ 和 $\\frac{\\partial f(Y)}{\\partial Y}$ 的卷积.</p>\n<center><img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/20220901214519.png\" alt=\"20220901214519\" width=\"200px\"/> </center>\n\n<p>同理可得</p>\n<p>$$<br>\\cfrac{\\partial f(Y)}{\\partial x_{st}}<br>= \\sum\\limits_{i=1}^{M-U+1}\\sum\\limits_{j=1}^{N-V+1}<br>\\cfrac{\\partial y_{ij}}{\\partial x_{st}}\\cfrac{\\partial f(Y)}{\\partial y_{ij}}<br>= \\sum\\limits_{i=1}^{M-U+1}\\sum\\limits_{j=1}^{N-V+1}<br>w_{s-i+1, t-j+1}\\cfrac{\\partial f(Y)}{\\partial y_{ij}}<br>$$</p>\n<p>其中当 $(s-i+1)&lt;1$ 或 $(s-i+1)&gt;U$ 或 $(t-j+1)&lt;1$ 或 $(t-j+1)&gt;V$ 时, $w_{s-i+1, t-j+1}=0$. 即相当于对 $W$ 进行了 $P=(M-U, N-V)$ 的零填充.</p>\n<p>从上式 可以看出 $f(Y)$ 关于 $X$ 的偏导数为 $W$ 和 $\\frac{\\partial f(Y)}{\\partial Y}$ 的宽卷积. 上式中的卷积是真正的卷积而非互相关, 为了一致性, 我们用互相关的卷积, 即</p>\n<center><img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/20220901215249.png\" alt=\"20220901215249\" width=\"400px\"/> </center>\n\n<h3 id=\"用卷积代替全连接\"><a href=\"#用卷积代替全连接\" class=\"headerlink\" title=\"用卷积代替全连接\"></a>用卷积代替全连接</h3><p>采用卷积代替全连接前馈神经网络中的全连接, 第 $l$ 层的净输入 $z^{(l)}$ 为第 $l-1$ 层活性值 $a^{(l-1)}$ 和卷积核 $w^{(l)}\\in\\R^K$ 的卷积, 即<br>$$<br>z^{(l)}=w^{(l)}\\otimes a^{(l-1)}+b^{(l)}<br>$$<br>其中卷积核 $w^{(l)}\\in\\R^K$为可学习的权重向量, $b^{(l)}\\in\\R$ 为可学习的权重偏置.</p>\n<center>\n    <img src=\"http://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/image-20220903081729455.png\" style=\"width:400px\" />\n</center>\n<center><p>全连接层和卷积层的对比</p></center>\n\n<p>卷积层具有<strong>局部连接</strong>和<strong>权重共享</strong>的性质.</p>\n<p>卷积层的参数只有一个 $K$ 维的权重 $w^{(l)}$ 和 1 维的偏置 $b^{(l)}$, 共 $K+1$ 个参数. 参数个数和神经元的数量无关. </p>\n<p>第 $l$ 层的神经元数量满足 $M_l=M_{l-1}-K+1$.</p>\n<h3 id=\"卷积层\"><a href=\"#卷积层\" class=\"headerlink\" title=\"卷积层\"></a>卷积层</h3><p>假设一个卷积层的结构如下:</p>\n<ol>\n<li><p><b>输入特征映射组</b>: $\\mathscr{X} \\in \\R^{M\\times N\\times D} $ 为三维张量, 其中每个切片矩阵 $x^d\\in\\R^{M\\times N}$ 为一个输入特征映射, $1\\le d\\le D$.</p>\n</li>\n<li><p><b>输出特征映射组</b>: $\\mathscr{Y}\\in \\R^{M’\\times N’\\times P}$ 为三维张量, 其中每个切片矩阵 $y^p\\in R^{M\\times N}$ 为一个输出特征映射, $1\\le d\\le P$.</p>\n</li>\n<li><p><b>卷积核</b>: $\\mathscr{W}\\in\\R^{U\\times V\\times P\\times D}$ 为四维张量, 其中每个切片矩阵 $W^{p, d}\\in\\R^{U\\times V}$ 为一个二维卷积核, $1\\le p\\le P, 1\\le d\\le D$.</p>\n</li>\n</ol>\n<center><img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/20220903091651.png\" alt=\"20220903091651\" width=\"100%\"/> </center>\n<center><p> 卷积层的三维结构表示 </p></center>\n\n<p>为了计算输出特征映射 $Y^p$, 用卷积核 $W^{p, 1}, W^{p, 2},\\cdots, W^{p, D}$ 分别对输入特征映射 $X^1, X^2,\\cdots, X^D$ 进行卷积, 然后将卷积结果相加, 并加上一个标量偏置 $b^p$ 得到卷积层的净输入 $Z^p$, 再经过非线性激活函数后得到输出特征映射 $Y^p$.</p>\n<p>$$<br>\\begin{aligned}<br>Z^p &amp; = W^p\\otimes X + b^p  = \\sum\\limits_{d=1}^D W^{p, d}\\otimes X^d + b^p \\<br>Y^p &amp;= f(Z^p)<br>\\end{aligned}<br>$$</p>\n<p>其中 $W^p\\in\\R^{U\\times V\\times D}$ 为三维卷积核, $f(\\cdot)$ 为非线性激活函数,  一般用 ReLU 函数.</p>\n<p>如果希望卷积层输出 $P$ 个特征映射, 可以将上述计算过程重复 $P$ 次,  得到 $P$ 个输出特征映射 $Y^1, Y^2, \\cdots, Y^P$.</p>\n<center><img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/20220903092648.png\" alt=\"20220903092648\" width=\"100%\"/> </center>\n<center><p> 卷积层中从输入特征映射组 X 到输出特征映射 Y<sup>P</sup> 的计算示例 </p></center>\n\n<p>在输入为 $\\mathscr{X}\\in\\R^{M\\times N\\times D}$, 输出为 $\\mathscr{Y}\\in\\R^{M’\\times N’\\times P}$ 的卷积层中, 每一个输出特征映射都需要 $D$ 个卷积核以及一个偏置. 假设每个卷积核的大小为 $U\\times V$, 那么共需要 $P\\times D\\times (U\\times V)+P$ 个参数.</p>\n<h3 id=\"汇聚层\"><a href=\"#汇聚层\" class=\"headerlink\" title=\"汇聚层\"></a>汇聚层</h3><p>汇聚层也叫<b>子采样层</b>, 其作用是进行特征选择, 降低特征数量, 从而减少参数数量.</p>\n<p>假设汇聚层的输入特征映射组为 $\\mathscr{X}\\in\\R^{M\\times N\\times D}$, 对于其中每一个特征映射 $X^d\\in\\R^{M\\times N}, 1\\le d\\le D$. 将其划分为很多区域 $R^d_{m, n}, 1\\le m\\le M’, 1\\le n\\le N’$, 这些区域可以重叠, 也可以不重叠. <b>汇聚</b>是指对每个区域进行<b>下采样</b>得到一个值, 作为这个区域的概括.</p>\n<p>常用的汇聚函数有两种</p>\n<ol>\n<li><b>最大汇聚</b>: 对于一个区域 $R^d_{m, n}$ 选择这个区域内所有神经元的最大活性值作为这个区域的表示:<br>$$<br>y^d_{m, n} = \\max\\limits_{i\\in R^{d_{m, n}}} x_i<br>$$</li>\n</ol>\n<p>其中 $x_i$ 为区域 $R^d_k$ 内每个神经元的活性值</p>\n<ol start=\"2\">\n<li><b>平均汇聚</b>: 一般是取区域内所有神经元活性值的平均值, 即<br>$$<br>y^d_{m, n} = \\cfrac{1}{|R^d_{m, nj}|}\\sum\\limits_{i\\in\\R^d_{m, n}} x_i<br>$$</li>\n</ol>\n<p>对于每一个输入映射 $X^d$ 的 $M’\\times N’$ 个区域进行子采样, 得到汇聚层的输出特征映射 $Y^d={ y^d_{m, n} }, 1\\le m\\le M’, 1\\le n\\le N’$.</p>\n<center>\n    <img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/2022-09-03_21-55-13.gu1DnMUPz.png\" width=\"600px\"/>\n    <p><b>汇聚层中最大汇聚过程示例</b></p>\n</center>\n\n<h3 id=\"卷积网络的整体结构\"><a href=\"#卷积网络的整体结构\" class=\"headerlink\" title=\"卷积网络的整体结构\"></a>卷积网络的整体结构</h3><p>一个典型的卷积网络是由卷积层、汇聚层、全连接层交叉堆叠而成. 一个<b>卷积块</b>为连续 $M$ 个卷积层与 $b$ 个汇聚层. 一个卷积网络中可以堆叠 $N$ 个连续的卷积块, 然后后面接着 $K$ 个全连接层.</p>\n<center>\n    <img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/2022-09-04_15-03-13.o7kTao337.png\" width=\"600p\"/>\n    <p><b>常用的卷积网络整体结构</b></p>\n</center>\n\n<h3 id=\"参数学习\"><a href=\"#参数学习\" class=\"headerlink\" title=\"参数学习\"></a>参数学习</h3><p>在卷积神经网络中, 参数为卷积核中的<b>权重</b>与<b>偏置</b>.</p>\n<p>不失一般性，对第 $l$ 层为卷积层，第 $l-1$ 层的输入特征映射为 $\\mathscr{X}^{(l-1)}\\in \\R^{M\\times N\\times D}$, 通过卷积计算得到第 $l$ 层的特征映射净输入$\\mathscr{Z}^{(l)}\\in\\R^{M’\\times N’\\times P}$. 第 $l$ 层的第 $p(1\\le p\\le P)$ 个特征映射净输入</p>\n<center>\n    <img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/2022-09-04_15-11-46.4erJ0Qb3P.png\" width=\"500px\"/>\n</center>\n\n<hr>\n<h2 id=\"循环神经网络\"><a href=\"#循环神经网络\" class=\"headerlink\" title=\"循环神经网络\"></a>循环神经网络</h2><p>前馈神经网络中, 每次输入都是独立的, 即网络的输出只依赖于当前的输入. 但是在现实中, 网络的输出不仅和当前时刻的输入相关, 也和过去一段时间的输出相关.</p>\n<p>循环神经网络 (Recurrent Neural Network, RNN) 是一类具有短期记忆能力的神经网络．<br>在循环神经网络中, 神经元不但可以接受其他神经元的信息, 也可以接受自身的信息, 形成具有环路的网络结构.</p>\n<h3 id=\"给网络增加记忆能力\"><a href=\"#给网络增加记忆能力\" class=\"headerlink\" title=\"给网络增加记忆能力\"></a>给网络增加记忆能力</h3><h4 id=\"延时神经网络\"><a href=\"#延时神经网络\" class=\"headerlink\" title=\"延时神经网络\"></a>延时神经网络</h4><p>建立一个额外的延时单元, 用来存储网络的输入、输出、隐状态等历史信息.<br>比较有代表性的模型是<b>延时神经网络</b>.</p>\n<p>延时神经网络是在前馈网络中的<b>非输出层</b>都添加一个<b>延时器</b>, 记录神经元的最近几次活动值. 在第 $t$ 个时刻, 第 $l$ 层神经元的<b>活性值</b>依赖于第 $l-1$ 层神经元的最近 $K$ 个时刻的活性值, 即</p>\n<p>$$<br>h_t^{(l)} = f\\left( h_t^{(l-1)}m h^{(l-1)}<em>{t-1},\\cdots, h^{(l-1)}</em>{他-} \\right)<br>$$</p>\n<p>其中 $h_t^{(l)} \\in \\R^{M_l}$ 表示第 $l$ 层神经元在时刻 $t$ 的活性值, $M_t$ 为第 $l$ 层神经元的数量.</p>\n<p>通过延时器, 前馈神经网络就具有了短期记忆的能力.</p>\n<h4 id=\"有外部输入的非线性自回归模型\"><a href=\"#有外部输入的非线性自回归模型\" class=\"headerlink\" title=\"有外部输入的非线性自回归模型\"></a>有外部输入的非线性自回归模型</h4><h4 id=\"循环神经网络-1\"><a href=\"#循环神经网络-1\" class=\"headerlink\" title=\"循环神经网络\"></a>循环神经网络</h4><hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2>","tags":["机器学习","深度学习"]},{"title":"GObject Notes","url":"/2022/09/11/28-gobject-learning/","content":"<h1 id=\"GObject\"><a href=\"#GObject\" class=\"headerlink\" title=\"GObject\"></a>GObject</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>GObject 可以理解为一个库, 使用这个库可以用 C 语言编写面向对象的程序.</p>\n<p>这里通过一个例子直观地来理解一下 GObject.</p>\n<h3 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h3><p>使用 GObject 时, 变量的命名尽量遵循 <code>&lt;module&gt;_&lt;type&gt;</code> 的前缀, 如当前工程名为 <code>T</code>, 要定义一个类 <code>Integer</code>, 则将该类命名为 <code>TInteger</code>, 并对于各种函数以前缀 <code>t_integer</code> 命名.</p>\n<p>首先, 在 GObject 中, 要定义一个「Class」需要两个结构体, 比如, 我要定义一个 <code>TInteger</code> 类, 则需要定义一个结构体 <code>typedef struct _TInteger TInteger</code> 与 <code>typedef struct _TIntegerClass TIntegerClass</code>.</p>\n<p>这两者之间的关系比较复杂, 能力有限, 我难以描述清楚. 这里我们只关注如何使用, 而不深究其原理.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">typedef</span> _IntegerClass IntegerClass;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">IntegerClass</span> &#123;</span><br>\t<span class=\"hljs-comment\">// 将 GObjectClass 作为其第一个成员, 代表继承自 GObject</span><br>\tGObjectClass parent_class;<br>&#125;;<br><br><span class=\"hljs-keyword\">typedef</span> _Integer Integer;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">Integer</span> &#123;</span><br>\t<span class=\"hljs-comment\">// 将 GObject 作为其第一个成员, 代表继承自 GObject</span><br>\tGObject parent;<br>\t<span class=\"hljs-comment\">// 公开的成员变量</span><br>\t<span class=\"hljs-type\">int</span> sex;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"添加-private-属性\"><a href=\"#添加-private-属性\" class=\"headerlink\" title=\"添加 private 属性\"></a>添加 private 属性</h3><p>要为一个类添加 private 属性, 需要如下方法:</p>\n<p>首先定义一个 <code>TIntegerPrivate</code> 类, 并将所有要设置为 <code>private</code> 的属性放到这里面</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">TIntegerPrivate</span> <span class=\"hljs-title\">TIntegerPrivate</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">TIntegerPrivate</span> &#123;</span><br>\t<span class=\"hljs-type\">int</span> value;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>需要注意的是, GObject 系统添加 private 属性的原理大概是, 在申请每一个类实例的空间时, 额外申请一块 private 的空间并“挂”到实例的空间旁边.</p>\n<p>GObject 系统 private 属性的大小有 64K 的限制. 这一限制在 vala 中也有, 因为实际上 vala 编译器就是将 vala 代码“编译”为使用 glib 等实现的 C 语言代码. 因此 vala 中私有属性也无法避免 64K 大小的限制.</p>\n<h3 id=\"注册类型\"><a href=\"#注册类型\" class=\"headerlink\" title=\"注册类型\"></a>注册类型</h3><p>无论是否添加 private 属性, 在定义了 <code>TInteger</code>, <code>TIntegerClass</code> 以及可能还有 <code>TIntegerPrivate</code> 之后, 都需要向 GObject 系统注册该类.</p>\n<p>首先, 需要定义宏:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> T_TYPE_INTEGER (t_integer_get_type())</span><br></code></pre></td></tr></table></figure>\n\n<p>如果没有定义 private 属性, 则可以:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// G_TYPE_OBJECT 与 T_TYPE_INTEGER 类似, 是属于 Integer 类父类的</span><br>G_DEFINE_TYPE (TInteger, t_integer, G_TYPE_OBJECT);<br></code></pre></td></tr></table></figure>\n\n<p>如果定义了 private 属性, 则可以:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\">G_DEFINE_TYPE_WITH_CODE (TInteger, t_integer, G_TYPE_OBJECT, G_ADD_PRIVATE(TInteger));<br></code></pre></td></tr></table></figure>\n\n<p>该宏会定义一个函数 <code>TIntegerPrivate* t_integer_get_instance_private(TInteger*);</code>, 该函数用于取出其私有属性.</p>\n<p>通常将该部分内容写到一个单独的 c 文件中, 来对外隐藏 private 的部分.</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>在注册类型之后, <code>G_DEFINE_TYPE*</code> 宏会声明两个函数 : <code>static void t_integer_init(TInteger*);</code> 与 <code>static void t_integer_class_init(TIntegerClass*);</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">t_integer_init</span><span class=\"hljs-params\">(TInteger* i)</span> &#123;<br>\tTIntegerPrivate priv = t_integer_get_instance_private(i);<br>\tpriv-&gt;value = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-comment\">// 如果没有 private, 则直接</span><br>\t<span class=\"hljs-comment\">// i-&gt;value = 0;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"一些特殊的宏\"><a href=\"#一些特殊的宏\" class=\"headerlink\" title=\"一些特殊的宏\"></a>一些特殊的宏</h2><h3 id=\"G-DECLARE-FINAL-TYPE\"><a href=\"#G-DECLARE-FINAL-TYPE\" class=\"headerlink\" title=\"G_DECLARE_FINAL_TYPE\"></a>G_DECLARE_FINAL_TYPE</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\">G_DECLARE_FINAL_TYPE (ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Example:</span><br><span class=\"hljs-comment\"> * G_DECLARE_FINAL_TYPE (TDouble, t_double, T, Double, GObject);</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></td></tr></table></figure>\n\n<p>宏 <code>G_DECLARE_FINAL_TYPE</code> 会做以下事情:</p>\n<ol>\n<li>定义函数 <code>&lt;module&gt;_&lt;objName&gt;_get_type()</code>. 如 <code>t_double_get_type()</code>.</li>\n<li>声明了类型 <code>typedef struct _&lt;module&gt;&lt;objName&gt; &lt;module&gt;&lt;objName&gt;</code> 及 <code>typedef struct _&lt;module&gt;&lt;objName&gt;Class &lt;module&gt;&lt;objName&gt;Class</code>. 如 <code>typedef struct _TDouble TDouble</code> 和 <code>struct _TDoubleClass TDoubleClass</code>.</li>\n<li>定义宏 <code>&lt;module&gt;_&lt;objName&gt;</code>. 如 <code>T_DOUBLE</code>. 该宏会被展开成为一个函数, 该函数将一个 <code>gpointer*</code> 强制转换为 <code>TDouble*</code>.</li>\n<li>定义宏 <code>&lt;module&gt;_IS_&lt;objName&gt;</code>. 如 <code>T_IS_DOUBLE</code>.</li>\n</ol>\n<p>与 <code>G_DECLARE_FINAL_TYPE</code> 类似的还有 <code>G_DECLARE_DERIVABLE_TYPE</code>, 其区别在于 <code>G_DECLARE_FINAL_TYPE</code> 定义的类不可被继承, 而 <code>G_DECLARE_DERIVABLE_TYPE</code> 声明的类可以被继承, 即再产生子类.</p>\n<p><code>G_DECLARE_*_TYPE</code> 类宏与 <code>G_DEFINE_TYPE*</code> 类宏的区别在于, <code>DECLARE</code> 只是做了一些“体力活”, 即将一部分同质化的函数通过宏定义出来, 如 <code>T_IS_INTEGER</code> 等, 但是并没有向 GObject 系统注册该类, 而 <code>DEFINE</code> 类宏是向 GObject 类注册了该类.</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>这里以 <code>TInteger</code> 作为一个例子.</p>\n<p><b>t_integer.h</b> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;glib-object.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> __T_INTEGER_H_UCRSVKFT</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> __T_INTEGER_H_UCRSVKFT</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> T_TYPE_INTEGER (t_integer_get_type())</span><br><br>G_DECLARE_DERIVABLE_TYPE(TInteger, t_integer, T, INTEGER, GObject);<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">TIntegerClass</span> &#123;</span><br>\tGObjectClass parent_class;<br>&#125;;<br><br>TInteger*<br><span class=\"hljs-title function_\">t_integer_new</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span>;<br><br>gboolean<br><span class=\"hljs-title function_\">t_integer_get_value</span><span class=\"hljs-params\">(TInteger *self, <span class=\"hljs-type\">int</span>* value)</span>;<br><br>gboolean<br><span class=\"hljs-title function_\">t_integer_set_value</span><span class=\"hljs-params\">(TInteger *self, <span class=\"hljs-type\">int</span> value)</span>;<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span> <span class=\"hljs-comment\">/* end of include guard: __T_INTEGER_H_UCRSVKFT */</span></span><br></code></pre></td></tr></table></figure>\n\n<p><b>t_integer.c</b> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;t_integer.h&quot;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">TIntegerPrivate</span> <span class=\"hljs-title\">TIntegerPrivate</span>;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">TIntegerPrivate</span> &#123;</span><br>\t<span class=\"hljs-type\">int</span> value;<br>&#125;;<br><br>G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE(TInteger, t_integer, G_TYPE_OBJECT);<br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span><br><span class=\"hljs-title function_\">t_integer_class_init</span><span class=\"hljs-params\">(TIntegerClass* klass)</span> &#123; &#125;<br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span><br><span class=\"hljs-title function_\">t_integer_init</span><span class=\"hljs-params\">(TInteger* self)</span> &#123;<br>\tTIntegerPrivate* priv = t_integer_get_instance_private(self);<br>\tpriv-&gt;value = <span class=\"hljs-number\">0</span>;<br>&#125;<br><br>TInteger*<br><span class=\"hljs-title function_\">t_integer_new</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> &#123;<br>\tTInteger* t_i = g_object_new(T_TYPE_INTEGER, <span class=\"hljs-literal\">NULL</span>);<br>\tTIntegerPrivate* priv = t_integer_get_instance_private(t_i);<br>\tpriv-&gt;value = value;<br>\t<span class=\"hljs-keyword\">return</span> t_i;<br>&#125;<br><br>gboolean<br><span class=\"hljs-title function_\">t_integer_get_value</span><span class=\"hljs-params\">(TInteger *self, <span class=\"hljs-type\">int</span>* value)</span> &#123;<br>\tg_return_val_if_fail(T_IS_INTEGER(self), FALSE);<br>\tTIntegerPrivate* priv = t_integer_get_instance_private(self);<br>\t*value = priv-&gt;value;<br>\t<span class=\"hljs-keyword\">return</span> TRUE;<br>&#125;<br><br>gboolean<br><span class=\"hljs-title function_\">t_integer_set_value</span><span class=\"hljs-params\">(TInteger *self, <span class=\"hljs-type\">int</span> value)</span> &#123;<br>\tg_return_val_if_fail(T_IS_INTEGER(self), FALSE);<br>\tTIntegerPrivate* priv = t_integer_get_instance_private(self);<br>\tpriv-&gt;value = value;<br>\t<span class=\"hljs-keyword\">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"信号机制\"><a href=\"#信号机制\" class=\"headerlink\" title=\"信号机制\"></a>信号机制</h2><p>信号机制有点像 java 中的 <code>ActionListener</code>. 通过信号机制, 可以为某个实例注册一个信号, 当触发该信号时, 可以调用相应的回调函数.</p>\n<h3 id=\"信号注册-Signal-Registration\"><a href=\"#信号注册-Signal-Registration\" class=\"headerlink\" title=\"信号注册 (Signal Registration)\"></a>信号注册 (Signal Registration)</h3><p>在使用一个信号之前需先使用 <code>g_signal_new</code> 函数注册该信号:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\">guint <span class=\"hljs-title function_\">g_signal_new</span><span class=\"hljs-params\">(</span><br><span class=\"hljs-params\">\t<span class=\"hljs-type\">const</span> gchar        *signal_name , <span class=\"hljs-comment\">/* 信号名                      */</span></span><br><span class=\"hljs-params\">\tGType              itype        , <span class=\"hljs-comment\">/* 要为哪个类注册信号          */</span></span><br><span class=\"hljs-params\">\tGSignalFlags       signal_flags , <span class=\"hljs-comment\">/* 信号的 Flag                 */</span></span><br><span class=\"hljs-params\">\tguint              class_offset , <span class=\"hljs-comment\">/* 一个偏移量, 设为 0 即可     */</span></span><br><span class=\"hljs-params\">\tGSignalAccumulator accumulator  , <span class=\"hljs-comment\">/* 暂时忽略这个参数            */</span></span><br><span class=\"hljs-params\">\tgpointer           accu_data    , <span class=\"hljs-comment\">/* 暂时忽略这个参数, 设为NULL  */</span></span><br><span class=\"hljs-params\">\tGSignalCMarshaller c_marshaller , <span class=\"hljs-comment\">/* 暂时忽略这个参数            */</span></span><br><span class=\"hljs-params\">\tGType              return_type  , <span class=\"hljs-comment\">/* handler 函数的返回类型      */</span></span><br><span class=\"hljs-params\">\tguint              n_params     , <span class=\"hljs-comment\">/* handler 函数接收的参数个数  */</span></span><br><span class=\"hljs-params\">\t...                               <span class=\"hljs-comment\">/* 如果 n_params 是 0 则不需要 */</span></span><br><span class=\"hljs-params\">\t)</span><br></code></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> T_INTEGER_SIGNAL_DIV_BY_ZERO <span class=\"hljs-string\">&quot;div-by-zero&quot;</span></span><br><span class=\"hljs-type\">static</span> guint t_integer_signal_div_by_zero;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span><br><span class=\"hljs-title function_\">t_integer_class_init</span><span class=\"hljs-params\">(TIntegerClass* klass)</span> &#123;<br>\tt_integer_signal_div_by_zero =<br>\t\tg_signal_new(<br>\t\t\tT_INTEGER_SIGNAL_DIV_BY_ZERO ,<br>\t\t\tG_TYPE_FROM_CLASS(klass),<br>\t\t\tG_SIGNAL_RUN_LAST | G_SIGNAL_NO_RECURSE | G_SIGNAL_NO_HOOKS,<br>\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t<span class=\"hljs-literal\">NULL</span>,<br>\t\t\t<span class=\"hljs-literal\">NULL</span>,<br>\t\t\t<span class=\"hljs-literal\">NULL</span>,<br>\t\t\tG_TYPE_NONE,<br>\t\t\t<span class=\"hljs-number\">0</span><br>\t\t);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><b>注意信号的名称有命名规则, 只能使用 ASCII 字符, 用短划线 “-“ 或下划线 “_” 连接, 必须以字母开始, 建议使用短划线连接, 并且短划线与下划线不能混合使用.</b></p>\n<h3 id=\"信号处理-Signal-Handler\"><a href=\"#信号处理-Signal-Handler\" class=\"headerlink\" title=\"信号处理 (Signal Handler)\"></a>信号处理 (Signal Handler)</h3><p>定义如下函数:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">callback_div_by_zero</span><span class=\"hljs-params\">(TInteger* i, gpointer* user_data)</span> &#123;<br>\tg_print(<span class=\"hljs-string\">&quot;[ERROR] Div by ZERO!\\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"信号释放-Signal-Emission\"><a href=\"#信号释放-Signal-Emission\" class=\"headerlink\" title=\"信号释放 (Signal Emission)\"></a>信号释放 (Signal Emission)</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\">gboolean<br><span class=\"hljs-title function_\">t_integer_div</span><span class=\"hljs-params\">(TInteger *a, TInteger *b, TInteger* result)</span> &#123;<br>\tg_return_val_if_fail(T_IS_INTEGER(a) &amp;&amp; T_IS_INTEGER(b) &amp;&amp; T_IS_INTEGER(result), FALSE);<br><br>\t<span class=\"hljs-type\">int</span> va, vb;<br>\tgboolean ja = t_integer_get_value(a, &amp;va);<br>\tgboolean jb = t_integer_get_value(b, &amp;vb);<br>\t<span class=\"hljs-keyword\">if</span> (vb == <span class=\"hljs-number\">0</span>) &#123;<br>\t\tg_signal_emit(b, t_integer_signal_div_by_zero, <span class=\"hljs-number\">0</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> FALSE;<br>\t&#125;<br>\tgboolean jr = t_integer_set_value(result, va / vb);<br>\t<span class=\"hljs-keyword\">return</span> ja &amp;&amp; jb &amp;&amp; jr ? TRUE : FALSE;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"信号链接-Signal-Connection\"><a href=\"#信号链接-Signal-Connection\" class=\"headerlink\" title=\"信号链接 (Signal Connection)\"></a>信号链接 (Signal Connection)</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">g_signal_connect</span><span class=\"hljs-params\">(instance, detailed_signal, c_handler, data)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>如 :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\">TInteger*<br><span class=\"hljs-title function_\">t_integer_new</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> &#123;<br>\tTInteger* t_i = g_object_new(T_TYPE_INTEGER, <span class=\"hljs-literal\">NULL</span>);<br>\tTIntegerPrivate* priv = t_integer_get_instance_private(t_i);<br>\tpriv-&gt;value = value;<br>\tg_signal_connect(t_i, T_INTEGER_SIGNAL_DIV_BY_ZERO, G_CALLBACK( callback_div_by_zero ), <span class=\"hljs-literal\">NULL</span>);<br>\t<span class=\"hljs-keyword\">return</span> t_i;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"默认-Handler\"><a href=\"#默认-Handler\" class=\"headerlink\" title=\"默认 Handler\"></a>默认 Handler</h3><p>有一些信号, 我们希望给他们默认的 Handler, 则可以使用 <code>g_signal_new_class_handler</code> 函数注册信号.<br><code>g_signal_new_class_handler</code> 函数与 <code>g_signal_new</code> 函数的区别在于第四个参数, 在 <code>g_signal_new</code> 函数中, 第四个参数是一个偏移量, 用于在类中按照该偏移量寻找默认 handler 函数, 这样做的缺陷是对于 final 类, 无法在类中定义默认 handler 函数. 而 <code>g_signal_new_class_handler</code> 函数中第四个参数是一个函数, 用以指定为默认 handler.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> guint t_integer_signal_div_by_zero;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">callback_div_by_zero</span><span class=\"hljs-params\">(TInteger* i, gpointer* user_data)</span>; <br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span><br><span class=\"hljs-title function_\">t_integer_class_init</span><span class=\"hljs-params\">(TIntegerClass* klass)</span> &#123;<br>\tt_integer_signal_div_by_zero =<br>\t\tg_signal_new_class_handler(T_INTEGER_SIGNAL_DIV_BY_ZERO ,<br>\t\t\t\tG_TYPE_FROM_CLASS(klass),<br>\t\t\t\tG_SIGNAL_RUN_LAST | G_SIGNAL_NO_RECURSE | G_SIGNAL_NO_HOOKS,<br>\t\t\t\tG_CALLBACK(callback_div_by_zero),<br>\t\t\t\t<span class=\"hljs-literal\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-literal\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-literal\">NULL</span>,<br>\t\t\t\tG_TYPE_NONE,<br>\t\t\t\t<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在定义了默认 handler 后, 无需再对信号进行连接.</p>\n<h3 id=\"Flags\"><a href=\"#Flags\" class=\"headerlink\" title=\"Flags\"></a>Flags</h3><p>对于 <code>g_signal_new</code> 与 <code>g_signal_new_class_handler</code> 函数中的第 3 个参数 <code>signal_flags</code>, 有如下选项:</p>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>G_SIGNAL_RUN_FIRST</code></td>\n<td>默认 handler 在所有用户定义 handler 之前运行</td>\n</tr>\n<tr>\n<td><code>G_SIGNAL_RUN_LAST</code></td>\n<td>默认 handler 在用户定义的正常 handler 之后运行 (没有被 <code>g_signal_connect_after</code> 连接的)</td>\n</tr>\n<tr>\n<td><code>G_SIGNAL_RUN_CLEANUP</code></td>\n<td>默认 handler 在所有用户定义 handler 和之后运行</td>\n</tr>\n</tbody></table>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>有时候, 对于信号的 handler 函数, 需要传递一些参数.</p>\n","tags":["gtk","gobject"]},{"title":"SeaFile 搭建网盘","url":"/2022/10/02/29-seafile/","content":"<h1 id=\"seafile-搭建网盘\"><a href=\"#seafile-搭建网盘\" class=\"headerlink\" title=\"seafile 搭建网盘\"></a>seafile 搭建网盘</h1><p>已经好长时间而, 感觉需要一个同步网盘. 之前用过 iCloud, 非常好用, 现在的目标也是打造一个类似的<b>增量同步网盘</b>, 最终选择了 seafile</p>\n<h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>首先, 在 seafile 的下载页面下载 seafile 的最新 <a href=\"https://www.seafile.com/download/\">压缩包版本</a>, 解压到服务器的 <code>/opt/seafile</code> 目录下.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">/opt/seafile/seafile-server-9.0.9/<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>按照 <a href=\"https://cloud.seafile.com/published/seafile-manual-cn/deploy/using_mysql.md\">官方指南</a> 安装依赖:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">dnf install -y python3 python3-setuptools python3-pip python3-ldap python3-devel community-mysql-devel gcc gcc-c++ libffi-devel<br><br>pip install \\<br>    django==3.2.10 django-pylibmc django-simple-captcha \\<br>\tmysqlclient pymysql sqlalchemy==1.4.3 \\<br>\tpylibmc captcha jinja2 future Pillow psd-tools \\<br>\tpycryptodome==3.12.0 lxml<br></code></pre></td></tr></table></figure>\n\n<p>注意在安装 pip 之前必须先运行 dnf 命令安装软件包, 因为有部分依赖关系.</p>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><h3 id=\"nginx-设置\"><a href=\"#nginx-设置\" class=\"headerlink\" title=\"nginx 设置\"></a>nginx 设置</h3><p>按照 <a href=\"https://cloud.seafile.com/published/seafile-manual-cn/deploy/deploy_with_nginx.md\">nginx 下配置 seahub</a> 的指导进行配置.</p>\n<p>需要在 <code>/etc/nginx/nginx.conf</code> 中添加 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs conf\">http &#123;<br>\t...<br>\tinclude /etc/nginx/site-enabled/*;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>另外, 可以将 <code>site-enabled/seafile.conf</code> 中的监听端口改为自定义端口, 如 9075 等.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs conf\">server &#123;<br>\tlisten 9075;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在 <code>location /seafhttp</code> 一节中添加 <code>proxy_request_buffering off</code> 以允许大文件传输:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">location /seafhttp &#123;<br>\t...<br>\tproxy_request_buffering off;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"seahub-时区设置\"><a href=\"#seahub-时区设置\" class=\"headerlink\" title=\"seahub 时区设置\"></a>seahub 时区设置</h3><p>编辑 <code>/opt/seafile/seafile-server-9.0.9/seahub/seahub/settings.py</code>, 将时区改为 亚洲/上海:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\">...<br>TIME_ZONE = <span class=\"hljs-string\">&#x27;Asia/Shanghai&#x27;</span><br>...<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><p>运行 <code>seafile.sh start</code>, 按照提示进行选择.</p>\n<p>启动成功后运行 <code>seahub.sh start</code>.</p>\n<p>然后浏览器中访问 <code>ip:9075</code>, 就能看到登陆页面, 输入刚才设置的账号密码, 点击头像选择系统管理, 更改 <code>SERVICE_URL</code> 与 <code>FILE_SERVER_ROOT</code> 选项:</p>\n<p><img src=\"https://corona-oss.oss-cn-qingdao.aliyuncs.com/notes-img/2022-10-02_10-38-22.OE5uMS2Zg.0.jpeg\"></p>\n","tags":["seafile","网盘"]}]